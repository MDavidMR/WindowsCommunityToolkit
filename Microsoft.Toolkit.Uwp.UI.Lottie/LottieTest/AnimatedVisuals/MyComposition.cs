//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Microsoft.Graphics.Canvas.Geometry;
using Microsoft.UI.Xaml.Controls;
using System;
using System.Numerics;
using Windows.UI;
using Windows.UI.Composition;

namespace AnimatedVisuals
{
    sealed class MyComposition : IAnimatedVisualSource
    {
        public IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor, out object diagnostics)
        {
            diagnostics = null;
            if (!IsRuntimeCompatible())
            {
                return null;
            }
            return new AnimatedVisual(compositor);
        }

        static bool IsRuntimeCompatible()
        {
            if (!Windows.Foundation.Metadata.ApiInformation.IsTypePresent("Windows.UI.Composition.CompositionGeometricClip"))
            {
                return false;
            }
            return true;
        }

        sealed class AnimatedVisual : IAnimatedVisual
        {
            const long c_durationTicks = 10670000;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            CompositionPath _compositionPath_1;
            CubicBezierEasingFunction _cubicBezierEasingFunction_0;
            ContainerVisual _root;
            ExpressionAnimation _scalarExpressionAnimation;
            StepEasingFunction _stepThenHoldEasingFunction;

            // Path 1
            CompositionColorBrush ColorBrush_AlmostSilver_FFBCC1C6()
            {
                return _c.CreateColorBrush(Color.FromArgb(0xFF, 0xBC, 0xC1, 0xC6));
            }

            // Path 1
            CompositionColorBrush ColorBrush_AlmostTomato_FFE84C3D()
            {
                return _c.CreateColorBrush(Color.FromArgb(0xFF, 0xE8, 0x4C, 0x3D));
            }

            CompositionPath CompositionPath_1()
            {
                var result = _compositionPath_1 = new CompositionPath(Geometry_1());
                return result;
            }

            // Transforms for Pin
            ContainerVisual ContainerVisual_1()
            {
                var result = _c.CreateContainerVisual();
                result.Scale = new Vector3(0.5F, 0.5F, 1);
                var children = result.Children;
                children.InsertAtTop(ShapeVisual_0());
                result.StartAnimation("Offset", Vector3KeyFrameAnimation());
                var controller = result.TryGetAnimationController("Offset");
                controller.Pause();
                controller.StartAnimation("Progress", _scalarExpressionAnimation);
                return result;
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_0()
            {
                return _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0.833000004F, 0.833000004F));
            }

            // Transforms for Pin
            //   Offset
            CubicBezierEasingFunction CubicBezierEasingFunction_1()
            {
                return _c.CreateCubicBezierEasingFunction(new Vector2(0.94599998F, 0), new Vector2(0.833000004F, 0.833000004F));
            }

            // Transforms for Pin
            //   Offset
            CubicBezierEasingFunction CubicBezierEasingFunction_2()
            {
                return _c.CreateCubicBezierEasingFunction(new Vector2(0.166999996F, 0.166999996F), new Vector2(0.0769999996F, 1));
            }

            CanvasGeometry Geometry_0()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(83.8099976F, -22.1420002F));
                    builder.AddCubicBezier(new Vector2(88.4860001F, -33.1959991F), new Vector2(91.0390015F, -45.368F), new Vector2(90.9589996F, -58.144001F));
                    builder.AddCubicBezier(new Vector2(90.6520004F, -107.434998F), new Vector2(50.5449982F, -147.869003F), new Vector2(1.25699997F, -148.554993F));
                    builder.AddCubicBezier(new Vector2(-49.5950012F, -149.261993F), new Vector2(-91.0390015F, -108.252998F), new Vector2(-91.0390015F, -57.5639992F));
                    builder.AddCubicBezier(new Vector2(-91.0390015F, -44.9990005F), new Vector2(-88.4929962F, -33.0289993F), new Vector2(-83.8880005F, -22.1420002F));
                    builder.AddLine(new Vector2(-1.801F, 147.787994F));
                    builder.AddCubicBezier(new Vector2(-1.08899999F, 149.263F), new Vector2(1.01199996F, 149.263F), new Vector2(1.72399998F, 147.787994F));
                    builder.AddLine(new Vector2(83.8099976F, -22.1420002F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_1()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(83.8099976F, -22.1420002F));
                    builder.AddCubicBezier(new Vector2(88.4860001F, -33.1959991F), new Vector2(91.0390015F, -45.368F), new Vector2(90.9589996F, -58.144001F));
                    builder.AddCubicBezier(new Vector2(90.6520004F, -107.434998F), new Vector2(50.5449982F, -147.869003F), new Vector2(1.25699997F, -148.554993F));
                    builder.AddCubicBezier(new Vector2(-49.5950012F, -149.261993F), new Vector2(-91.0390015F, -108.252998F), new Vector2(-91.0390015F, -57.5639992F));
                    builder.AddCubicBezier(new Vector2(-91.0390015F, -44.9990005F), new Vector2(-88.4929962F, -33.0289993F), new Vector2(-83.8880005F, -22.1420002F));
                    builder.AddCubicBezier(new Vector2(-83.8880005F, -22.1420002F), new Vector2(-1.801F, 147.787994F), new Vector2(-1.801F, 147.787994F));
                    builder.AddCubicBezier(new Vector2(-1.08899999F, 149.263F), new Vector2(1.01199996F, 149.263F), new Vector2(1.72399998F, 147.787994F));
                    builder.AddCubicBezier(new Vector2(1.72399998F, 147.787994F), new Vector2(83.8099976F, -22.1420002F), new Vector2(83.8099976F, -22.1420002F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_2()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(83.8099976F, -22.1420002F));
                    builder.AddCubicBezier(new Vector2(88.4860001F, -33.1959991F), new Vector2(91.0390015F, -45.368F), new Vector2(90.9589996F, -58.144001F));
                    builder.AddCubicBezier(new Vector2(90.6520004F, -107.434998F), new Vector2(50.5449982F, -147.869003F), new Vector2(1.25699997F, -148.554993F));
                    builder.AddCubicBezier(new Vector2(-49.5950012F, -149.261993F), new Vector2(-91.0390015F, -108.252998F), new Vector2(-91.0390015F, -57.5639992F));
                    builder.AddCubicBezier(new Vector2(-91.0390015F, -44.9990005F), new Vector2(-88.4929962F, -33.0289993F), new Vector2(-83.8880005F, -22.1420002F));
                    builder.AddCubicBezier(new Vector2(-83.8880005F, -22.1420002F), new Vector2(-2.03900003F, 120.288002F), new Vector2(-2.03900003F, 120.288002F));
                    builder.AddCubicBezier(new Vector2(-1.32700002F, 121.763F), new Vector2(0.773999989F, 121.763F), new Vector2(1.48599994F, 120.288002F));
                    builder.AddCubicBezier(new Vector2(1.48599994F, 120.288002F), new Vector2(83.8099976F, -22.1420002F), new Vector2(83.8099976F, -22.1420002F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_3()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.BeginFigure(new Vector2(-19.5F, 81.5F));
                    builder.AddLine(new Vector2(21, 81.5F));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            // Transforms for Pin
            //   Offset
            StepEasingFunction HoldThenStepEasingFunction()
            {
                var result = _c.CreateStepEasingFunction();
                result.IsFinalStepSingleFrame = true;
                return result;
            }

            // Path 1
            //   Path 1.PathGeometry
            //     Path
            LinearEasingFunction LinearEasingFunction()
            {
                return _c.CreateLinearEasingFunction();
            }

            // Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_0()
            {
                var result = _c.CreatePathGeometry(new CompositionPath(Geometry_0()));
                result.StartAnimation("Path", PathKeyFrameAnimation());
                var controller = result.TryGetAnimationController("Path");
                controller.Pause();
                controller.StartAnimation("Progress", ScalarExpressionAnimation());
                return result;
            }

            // Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry PathGeometry_1()
            {
                var result = _c.CreatePathGeometry(new CompositionPath(Geometry_3()));
                return result;
            }

            // Path 1
            //   Path 1.PathGeometry
            // Path
            PathKeyFrameAnimation PathKeyFrameAnimation()
            {
                var result = _c.CreatePathKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(0, CompositionPath_1(), StepThenHoldEasingFunction());
                result.InsertKeyFrame(0.4375F, _compositionPath_1, LinearEasingFunction());
                result.InsertKeyFrame(0.5F, new CompositionPath(Geometry_2()), CubicBezierEasingFunction_0());
                result.InsertKeyFrame(0.59375F, _compositionPath_1, _cubicBezierEasingFunction_0);
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0);
                propertySet.InsertScalar("t0", 0);
                var children = result.Children;
                children.InsertAtTop(ContainerVisual_1());
                children.InsertAtTop(ShapeVisual_1());
                result.StartAnimation("t0", ScalarAnimation_0_to_1());
                var controller = result.TryGetAnimationController("t0");
                controller.Pause();
                controller.StartAnimation("Progress", _scalarExpressionAnimation);
                return result;
            }

            ScalarKeyFrameAnimation ScalarAnimation_0_to_1()
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(0.468750089F, 0, _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.531249881F, 1, _cubicBezierEasingFunction_0);
                return result;
            }

            ExpressionAnimation ScalarExpressionAnimation()
            {
                var result = _scalarExpressionAnimation = _c.CreateExpressionAnimation();
                result.SetReferenceParameter("_", _root);
                result.Expression = "_.Progress";
                return result;
            }

            // Transforms for Pin
            ShapeVisual ShapeVisual_0()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(600, 600);
                var shapes = result.Shapes;
                // Path 1
                shapes.Add(SpriteShape_0());
                return result;
            }

            ShapeVisual ShapeVisual_1()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(600, 600);
                var shapes = result.Shapes;
                // Path 1
                shapes.Add(SpriteShape_1());
                return result;
            }

            // Path 1
            CompositionSpriteShape SpriteShape_0()
            {
                var result = _c.CreateSpriteShape();
                result.FillBrush = ColorBrush_AlmostTomato_FFE84C3D();
                result.Geometry = PathGeometry_0();
                return result;
            }

            // Path 1
            CompositionSpriteShape SpriteShape_1()
            {
                var result = _c.CreateSpriteShape();
                result.TransformMatrix = new Matrix3x2(1, 0, 0, 1, 300, 303);
                result.Geometry = PathGeometry_1();
                result.StrokeBrush = ColorBrush_AlmostSilver_FFBCC1C6();
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 4;
                result.StrokeThickness = 6;
                return result;
            }

            StepEasingFunction StepThenHoldEasingFunction()
            {
                var result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
                result.IsInitialStepSingleFrame = true;
                return result;
            }

            // Transforms for Pin
            // Offset
            Vector3KeyFrameAnimation Vector3KeyFrameAnimation()
            {
                var result = _c.CreateVector3KeyFrameAnimation();
                result.SetReferenceParameter("_", _root);
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(0, new Vector3(300.019012F, 150, 0), HoldThenStepEasingFunction());
                result.InsertKeyFrame(0.46875F, new Vector3(300.019012F, 299.917999F, 0), CubicBezierEasingFunction_1());
                result.InsertExpressionKeyFrame(0.531249881F, 
                    "(Pow(1 - _.t0, 3) * Vector3(300.019,299.918, 0)) + (3 * Square(1 - _.t0) * _.t0 * Vector3(300.019,327.2376,0)) + (3 * (1 - _.t0) * Square(_.t0) * Vector3(300.019,338.9043,0)) + (Pow(_.t0, 3) * Vector3(300.019,313.918,0))", _stepThenHoldEasingFunction);
                result.InsertKeyFrame(0.53125F, new Vector3(300.019012F, 313.917999F, 0), _stepThenHoldEasingFunction);
                result.InsertKeyFrame(1, new Vector3(300.019012F, 150, 0), CubicBezierEasingFunction_2());
                return result;
            }

            internal AnimatedVisual(Compositor compositor)
            {
                _c = compositor;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            Visual IAnimatedVisual.RootVisual => _root;
            TimeSpan IAnimatedVisual.Duration => TimeSpan.FromTicks(c_durationTicks);
            Vector2 IAnimatedVisual.Size => new Vector2(600, 600);
            void IDisposable.Dispose() => _root?.Dispose();
        }
    }
}
