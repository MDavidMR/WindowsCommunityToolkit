//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#include "pch.h"
#include "MyComposition.h"
#include "d2d1.h"
#include <d2d1_1.h>
#include <d2d1helper.h>
#include "WindowsNumerics.h"
#include <Windows.Graphics.Interop.h>
#include <wrl.h>

using namespace Windows::Foundation;
using namespace Windows::Foundation::Numerics;
using namespace Windows::UI;
using namespace Windows::UI::Composition;
using namespace Windows::Graphics;
using namespace Microsoft::WRL;

namespace
{
class GeoSource final :
    public ABI::Windows::Graphics::IGeometrySource2D,
    public ABI::Windows::Graphics::IGeometrySource2DInterop
 {
    ULONG _cRef;
    ComPtr<ID2D1Geometry> _cpGeometry;

public:
    GeoSource(ID2D1Geometry* pGeometry)
        : _cRef(0)
        , _cpGeometry(pGeometry)
    { }

    IFACEMETHODIMP QueryInterface(REFIID iid, void ** ppvObject) override
    {
        if (iid == __uuidof(ABI::Windows::Graphics::IGeometrySource2DInterop))
        {
            AddRef();
            *ppvObject = static_cast<ABI::Windows::Graphics::IGeometrySource2DInterop*>(this);
            return S_OK;
        }
        return E_NOINTERFACE;
    }

    IFACEMETHODIMP_(ULONG) AddRef() override
    {
        return InterlockedIncrement(&_cRef);
    }

    IFACEMETHODIMP_(ULONG) Release() override
    {
        ULONG cRef = InterlockedDecrement(&_cRef);
        if (cRef == 0)
        {
            delete this;
        }
        return cRef;
    }

    IFACEMETHODIMP GetIids(ULONG*, IID**) override
    {
        return E_NOTIMPL;
    }

    IFACEMETHODIMP GetRuntimeClassName(HSTRING*) override
    {
        return E_NOTIMPL;
    }

    IFACEMETHODIMP GetTrustLevel(TrustLevel*) override
    {
        return E_NOTIMPL;
    }

    IFACEMETHODIMP GetGeometry(ID2D1Geometry** value) override
    {
        *value = _cpGeometry.Get();
        (*value)->AddRef();
        return S_OK;
    }

    IFACEMETHODIMP TryGetGeometryUsingFactory(ID2D1Factory*, ID2D1Geometry**) override
    {
        return E_NOTIMPL;
    }
};

typedef ComPtr<GeoSource> CanvasGeometry;
class Instantiator final
{
    ComPtr<ID2D1Factory> _d2dFactory;
    const int64_t c_durationTicks = 20000000L;
    Compositor^ const _c;
    ExpressionAnimation^ const _reusableExpressionAnimation;
    CompositionColorBrush^ _animatedColorBrush_AlmostGray_FF868686_to_TransparentAlmostGray_00868686;
    CompositionColorBrush^ _animatedColorBrush_White_to_TransparentWhite;
    CompositionColorBrush^ _colorBrush_AlmostLightGray_FFCCD1D9;
    CubicBezierEasingFunction^ _cubicBezierEasingFunction_001;
    CubicBezierEasingFunction^ _cubicBezierEasingFunction_003;
    LinearEasingFunction^ _linearEasingFunction;
    ContainerVisual^ _root;
    ScalarKeyFrameAnimation^ _scalarAnimation_1_to_1;
    ExpressionAnimation^ _scalarExpressionAnimation;
    StepEasingFunction^ _stepEasingFunction;

    // 'ruoi'.Contents
    //   'Shape Layer 2'.Contents
    //     Group: Group 6
    //       Path 1
    CompositionColorBrush^ AnimatedColorBrush_AlmostDarkGray_FF9F9F9F_to_TransparentAlmostDarkGray_009F9F9F()
    {
        auto result = _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0x9F, 0x9F, 0x9F));
        result->StartAnimation("Color", ColorAnimation_AlmostDarkGray_FF9F9F9F_to_TransparentAlmostDarkGray_009F9F9F());
        auto controller = result->TryGetAnimationController("Color");
        controller->Pause();
        controller->StartAnimation("Progress", _scalarExpressionAnimation);
        return result;
    }

    CompositionColorBrush^ AnimatedColorBrush_AlmostGray_FF868686_to_TransparentAlmostGray_00868686()
    {
        auto result = _animatedColorBrush_AlmostGray_FF868686_to_TransparentAlmostGray_00868686 = _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0x86, 0x86, 0x86));
        result->StartAnimation("Color", ColorAnimation_AlmostGray_FF868686_to_TransparentAlmostGray_00868686());
        auto controller = result->TryGetAnimationController("Color");
        controller->Pause();
        controller->StartAnimation("Progress", _scalarExpressionAnimation);
        return result;
    }

    CompositionColorBrush^ AnimatedColorBrush_White_to_TransparentWhite()
    {
        auto result = _animatedColorBrush_White_to_TransparentWhite = _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0xFF, 0xFF, 0xFF));
        result->StartAnimation("Color", ColorAnimation_White_to_TransparentWhite());
        auto controller = result->TryGetAnimationController("Color");
        controller->Pause();
        controller->StartAnimation("Progress", _scalarExpressionAnimation);
        return result;
    }

    ColorKeyFrameAnimation^ ColorAnimation_AlmostDarkGray_FF9F9F9F_to_TransparentAlmostDarkGray_009F9F9F()
    {
        auto result = _c->CreateColorKeyFrameAnimation();
        result->Duration = { c_durationTicks };
        // AlmostDarkGray_FF9F9F9F
        result->InsertKeyFrame(0, ColorHelper::FromArgb(0xFF, 0x9F, 0x9F, 0x9F), _linearEasingFunction);
        // AlmostDarkGray_FF9F9F9F
        result->InsertKeyFrame(0.699999988F, ColorHelper::FromArgb(0xFF, 0x9F, 0x9F, 0x9F), _linearEasingFunction);
        // TransparentAlmostDarkGray_009F9F9F
        result->InsertKeyFrame(0.980000019F, ColorHelper::FromArgb(0x00, 0x9F, 0x9F, 0x9F), CubicBezierEasingFunction_001());
        return result;
    }

    ColorKeyFrameAnimation^ ColorAnimation_AlmostGray_FF868686_to_TransparentAlmostGray_00868686()
    {
        auto result = _c->CreateColorKeyFrameAnimation();
        result->Duration = { c_durationTicks };
        // AlmostGray_FF868686
        result->InsertKeyFrame(0, ColorHelper::FromArgb(0xFF, 0x86, 0x86, 0x86), _linearEasingFunction);
        // AlmostGray_FF868686
        result->InsertKeyFrame(0.699999988F, ColorHelper::FromArgb(0xFF, 0x86, 0x86, 0x86), _linearEasingFunction);
        // TransparentAlmostGray_00868686
        result->InsertKeyFrame(0.980000019F, ColorHelper::FromArgb(0x00, 0x86, 0x86, 0x86), _cubicBezierEasingFunction_001);
        return result;
    }

    ColorKeyFrameAnimation^ ColorAnimation_White_to_TransparentWhite()
    {
        auto result = _c->CreateColorKeyFrameAnimation();
        result->Duration = { c_durationTicks };
        // White
        result->InsertKeyFrame(0, ColorHelper::FromArgb(0xFF, 0xFF, 0xFF, 0xFF), _linearEasingFunction);
        // White
        result->InsertKeyFrame(0.699999988F, ColorHelper::FromArgb(0xFF, 0xFF, 0xFF, 0xFF), _linearEasingFunction);
        // TransparentWhite
        result->InsertKeyFrame(0.980000019F, ColorHelper::FromArgb(0x00, 0xFF, 0xFF, 0xFF), _cubicBezierEasingFunction_001);
        return result;
    }

    // 'ruoi'.Contents
    //   'im_emptyBox Outlines'.Contents
    //     Group: box
    //       Group: Group 9
    //         Path 1
    CompositionColorBrush^ ColorBrush_AlmostLavender_FFE6E9EC()
    {
        return _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0xE6, 0xE9, 0xEC));
    }

    CompositionColorBrush^ ColorBrush_AlmostLightGray_FFCCD1D9()
    {
        return _colorBrush_AlmostLightGray_FFCCD1D9 = _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0xCC, 0xD1, 0xD9));
    }

    // 'ruoi'.Contents
    //   'im_emptyBox Outlines'.Contents
    //     Group: box
    //       Group: Group 8
    //         Path 1
    CompositionColorBrush^ ColorBrush_AlmostWhiteSmoke_FFF4F4F4()
    {
        return _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0xF4, 0xF4, 0xF4));
    }

    // 'ruoi'.Contents
    // 'im_emptyBox Outlines'.Contents
    CompositionContainerShape^ ContainerShape_000()
    {
        auto result = _c->CreateContainerShape();
        result->CenterPoint = { 60, 60 };
        auto shapes = result->Shapes;
        shapes->Append(ContainerShape_001());
        return result;
    }

    // 'ruoi'.Contents
    //   'im_emptyBox Outlines'.Contents
    // Group: box
    CompositionContainerShape^ ContainerShape_001()
    {
        auto result = _c->CreateContainerShape();
        result->CenterPoint = { 60, 60.1860008F };
        auto shapes = result->Shapes;
        shapes->Append(ContainerShape_002());
        shapes->Append(ContainerShape_003());
        shapes->Append(ContainerShape_004());
        shapes->Append(ContainerShape_005());
        return result;
    }

    // 'ruoi'.Contents
    //   'im_emptyBox Outlines'.Contents
    //     Group: box
    // Group: Group 10
    CompositionContainerShape^ ContainerShape_002()
    {
        auto result = _c->CreateContainerShape();
        result->Offset = { 60, 83.3300018F };
        auto shapes = result->Shapes;
        shapes->Append(SpriteShape_000());
        return result;
    }

    // 'ruoi'.Contents
    //   'im_emptyBox Outlines'.Contents
    //     Group: box
    // Group: Group 9
    CompositionContainerShape^ ContainerShape_003()
    {
        auto result = _c->CreateContainerShape();
        result->Offset = { 76.0719986F, 83.3300018F };
        auto shapes = result->Shapes;
        shapes->Append(SpriteShape_001());
        return result;
    }

    // 'ruoi'.Contents
    //   'im_emptyBox Outlines'.Contents
    //     Group: box
    // Group: Group 8
    CompositionContainerShape^ ContainerShape_004()
    {
        auto result = _c->CreateContainerShape();
        result->Offset = { 60, 55.7480011F };
        auto shapes = result->Shapes;
        shapes->Append(SpriteShape_002());
        return result;
    }

    // 'ruoi'.Contents
    //   'im_emptyBox Outlines'.Contents
    //     Group: box
    // Group: Group 7
    CompositionContainerShape^ ContainerShape_005()
    {
        auto result = _c->CreateContainerShape();
        result->Offset = { 60, 55.75F };
        auto shapes = result->Shapes;
        shapes->Append(SpriteShape_003());
        return result;
    }

    // 'ruoi'.Contents
    // 'Shape Layer 2'.Contents
    CompositionContainerShape^ ContainerShape_006()
    {
        auto result = _c->CreateContainerShape();
        result->Offset = { -0.75F, -0.75F };
        auto shapes = result->Shapes;
        shapes->Append(ContainerShape_007());
        return result;
    }

    // 'ruoi'.Contents
    //   'Shape Layer 2'.Contents
    // Group: Group 6
    CompositionContainerShape^ ContainerShape_007()
    {
        auto result = _c->CreateContainerShape();
        result->Offset = { 67.8700027F, 37.6310005F };
        auto shapes = result->Shapes;
        shapes->Append(SpriteShape_004());
        return result;
    }

    // 'ruoi'.Contents
    CompositionContainerShape^ ContainerShape_008()
    {
        auto result = _c->CreateContainerShape();
        auto propertySet = result->Properties;
        propertySet->InsertVector2("Anchor", { 60.5309982F, 10.9449997F });
        propertySet->InsertVector2("Position", { 57.3610001F, 61.0159988F });
        result->CenterPoint = { 60.5309982F, 10.9449997F };
        auto shapes = result->Shapes;
        shapes->Append(ContainerShape_009());
        _reusableExpressionAnimation->ClearAllParameters();
        _reusableExpressionAnimation->Expression = "my.Position - my.Anchor";
        _reusableExpressionAnimation->SetReferenceParameter("my", result);
        result->StartAnimation("Offset", _reusableExpressionAnimation);
        result->StartAnimation("Position", Vector2Animation());
        auto controller = result->TryGetAnimationController("Position");
        controller->Pause();
        controller->StartAnimation("Progress", _scalarExpressionAnimation);
        return result;
    }

    // 'ruoi'.Contents
    // Group: ruoi
    CompositionContainerShape^ ContainerShape_009()
    {
        auto result = _c->CreateContainerShape();
        result->CenterPoint = { 60.5309982F, 10.941F };
        auto shapes = result->Shapes;
        shapes->Append(ContainerShape_010());
        shapes->Append(ContainerShape_011());
        shapes->Append(ContainerShape_012());
        return result;
    }

    // 'ruoi'.Contents
    //   Group: ruoi
    // Group: Group 3
    CompositionContainerShape^ ContainerShape_010()
    {
        auto result = _c->CreateContainerShape();
        result->Offset = { 57.9570007F, 10.552F };
        auto shapes = result->Shapes;
        shapes->Append(SpriteShape_005());
        return result;
    }

    // 'ruoi'.Contents
    //   Group: ruoi
    // Group: Group 2
    CompositionContainerShape^ ContainerShape_011()
    {
        auto result = _c->CreateContainerShape();
        result->Offset = { 64.1449966F, 9.60599995F };
        auto shapes = result->Shapes;
        shapes->Append(SpriteShape_006());
        return result;
    }

    // 'ruoi'.Contents
    //   Group: ruoi
    // Group: Group 1
    CompositionContainerShape^ ContainerShape_012()
    {
        auto result = _c->CreateContainerShape();
        result->Offset = { 62.4000015F, 13.1440001F };
        auto shapes = result->Shapes;
        shapes->Append(SpriteShape_007());
        return result;
    }

    CubicBezierEasingFunction^ CubicBezierEasingFunction_000()
    {
        return _c->CreateCubicBezierEasingFunction({ 0.166999996F, 0.0329999998F }, { 0.833000004F, 0.953000009F });
    }

    CubicBezierEasingFunction^ CubicBezierEasingFunction_001()
    {
        return _cubicBezierEasingFunction_001 = _c->CreateCubicBezierEasingFunction({ 0.166999996F, 0.0329999998F }, { 0.833000004F, 0.967000008F });
    }

    CubicBezierEasingFunction^ CubicBezierEasingFunction_002()
    {
        return _c->CreateCubicBezierEasingFunction({ 0, 0 }, { 0.833000004F, 0.833000004F });
    }

    CubicBezierEasingFunction^ CubicBezierEasingFunction_003()
    {
        return _cubicBezierEasingFunction_003 = _c->CreateCubicBezierEasingFunction({ 0.166999996F, 0.166999996F }, { 0.833000004F, 0.833000004F });
    }

    CanvasGeometry Geometry_000()
    {
        CanvasGeometry result;
        ComPtr<ID2D1PathGeometry> path;
        FFHR(_d2dFactory->CreatePathGeometry(&path));
        ComPtr<ID2D1GeometrySink> sink;
        FFHR(path->Open(&sink));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({ -32.1430016F, -24.1709995F }, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddBezier({ { -32.1430016F, -24.1709995F }, { -32.1430016F, 11.3109999F }, { -32.1430016F, 11.3109999F } });
        sink->AddBezier({ { -32.1430016F, 11.3109999F }, { -0.00100000005F, 24.1709995F }, { -0.00100000005F, 24.1709995F } });
        sink->AddBezier({ { -0.00100000005F, 24.1709995F }, { 32.144001F, 11.3109999F }, { 32.144001F, 11.3109999F } });
        sink->AddBezier({ { 32.144001F, 11.3109999F }, { 32.144001F, -24.1709995F }, { 32.144001F, -24.1709995F } });
        sink->AddBezier({ { 32.144001F, -24.1709995F }, { -32.1430016F, -24.1709995F }, { -32.1430016F, -24.1709995F } });
        sink->EndFigure(D2D1_FIGURE_END_CLOSED);
        FFHR(sink->Close());
        result = new GeoSource(path.Get());
        return result;
    }

    CanvasGeometry Geometry_001()
    {
        CanvasGeometry result;
        ComPtr<ID2D1PathGeometry> path;
        FFHR(_d2dFactory->CreatePathGeometry(&path));
        ComPtr<ID2D1GeometrySink> sink;
        FFHR(path->Open(&sink));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({ -16.0720005F, 24.1709995F }, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddBezier({ { -16.0720005F, 24.1709995F }, { 16.0720005F, 11.3120003F }, { 16.0720005F, 11.3120003F } });
        sink->AddBezier({ { 16.0720005F, 11.3120003F }, { 16.0720005F, -24.1709995F }, { 16.0720005F, -24.1709995F } });
        sink->AddBezier({ { 16.0720005F, -24.1709995F }, { -16.0720005F, -24.1709995F }, { -16.0720005F, -24.1709995F } });
        sink->AddBezier({ { -16.0720005F, -24.1709995F }, { -16.0720005F, 24.1709995F }, { -16.0720005F, 24.1709995F } });
        sink->EndFigure(D2D1_FIGURE_END_CLOSED);
        FFHR(sink->Close());
        result = new GeoSource(path.Get());
        return result;
    }

    CanvasGeometry Geometry_002()
    {
        CanvasGeometry result;
        ComPtr<ID2D1PathGeometry> path;
        FFHR(_d2dFactory->CreatePathGeometry(&path));
        ComPtr<ID2D1GeometrySink> sink;
        FFHR(path->Open(&sink));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({ 12.8559999F, -23.2490005F }, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddBezier({ { 12.8559999F, -23.2490005F }, { 0, -16.6049995F }, { 0, -16.6049995F } });
        sink->AddBezier({ { 0, -16.6049995F }, { -12.8570004F, -23.2490005F }, { -12.8570004F, -23.2490005F } });
        sink->AddBezier({ { -12.8570004F, -23.2490005F }, { -45, -6.64099979F }, { -45, -6.64099979F } });
        sink->AddBezier({ { -45, -6.64099979F }, { -32.144001F, 0.00100000005F }, { -32.144001F, 0.00100000005F } });
        sink->AddBezier({ { -32.144001F, 0.00100000005F }, { -45, 6.64499998F }, { -45, 6.64499998F } });
        sink->AddBezier({ { -45, 6.64499998F }, { -12.8570004F, 23.2490005F }, { -12.8570004F, 23.2490005F } });
        sink->AddBezier({ { -12.8570004F, 23.2490005F }, { 0, 16.6089993F }, { 0, 16.6089993F } });
        sink->AddBezier({ { 0, 16.6089993F }, { 12.8559999F, 23.2490005F }, { 12.8559999F, 23.2490005F } });
        sink->AddBezier({ { 12.8559999F, 23.2490005F }, { 45, 6.64499998F }, { 45, 6.64499998F } });
        sink->AddBezier({ { 45, 6.64499998F }, { 32.1430016F, 0.00100000005F }, { 32.1430016F, 0.00100000005F } });
        sink->AddBezier({ { 32.1430016F, 0.00100000005F }, { 45, -6.64099979F }, { 45, -6.64099979F } });
        sink->AddBezier({ { 45, -6.64099979F }, { 12.8559999F, -23.2490005F }, { 12.8559999F, -23.2490005F } });
        sink->EndFigure(D2D1_FIGURE_END_CLOSED);
        FFHR(sink->Close());
        result = new GeoSource(path.Get());
        return result;
    }

    CanvasGeometry Geometry_003()
    {
        CanvasGeometry result;
        ComPtr<ID2D1PathGeometry> path;
        FFHR(_d2dFactory->CreatePathGeometry(&path));
        ComPtr<ID2D1GeometrySink> sink;
        FFHR(path->Open(&sink));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({ -0.00100000005F, -16.6070004F }, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddBezier({ { -0.00100000005F, -16.6070004F }, { -32.1430016F, -0.00200000009F }, { -32.1430016F, -0.00200000009F } });
        sink->AddBezier({ { -32.1430016F, -0.00200000009F }, { -0.00100000005F, 16.6070004F }, { -0.00100000005F, 16.6070004F } });
        sink->AddBezier({ { -0.00100000005F, 16.6070004F }, { 32.144001F, -0.00200000009F }, { 32.144001F, -0.00200000009F } });
        sink->AddBezier({ { 32.144001F, -0.00200000009F }, { -0.00100000005F, -16.6070004F }, { -0.00100000005F, -16.6070004F } });
        sink->EndFigure(D2D1_FIGURE_END_CLOSED);
        FFHR(sink->Close());
        result = new GeoSource(path.Get());
        return result;
    }

    CanvasGeometry Geometry_004()
    {
        CanvasGeometry result;
        ComPtr<ID2D1PathGeometry> path;
        FFHR(_d2dFactory->CreatePathGeometry(&path));
        ComPtr<ID2D1GeometrySink> sink;
        FFHR(path->Open(&sink));
        sink->SetFillMode(D2D1_FILL_MODE_ALTERNATE);
        sink->BeginFigure({ -7.3829999F, 24.7600002F }, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddBezier({ { -12.0579996F, 20.632F }, { -20.9559994F, 10.8129997F }, { -7.046F, 5.53999996F } });
        sink->AddBezier({ { 5.76999998F, 0.681999981F }, { 9.79500008F, 1.46099997F }, { 14.3400002F, -2.273F } });
        sink->AddBezier({ { 20.9559994F, -7.71099997F }, { 16.8509998F, -23.5529995F }, { -3.17799997F, -24.7600002F } });
        sink->EndFigure(D2D1_FIGURE_END_OPEN);
        FFHR(sink->Close());
        result = new GeoSource(path.Get());
        return result;
    }

    CanvasGeometry Geometry_005()
    {
        CanvasGeometry result;
        ComPtr<ID2D1PathGeometry> path;
        FFHR(_d2dFactory->CreatePathGeometry(&path));
        ComPtr<ID2D1GeometrySink> sink;
        FFHR(path->Open(&sink));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({ 0, -3.61400008F }, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddBezier({ { 1.99600005F, -3.61400008F }, { 3.61400008F, -1.99600005F }, { 3.61400008F, 0 } });
        sink->AddBezier({ { 3.61400008F, 1.99600005F }, { 1.99600005F, 3.61400008F }, { 0, 3.61400008F } });
        sink->AddBezier({ { -1.99600005F, 3.61400008F }, { -3.61400008F, 1.99600005F }, { -3.61400008F, 0 } });
        sink->AddBezier({ { -3.61400008F, -1.99600005F }, { -1.99600005F, -3.61400008F }, { 0, -3.61400008F } });
        sink->EndFigure(D2D1_FIGURE_END_CLOSED);
        FFHR(sink->Close());
        result = new GeoSource(path.Get());
        return result;
    }

    CanvasGeometry Geometry_006()
    {
        CanvasGeometry result;
        ComPtr<ID2D1PathGeometry> path;
        FFHR(_d2dFactory->CreatePathGeometry(&path));
        ComPtr<ID2D1GeometrySink> sink;
        FFHR(path->Open(&sink));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({ 0.00100000005F, -2.57399988F }, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddBezier({ { 1.42200005F, -2.57399988F }, { 2.57399988F, -1.42200005F }, { 2.57399988F, 0 } });
        sink->AddBezier({ { 2.57399988F, 1.42200005F }, { 1.42200005F, 2.57399988F }, { 0.00100000005F, 2.57399988F } });
        sink->AddBezier({ { -1.421F, 2.57399988F }, { -2.57399988F, 1.42200005F }, { -2.57399988F, 0 } });
        sink->AddBezier({ { -2.57399988F, -1.42200005F }, { -1.421F, -2.57399988F }, { 0.00100000005F, -2.57399988F } });
        sink->EndFigure(D2D1_FIGURE_END_CLOSED);
        FFHR(sink->Close());
        result = new GeoSource(path.Get());
        return result;
    }

    CanvasGeometry Geometry_007()
    {
        CanvasGeometry result;
        ComPtr<ID2D1PathGeometry> path;
        FFHR(_d2dFactory->CreatePathGeometry(&path));
        ComPtr<ID2D1GeometrySink> sink;
        FFHR(path->Open(&sink));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({ -0.00100000005F, -1.801F }, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddBezier({ { 0.994000018F, -1.801F }, { 1.801F, -0.995000005F }, { 1.801F, -0.00100000005F } });
        sink->AddBezier({ { 1.801F, 0.992999971F }, { 0.994000018F, 1.801F }, { -0.00100000005F, 1.801F } });
        sink->AddBezier({ { -0.995000005F, 1.801F }, { -1.801F, 0.992999971F }, { -1.801F, -0.00100000005F } });
        sink->AddBezier({ { -1.801F, -0.995000005F }, { -0.995000005F, -1.801F }, { -0.00100000005F, -1.801F } });
        sink->EndFigure(D2D1_FIGURE_END_CLOSED);
        FFHR(sink->Close());
        result = new GeoSource(path.Get());
        return result;
    }

    LinearEasingFunction^ LinearEasingFunction()
    {
        return _linearEasingFunction = _c->CreateLinearEasingFunction();
    }

    // 'ruoi'.Contents
    //   'im_emptyBox Outlines'.Contents
    //     Group: box
    //       Group: Group 10
    //         Path 1
    // Path 1.PathGeometry
    CompositionPathGeometry^ PathGeometry_000()
    {
        auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_000())));
        return result;
    }

    // 'ruoi'.Contents
    //   'im_emptyBox Outlines'.Contents
    //     Group: box
    //       Group: Group 9
    //         Path 1
    // Path 1.PathGeometry
    CompositionPathGeometry^ PathGeometry_001()
    {
        auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_001())));
        return result;
    }

    // 'ruoi'.Contents
    //   'im_emptyBox Outlines'.Contents
    //     Group: box
    //       Group: Group 8
    //         Path 1
    // Path 1.PathGeometry
    CompositionPathGeometry^ PathGeometry_002()
    {
        auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_002())));
        return result;
    }

    // 'ruoi'.Contents
    //   'im_emptyBox Outlines'.Contents
    //     Group: box
    //       Group: Group 7
    //         Path 1
    // Path 1.PathGeometry
    CompositionPathGeometry^ PathGeometry_003()
    {
        auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_003())));
        return result;
    }

    // 'ruoi'.Contents
    //   'Shape Layer 2'.Contents
    //     Group: Group 6
    //       Path 1
    // Path 1.PathGeometry
    CompositionPathGeometry^ PathGeometry_004()
    {
        auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_004())));
        result->TrimEnd = 0;
        result->StartAnimation("TrimEnd", ScalarAnimation_0_to_1());
        auto controller = result->TryGetAnimationController("TrimEnd");
        controller->Pause();
        controller->StartAnimation("Progress", ScalarExpressionAnimation());
        return result;
    }

    // 'ruoi'.Contents
    //   Group: ruoi
    //     Group: Group 3
    //       Path 1
    // Path 1.PathGeometry
    CompositionPathGeometry^ PathGeometry_005()
    {
        auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_005())));
        return result;
    }

    // 'ruoi'.Contents
    //   Group: ruoi
    //     Group: Group 2
    //       Path 1
    // Path 1.PathGeometry
    CompositionPathGeometry^ PathGeometry_006()
    {
        auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_006())));
        return result;
    }

    // 'ruoi'.Contents
    //   Group: ruoi
    //     Group: Group 1
    //       Path 1
    // Path 1.PathGeometry
    CompositionPathGeometry^ PathGeometry_007()
    {
        auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_007())));
        return result;
    }

    // The root of the composition.
    ContainerVisual^ Root()
    {
        auto result = _root = _c->CreateContainerVisual();
        auto propertySet = result->Properties;
        propertySet->InsertScalar("Progress", 0);
        propertySet->InsertScalar("t0", 0);
        propertySet->InsertScalar("t1", 0);
        auto children = result->Children;
        children->InsertAtTop(ShapeVisual());
        result->StartAnimation("t0", ScalarAnimation_1_to_1());
        auto controller = result->TryGetAnimationController("t0");
        controller->Pause();
        controller->StartAnimation("Progress", _scalarExpressionAnimation);
        result->StartAnimation("t1", _scalarAnimation_1_to_1);
        controller = result->TryGetAnimationController("t1");
        controller->Pause();
        controller->StartAnimation("Progress", _scalarExpressionAnimation);
        return result;
    }

    // 'ruoi'.Contents
    //   'Shape Layer 2'.Contents
    //     Group: Group 6
    //       Path 1
    //         Path 1.PathGeometry
    ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1()
    {
        auto result = _c->CreateScalarKeyFrameAnimation();
        result->Duration = { c_durationTicks };
        result->InsertKeyFrame(0, 0, LinearEasingFunction());
        result->InsertKeyFrame(0.699999988F, 1, CubicBezierEasingFunction_000());
        return result;
    }

    ScalarKeyFrameAnimation^ ScalarAnimation_1_to_1()
    {
        auto result = _scalarAnimation_1_to_1 = _c->CreateScalarKeyFrameAnimation();
        result->Duration = { c_durationTicks };
        result->InsertKeyFrame(0.204379901F, 1, CubicBezierEasingFunction_002());
        result->InsertKeyFrame(0.204380006F, 0, _stepEasingFunction);
        result->InsertKeyFrame(0.388899893F, 1, CubicBezierEasingFunction_003());
        result->InsertKeyFrame(0.388899982F, 0, _stepEasingFunction);
        result->InsertKeyFrame(0.699999928F, 1, _cubicBezierEasingFunction_003);
        return result;
    }

    ExpressionAnimation^ ScalarExpressionAnimation()
    {
        auto result = _scalarExpressionAnimation = _c->CreateExpressionAnimation();
        result->SetReferenceParameter("_", _root);
        result->Expression = "_.Progress";
        return result;
    }

    ShapeVisual^ ShapeVisual()
    {
        auto result = _c->CreateShapeVisual();
        result->Size = { 120, 120 };
        auto shapes = result->Shapes;
        // 'im_emptyBox Outlines'.Contents
        shapes->Append(ContainerShape_000());
        // 'Shape Layer 2'.Contents
        shapes->Append(ContainerShape_006());
        // 'ruoi'.Contents
        shapes->Append(ContainerShape_008());
        return result;
    }

    // 'ruoi'.Contents
    //   'im_emptyBox Outlines'.Contents
    //     Group: box
    //       Group: Group 10
    // Path 1
    CompositionSpriteShape^ SpriteShape_000()
    {
        auto result = _c->CreateSpriteShape();
        result->FillBrush = ColorBrush_AlmostLightGray_FFCCD1D9();
        result->Geometry = PathGeometry_000();
        return result;
    }

    // 'ruoi'.Contents
    //   'im_emptyBox Outlines'.Contents
    //     Group: box
    //       Group: Group 9
    // Path 1
    CompositionSpriteShape^ SpriteShape_001()
    {
        auto result = _c->CreateSpriteShape();
        result->FillBrush = ColorBrush_AlmostLavender_FFE6E9EC();
        result->Geometry = PathGeometry_001();
        return result;
    }

    // 'ruoi'.Contents
    //   'im_emptyBox Outlines'.Contents
    //     Group: box
    //       Group: Group 8
    // Path 1
    CompositionSpriteShape^ SpriteShape_002()
    {
        auto result = _c->CreateSpriteShape();
        result->FillBrush = ColorBrush_AlmostWhiteSmoke_FFF4F4F4();
        result->Geometry = PathGeometry_002();
        return result;
    }

    // 'ruoi'.Contents
    //   'im_emptyBox Outlines'.Contents
    //     Group: box
    //       Group: Group 7
    // Path 1
    CompositionSpriteShape^ SpriteShape_003()
    {
        auto result = _c->CreateSpriteShape();
        result->FillBrush = _colorBrush_AlmostLightGray_FFCCD1D9;
        result->Geometry = PathGeometry_003();
        return result;
    }

    // 'ruoi'.Contents
    //   'Shape Layer 2'.Contents
    //     Group: Group 6
    // Path 1
    CompositionSpriteShape^ SpriteShape_004()
    {
        auto result = _c->CreateSpriteShape();
        result->Geometry = PathGeometry_004();
        result->StrokeBrush = AnimatedColorBrush_AlmostDarkGray_FF9F9F9F_to_TransparentAlmostDarkGray_009F9F9F();
        result->StrokeDashCap = CompositionStrokeCap::Round;
        auto strokeDashArray = result->StrokeDashArray;
        strokeDashArray->Append(2.02800012F);
        strokeDashArray->Append(2.02800012F);
        result->StrokeEndCap = CompositionStrokeCap::Round;
        result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
        result->StrokeStartCap = CompositionStrokeCap::Round;
        result->StrokeMiterLimit = 4;
        return result;
    }

    // 'ruoi'.Contents
    //   Group: ruoi
    //     Group: Group 3
    // Path 1
    CompositionSpriteShape^ SpriteShape_005()
    {
        auto result = _c->CreateSpriteShape();
        result->FillBrush = AnimatedColorBrush_White_to_TransparentWhite();
        result->Geometry = PathGeometry_005();
        result->StrokeBrush = AnimatedColorBrush_AlmostGray_FF868686_to_TransparentAlmostGray_00868686();
        result->StrokeMiterLimit = 10;
        result->StrokeThickness = 0.699999988F;
        return result;
    }

    // 'ruoi'.Contents
    //   Group: ruoi
    //     Group: Group 2
    // Path 1
    CompositionSpriteShape^ SpriteShape_006()
    {
        auto result = _c->CreateSpriteShape();
        result->FillBrush = _animatedColorBrush_White_to_TransparentWhite;
        result->Geometry = PathGeometry_006();
        result->StrokeBrush = _animatedColorBrush_AlmostGray_FF868686_to_TransparentAlmostGray_00868686;
        result->StrokeMiterLimit = 10;
        result->StrokeThickness = 0.699999988F;
        return result;
    }

    // 'ruoi'.Contents
    //   Group: ruoi
    //     Group: Group 1
    // Path 1
    CompositionSpriteShape^ SpriteShape_007()
    {
        auto result = _c->CreateSpriteShape();
        result->FillBrush = _animatedColorBrush_AlmostGray_FF868686_to_TransparentAlmostGray_00868686;
        result->Geometry = PathGeometry_007();
        return result;
    }

    StepEasingFunction^ StepEasingFunction()
    {
        auto result = _stepEasingFunction = _c->CreateStepEasingFunction();
        result->IsInitialStepSingleFrame  = true;
        return result;
    }

    // 'ruoi'.Contents
    Vector2KeyFrameAnimation^ Vector2Animation()
    {
        auto result = _c->CreateVector2KeyFrameAnimation();
        result->SetReferenceParameter("_", _root);
        result->Duration = { c_durationTicks };
        result->InsertKeyFrame(0, { 57.3610001F, 61.0159988F }, _linearEasingFunction);
        result->InsertExpressionKeyFrame(0.204379901F, "(Pow(1 - _.t1, 3) * Vector2(57.3610001,61.0159988)) + (3 * Square(1 - _.t1) * _.t1 * Vector2(52.685997,56.8879929)) + (3 * (1 - _.t1) * Square(_.t1) * Vector2(43.7890053,47.0690041)) + (Pow(_.t1, 3) * Vector2(57.6990013,41.7960014))", StepEasingFunction());
        result->InsertExpressionKeyFrame(0.388899893F, "(Pow(1 - _.t1, 3) * Vector2(57.6990013,41.7960014)) + (3 * Square(1 - _.t1) * _.t1 * Vector2(70.5149994,36.9379997)) + (3 * (1 - _.t1) * Square(_.t1) * Vector2(74.5390167,37.7159996)) + (Pow(_.t1, 3) * Vector2(79.0839996,33.9819984))", _stepEasingFunction);
        result->InsertExpressionKeyFrame(0.699999928F, "(Pow(1 - _.t1, 3) * Vector2(79.0839996,33.9819984)) + (3 * Square(1 - _.t1) * _.t1 * Vector2(85.7000122,28.5440025)) + (3 * (1 - _.t1) * Square(_.t1) * Vector2(79.7200089,10.328001)) + (Pow(_.t1, 3) * Vector2(59.6910019,9.12100029))", _stepEasingFunction);
        result->InsertKeyFrame(0.700000048F, { 59.6910019F, 9.12100029F }, _stepEasingFunction);
        return result;
    }

    static IGeometrySource2D^ CanvasGeometryToIGeometrySource2D(CanvasGeometry geo)
    {
        ComPtr<ABI::Windows::Graphics::IGeometrySource2D> interop = geo.Detach();
        return reinterpret_cast<IGeometrySource2D^>(interop.Get());
    }

    static void FFHR(HRESULT hr)
    {
        if (hr != S_OK)
        {
            RoFailFastWithErrorContext(hr);
        }
    }

    Instantiator(Compositor^ compositor)
        : _c(compositor)
        , _reusableExpressionAnimation(compositor->CreateExpressionAnimation())
    {
        FFHR(D2D1CreateFactory(D2D1_FACTORY_TYPE_SINGLE_THREADED, _d2dFactory.GetAddressOf()));
    }

public:
    static Visual^ InstantiateComposition(Compositor^ compositor)
    {
        return Instantiator(compositor).Root();
    }

};
} // end namespace

bool Compositions::MyComposition::TryCreateInstance(
    Compositor^ compositor,
    Visual^* rootVisual,
    float2* size,
    CompositionPropertySet^* progressPropertySet,
    TimeSpan* duration,
    Object^* diagnostics)
{
    *rootVisual = Instantiator::InstantiateComposition(compositor);
    *size = { 120, 120 };
    *progressPropertySet = (*rootVisual)->Properties;
    duration->Duration = { 20000000L };
    diagnostics = nullptr;
    return true;
}
