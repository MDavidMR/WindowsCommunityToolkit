//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#include "pch.h"
#include "MyComposition.h"
#include "d2d1.h"
#include <d2d1_1.h>
#include <d2d1helper.h>
#include "WindowsNumerics.h"
#include <Windows.Graphics.Interop.h>
#include <wrl.h>

using namespace Windows::Foundation;
using namespace Windows::Foundation::Numerics;
using namespace Windows::UI;
using namespace Windows::UI::Composition;
using namespace Windows::Graphics;
using namespace Microsoft::WRL;

namespace Compositions
{
    ref class MyComposition sealed : public ICompositionSource
    {
    public:
        virtual bool TryCreateInstance(
            Compositor^ compositor,
            Visual^* rootVisual,
            float2* size,
            CompositionPropertySet^* progressPropertySet,
            TimeSpan* duration,
            Object^* diagnostics)
        {
            *rootVisual = Instantiator::InstantiateComposition(compositor);
            *size = { 426, 213 };
            *progressPropertySet = (*rootVisual)->Properties;
            duration->Duration = { 102330000L };
            diagnostics = nullptr;
            return true;
        }

    private:
        class GeoSource :
            public ABI::Windows::Graphics::IGeometrySource2D,
            public ABI::Windows::Graphics::IGeometrySource2DInterop
        {
        public:
            GeoSource(
                ID2D1Geometry* pGeometry)
                : m_cRef(0)
                , m_cpGeometry(pGeometry)
            {
            }

        protected:
            ~GeoSource() = default;

        public:
            // IUnknown
            IFACEMETHODIMP QueryInterface(
                REFIID iid,
                void ** ppvObject) override
            {
                if (iid == __uuidof(ABI::Windows::Graphics::IGeometrySource2DInterop))
                {
                    AddRef();
                    *ppvObject = (ABI::Windows::Graphics::IGeometrySource2DInterop*) this;
                    return S_OK;
                }

                return E_NOINTERFACE;
            }

            IFACEMETHODIMP_(ULONG) AddRef() override
            {
                return InterlockedIncrement(&m_cRef);
            }

            IFACEMETHODIMP_(ULONG) Release() override
            {
                ULONG cRef = InterlockedDecrement(&m_cRef);
                if (0 == cRef)
                {
                    delete this;
                }
                return cRef;
            }

            // IInspectable
            IFACEMETHODIMP GetIids(ULONG*, IID**) override
            {
                return E_NOTIMPL;
            }

            IFACEMETHODIMP GetRuntimeClassName(HSTRING*) override
            {
                return E_NOTIMPL;
            }

            IFACEMETHODIMP GetTrustLevel(TrustLevel*) override
            {
                return E_NOTIMPL;
            }

            // Windows::Graphics::IGeometrySource2DInterop
            IFACEMETHODIMP GetGeometry(ID2D1Geometry** value) override
            {
                *value = m_cpGeometry.Get();
                (*value)->AddRef();
                return S_OK;
            }

            IFACEMETHODIMP TryGetGeometryUsingFactory(ID2D1Factory*, ID2D1Geometry**) override
            {
                return E_NOTIMPL;
            }

        private:
            ULONG m_cRef;
            Microsoft::WRL::ComPtr<ID2D1Geometry> m_cpGeometry;
        };

        typedef ComPtr<GeoSource> CanvasGeometry;
        class Instantiator sealed
        {
            ComPtr<ID2D1Factory> _d2dFactory;
            const int64_t c_durationTicks = 102330000L;
            Compositor^ const _c;
            ExpressionAnimation^ const _reusableExpressionAnimation;
            ColorKeyFrameAnimation^ _colorAnimation_AlmostDarkSlateGray_FF2A2A2A_to_TransparentAlmostDarkSlateGray_002A2A2A;
            ColorKeyFrameAnimation^ _colorAnimation_AlmostGold_FFFBE000_to_TransparentAlmostGold_00FBE000_001;
            ColorKeyFrameAnimation^ _colorAnimation_TransparentAlmostChocolate_00C95010_to_AlmostChocolate_FFC95010;
            ColorKeyFrameAnimation^ _colorAnimation_TransparentAlmostDarkKhaki_00BA9167_to_AlmostDarkKhaki_FFBA9167;
            ColorKeyFrameAnimation^ _colorAnimation_TransparentAlmostDarkOliveGreen_00603C2F_to_AlmostDarkOliveGreen_FF603C2F;
            ColorKeyFrameAnimation^ _colorAnimation_TransparentAlmostOrange_00FFB800_to_AlmostOrange_FFFFB800;
            ColorKeyFrameAnimation^ _colorAnimation_TransparentAlmostOrangeRed_00F7620B_to_AlmostOrangeRed_FFF7620B;
            ColorKeyFrameAnimation^ _colorAnimation_TransparentAlmostSienna_008E552D_to_AlmostSienna_FF8E552D;
            ColorKeyFrameAnimation^ _colorAnimation_TransparentWhite_to_TransparentWhite_000;
            ColorKeyFrameAnimation^ _colorAnimation_TransparentWhite_to_TransparentWhite_001;
            CompositionColorBrush^ _colorBrush_AlmostBlack_FF1F1F1F;
            CompositionColorBrush^ _colorBrush_AlmostChocolate_FFC95010;
            CompositionColorBrush^ _colorBrush_AlmostDarkCyan_FF00B193;
            CompositionColorBrush^ _colorBrush_AlmostDarkGray_FF999999;
            CompositionColorBrush^ _colorBrush_AlmostDarkSlateGray_FF2A2A2A;
            CompositionColorBrush^ _colorBrush_AlmostDarkSlateGray_FF333333;
            CompositionColorBrush^ _colorBrush_AlmostDarkSlateGray_FF383838;
            CompositionColorBrush^ _colorBrush_AlmostGainsboro_FFE3E3E3;
            CompositionColorBrush^ _colorBrush_AlmostGold_FFFBE000;
            CompositionColorBrush^ _colorBrush_AlmostMediumTurquoise_FF41DABB;
            CompositionColorBrush^ _colorBrush_AlmostOrange_FFFBB713;
            CompositionColorBrush^ _colorBrush_AlmostOrange_FFFFB800;
            CompositionColorBrush^ _colorBrush_AlmostOrangeRed_FFF7620B;
            CompositionColorBrush^ _colorBrush_AlmostPeru_FFD18A29;
            CompositionColorBrush^ _colorBrush_AlmostSteelBlue_FF5262AD;
            CompositionColorBrush^ _colorBrush_AlmostTeal_FF008271;
            CompositionColorBrush^ _colorBrush_AlmostTomato_FFEC6950;
            CompositionColorBrush^ _colorBrush_AlmostTurquoise_FF30D2F7;
            CompositionColorBrush^ _colorBrush_AlmostWhiteSmoke_FFF1F1F1;
            CompositionColorBrush^ _colorBrush_Black;
            CompositionColorBrush^ _colorBrush_TransparentWhite;
            CompositionColorBrush^ _colorBrush_White;
            CubicBezierEasingFunction^ _cubicBezierEasingFunction_002;
            CubicBezierEasingFunction^ _cubicBezierEasingFunction_003;
            CubicBezierEasingFunction^ _cubicBezierEasingFunction_004;
            CubicBezierEasingFunction^ _cubicBezierEasingFunction_005;
            CubicBezierEasingFunction^ _cubicBezierEasingFunction_006;
            CubicBezierEasingFunction^ _cubicBezierEasingFunction_007;
            CubicBezierEasingFunction^ _cubicBezierEasingFunction_008;
            CubicBezierEasingFunction^ _cubicBezierEasingFunction_009;
            CubicBezierEasingFunction^ _cubicBezierEasingFunction_011;
            CubicBezierEasingFunction^ _cubicBezierEasingFunction_012;
            CubicBezierEasingFunction^ _cubicBezierEasingFunction_013;
            CubicBezierEasingFunction^ _cubicBezierEasingFunction_014;
            CubicBezierEasingFunction^ _cubicBezierEasingFunction_016;
            CubicBezierEasingFunction^ _cubicBezierEasingFunction_018;
            CubicBezierEasingFunction^ _cubicBezierEasingFunction_024;
            CubicBezierEasingFunction^ _cubicBezierEasingFunction_025;
            CompositionEllipseGeometry^ _ellipse_6p5;
            CanvasGeometry _geometry_002;
            CanvasGeometry _geometry_003;
            CanvasGeometry _geometry_004;
            CanvasGeometry _geometry_007;
            CanvasGeometry _geometry_010;
            CanvasGeometry _geometry_011;
            CanvasGeometry _geometry_012;
            CanvasGeometry _geometry_013;
            CanvasGeometry _geometry_014;
            CanvasGeometry _geometry_017;
            CanvasGeometry _geometry_018;
            CanvasGeometry _geometry_019;
            CanvasGeometry _geometry_022;
            CanvasGeometry _geometry_023;
            CanvasGeometry _geometry_024;
            CanvasGeometry _geometry_027;
            CanvasGeometry _geometry_028;
            CanvasGeometry _geometry_029;
            CanvasGeometry _geometry_032;
            CanvasGeometry _geometry_033;
            CanvasGeometry _geometry_034;
            CanvasGeometry _geometry_037;
            CanvasGeometry _geometry_038;
            CanvasGeometry _geometry_039;
            CanvasGeometry _geometry_042;
            CanvasGeometry _geometry_043;
            CanvasGeometry _geometry_044;
            CanvasGeometry _geometry_047;
            CanvasGeometry _geometry_048;
            CanvasGeometry _geometry_049;
            CanvasGeometry _geometry_052;
            CanvasGeometry _geometry_053;
            CanvasGeometry _geometry_054;
            CanvasGeometry _geometry_057;
            CanvasGeometry _geometry_058;
            CanvasGeometry _geometry_059;
            CanvasGeometry _geometry_062;
            CanvasGeometry _geometry_063;
            CanvasGeometry _geometry_064;
            CanvasGeometry _geometry_067;
            CanvasGeometry _geometry_068;
            CanvasGeometry _geometry_069;
            CanvasGeometry _geometry_072;
            CanvasGeometry _geometry_073;
            CanvasGeometry _geometry_074;
            CanvasGeometry _geometry_077;
            CanvasGeometry _geometry_078;
            CanvasGeometry _geometry_079;
            CanvasGeometry _geometry_082;
            CanvasGeometry _geometry_083;
            CanvasGeometry _geometry_084;
            CanvasGeometry _geometry_087;
            CanvasGeometry _geometry_090;
            CanvasGeometry _geometry_091;
            CanvasGeometry _geometry_092;
            CanvasGeometry _geometry_093;
            CanvasGeometry _geometry_094;
            CanvasGeometry _geometry_095;
            CanvasGeometry _geometry_098;
            CanvasGeometry _geometry_099;
            CanvasGeometry _geometry_100;
            CanvasGeometry _geometry_101;
            CanvasGeometry _geometry_102;
            CanvasGeometry _geometry_103;
            CanvasGeometry _geometry_104;
            CanvasGeometry _geometry_105;
            CanvasGeometry _geometry_106;
            CanvasGeometry _geometry_107;
            CanvasGeometry _geometry_110;
            CanvasGeometry _geometry_111;
            CanvasGeometry _geometry_112;
            CanvasGeometry _geometry_115;
            CanvasGeometry _geometry_116;
            CanvasGeometry _geometry_117;
            CanvasGeometry _geometry_120;
            CanvasGeometry _geometry_121;
            CanvasGeometry _geometry_122;
            CanvasGeometry _geometry_125;
            CanvasGeometry _geometry_126;
            CanvasGeometry _geometry_127;
            CanvasGeometry _geometry_128;
            CanvasGeometry _geometry_137;
            CanvasGeometry _geometry_160;
            CanvasGeometry _geometry_161;
            CanvasGeometry _geometry_192;
            CanvasGeometry _geometry_193;
            CanvasGeometry _geometry_194;
            CanvasGeometry _geometry_324;
            InsetClip^ _insetClip;
            LinearEasingFunction^ _linearEasingFunction;
            ContainerVisual^ _root;
            ScalarKeyFrameAnimation^ _scalarAnimation_0_to_1_000;
            ScalarKeyFrameAnimation^ _scalarAnimation_0_to_1_001;
            ScalarKeyFrameAnimation^ _scalarAnimation_0_to_1_002;
            ScalarKeyFrameAnimation^ _scalarAnimation_0_to_1_003;
            ScalarKeyFrameAnimation^ _scalarAnimation_0_to_1_004;
            ScalarKeyFrameAnimation^ _scalarAnimation_0_to_1_005;
            ScalarKeyFrameAnimation^ _scalarAnimation_0_to_1_006;
            ScalarKeyFrameAnimation^ _scalarAnimation_0_to_1_007;
            ScalarKeyFrameAnimation^ _scalarAnimation_0_to_1_008;
            ScalarKeyFrameAnimation^ _scalarAnimation_0_to_1_009;
            ScalarKeyFrameAnimation^ _scalarAnimation_0_to_m7p3;
            ScalarKeyFrameAnimation^ _scalarAnimation_0p125_to_m143p875;
            ScalarKeyFrameAnimation^ _scalarAnimation_0p22_to_0p5_000;
            ScalarKeyFrameAnimation^ _scalarAnimation_0p22_to_0p5_001;
            ScalarKeyFrameAnimation^ _scalarAnimation_1_to_1;
            ScalarKeyFrameAnimation^ _scalarAnimation_120p1_to_360;
            ScalarKeyFrameAnimation^ _scalarAnimation_15_to_m0p063;
            ScalarKeyFrameAnimation^ _scalarAnimation_m239_to_0;
            ScalarKeyFrameAnimation^ _scalarAnimation_m32p632_to_m19p883;
            ScalarKeyFrameAnimation^ _scalarAnimation_m92p618_to_m19p593;
            ExpressionAnimation^ _scalarExpressionAnimation_000;
            ExpressionAnimation^ _scalarExpressionAnimation_001;
            StepEasingFunction^ _stepEasingFunction_000;
            StepEasingFunction^ _stepEasingFunction_001;
            Vector2KeyFrameAnimation^ _vector2Animation_000;
            Vector2KeyFrameAnimation^ _vector2Animation_002;
            Vector2KeyFrameAnimation^ _vector2Animation_006;
            Vector2KeyFrameAnimation^ _vector2Animation_009;
            Vector2KeyFrameAnimation^ _vector2Animation_010;
            Vector2KeyFrameAnimation^ _vector2Animation_012;
            Vector2KeyFrameAnimation^ _vector2Animation_014;
            Vector2KeyFrameAnimation^ _vector2Animation_022;
            Vector2KeyFrameAnimation^ _vector2Animation_032;
            Vector3KeyFrameAnimation^ _vector3KeyFrameAnimation_000;
            Vector3KeyFrameAnimation^ _vector3KeyFrameAnimation_001;
            Vector3KeyFrameAnimation^ _vector3KeyFrameAnimation_002;
            Vector3KeyFrameAnimation^ _vector3KeyFrameAnimation_003;
            Vector3KeyFrameAnimation^ _vector3KeyFrameAnimation_004;

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneScreen'.Transforms
            //     'PhoneScreen'.Contents
            //       'BlackBG'.Contents
            //         'BlackBG'.Contents
            //           Group: Rectangle 1
            //             Rectangle Path 1
            CompositionColorBrush^ AnimatedColorBrush_AlmostDarkSlateGray_FF2A2A2A_to_TransparentAlmostDarkSlateGray_002A2A2A_000()
            {
                auto result = _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0x2A, 0x2A, 0x2A));
                result->StartAnimation("Color", ColorAnimation_AlmostDarkSlateGray_FF2A2A2A_to_TransparentAlmostDarkSlateGray_002A2A2A());
                auto controller = result->TryGetAnimationController("Color");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneShell Outlines 3'.Transforms
            //     'PhoneScreen'.Transforms
            //       'PhoneScreen'.Contents
            //         'BlackBG'.Contents
            //           'BlackBG'.Contents
            //             Group: Rectangle 1
            //               Rectangle Path 1
            CompositionColorBrush^ AnimatedColorBrush_AlmostDarkSlateGray_FF2A2A2A_to_TransparentAlmostDarkSlateGray_002A2A2A_001()
            {
                auto result = _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0x2A, 0x2A, 0x2A));
                result->StartAnimation("Color", _colorAnimation_AlmostDarkSlateGray_FF2A2A2A_to_TransparentAlmostDarkSlateGray_002A2A2A);
                auto controller = result->TryGetAnimationController("Color");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'PhoneScreen'.Transforms
            //     'PhoneScreen'.Contents
            //       'BlackBG'.Contents
            //         'BlackBG'.Contents
            //           Group: Rectangle 1
            //             Rectangle Path 1
            CompositionColorBrush^ AnimatedColorBrush_AlmostDarkSlateGray_FF2A2A2A_to_TransparentAlmostDarkSlateGray_002A2A2A_002()
            {
                auto result = _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0x2A, 0x2A, 0x2A));
                result->StartAnimation("Color", _colorAnimation_AlmostDarkSlateGray_FF2A2A2A_to_TransparentAlmostDarkSlateGray_002A2A2A);
                auto controller = result->TryGetAnimationController("Color");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'FlashCircle'.Transforms
            //     'FlashCircle'.Contents
            //       Group: Ellipse 1
            //         Ellipse Path 1
            CompositionColorBrush^ AnimatedColorBrush_AlmostGold_FFFBE000_to_TransparentAlmostGold_00FBE000_000()
            {
                auto result = _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0xFB, 0xE0, 0x00));
                result->StartAnimation("Color", ColorAnimation_AlmostGold_FFFBE000_to_TransparentAlmostGold_00FBE000_000());
                auto controller = result->TryGetAnimationController("Color");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'FlashLine01'.Transforms
            //     'FlashLine01'.Contents
            //       Group: Rectangle 1
            //         Path 1
            CompositionColorBrush^ AnimatedColorBrush_AlmostGold_FFFBE000_to_TransparentAlmostGold_00FBE000_001()
            {
                auto result = _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0xFB, 0xE0, 0x00));
                result->StartAnimation("Color", ColorAnimation_AlmostGold_FFFBE000_to_TransparentAlmostGold_00FBE000_001());
                auto controller = result->TryGetAnimationController("Color");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'FlashLine02'.Transforms
            //     'FlashLine02'.Contents
            //       Group: Rectangle 1
            //         Path 1
            CompositionColorBrush^ AnimatedColorBrush_AlmostGold_FFFBE000_to_TransparentAlmostGold_00FBE000_002()
            {
                auto result = _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0xFB, 0xE0, 0x00));
                result->StartAnimation("Color", _colorAnimation_AlmostGold_FFFBE000_to_TransparentAlmostGold_00FBE000_001);
                auto controller = result->TryGetAnimationController("Color");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'FlashLine04'.Transforms
            //     'FlashLine04'.Contents
            //       Group: Rectangle 1
            //         Path 1
            CompositionColorBrush^ AnimatedColorBrush_AlmostGold_FFFBE000_to_TransparentAlmostGold_00FBE000_003()
            {
                auto result = _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0xFB, 0xE0, 0x00));
                result->StartAnimation("Color", _colorAnimation_AlmostGold_FFFBE000_to_TransparentAlmostGold_00FBE000_001);
                auto controller = result->TryGetAnimationController("Color");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'FlashLine03'.Transforms
            //     'FlashLine03'.Contents
            //       Group: Rectangle 1
            //         Path 1
            CompositionColorBrush^ AnimatedColorBrush_AlmostGold_FFFBE000_to_TransparentAlmostGold_00FBE000_004()
            {
                auto result = _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0xFB, 0xE0, 0x00));
                result->StartAnimation("Color", _colorAnimation_AlmostGold_FFFBE000_to_TransparentAlmostGold_00FBE000_001);
                auto controller = result->TryGetAnimationController("Color");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'FlashLine05'.Transforms
            //     'FlashLine05'.Contents
            //       Group: Rectangle 1
            //         Path 1
            CompositionColorBrush^ AnimatedColorBrush_AlmostGold_FFFBE000_to_TransparentAlmostGold_00FBE000_005()
            {
                auto result = _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0xFB, 0xE0, 0x00));
                result->StartAnimation("Color", _colorAnimation_AlmostGold_FFFBE000_to_TransparentAlmostGold_00FBE000_001);
                auto controller = result->TryGetAnimationController("Color");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            CompositionColorBrush^ AnimatedColorBrush_TransparentAlmostChocolate_00C95010_to_AlmostChocolate_FFC95010_000()
            {
                auto result = _c->CreateColorBrush(ColorHelper::FromArgb(0x00, 0xC9, 0x50, 0x10));
                result->StartAnimation("Color", ColorAnimation_TransparentAlmostChocolate_00C95010_to_AlmostChocolate_FFC95010());
                auto controller = result->TryGetAnimationController("Color");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            CompositionColorBrush^ AnimatedColorBrush_TransparentAlmostChocolate_00C95010_to_AlmostChocolate_FFC95010_001()
            {
                auto result = _c->CreateColorBrush(ColorHelper::FromArgb(0x00, 0xC9, 0x50, 0x10));
                result->StartAnimation("Color", _colorAnimation_TransparentAlmostChocolate_00C95010_to_AlmostChocolate_FFC95010);
                auto controller = result->TryGetAnimationController("Color");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            CompositionColorBrush^ AnimatedColorBrush_TransparentAlmostChocolate_00C95010_to_AlmostChocolate_FFC95010_002()
            {
                auto result = _c->CreateColorBrush(ColorHelper::FromArgb(0x00, 0xC9, 0x50, 0x10));
                result->StartAnimation("Color", _colorAnimation_TransparentAlmostChocolate_00C95010_to_AlmostChocolate_FFC95010);
                auto controller = result->TryGetAnimationController("Color");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            CompositionColorBrush^ AnimatedColorBrush_TransparentAlmostChocolate_00C95010_to_AlmostChocolate_FFC95010_003()
            {
                auto result = _c->CreateColorBrush(ColorHelper::FromArgb(0x00, 0xC9, 0x50, 0x10));
                result->StartAnimation("Color", _colorAnimation_TransparentAlmostChocolate_00C95010_to_AlmostChocolate_FFC95010);
                auto controller = result->TryGetAnimationController("Color");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            CompositionColorBrush^ AnimatedColorBrush_TransparentAlmostDarkCyan_0000B193_to_AlmostDarkCyan_FF00B193_000()
            {
                auto result = _c->CreateColorBrush(ColorHelper::FromArgb(0x00, 0x00, 0xB1, 0x93));
                result->StartAnimation("Color", ColorAnimation_TransparentAlmostDarkCyan_0000B193_to_AlmostDarkCyan_FF00B193_000());
                auto controller = result->TryGetAnimationController("Color");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicMountains'.Contents
            //     Group: MountainLeft
            //       Path 1
            CompositionColorBrush^ AnimatedColorBrush_TransparentAlmostDarkCyan_0000B193_to_AlmostDarkCyan_FF00B193_001()
            {
                auto result = _c->CreateColorBrush(ColorHelper::FromArgb(0x00, 0x00, 0xB1, 0x93));
                result->StartAnimation("Color", ColorAnimation_TransparentAlmostDarkCyan_0000B193_to_AlmostDarkCyan_FF00B193_001());
                auto controller = result->TryGetAnimationController("Color");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            CompositionColorBrush^ AnimatedColorBrush_TransparentAlmostDarkKhaki_00BA9167_to_AlmostDarkKhaki_FFBA9167_000()
            {
                auto result = _c->CreateColorBrush(ColorHelper::FromArgb(0x00, 0xBA, 0x91, 0x67));
                result->StartAnimation("Color", ColorAnimation_TransparentAlmostDarkKhaki_00BA9167_to_AlmostDarkKhaki_FFBA9167());
                auto controller = result->TryGetAnimationController("Color");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            CompositionColorBrush^ AnimatedColorBrush_TransparentAlmostDarkKhaki_00BA9167_to_AlmostDarkKhaki_FFBA9167_001()
            {
                auto result = _c->CreateColorBrush(ColorHelper::FromArgb(0x00, 0xBA, 0x91, 0x67));
                result->StartAnimation("Color", _colorAnimation_TransparentAlmostDarkKhaki_00BA9167_to_AlmostDarkKhaki_FFBA9167);
                auto controller = result->TryGetAnimationController("Color");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            CompositionColorBrush^ AnimatedColorBrush_TransparentAlmostDarkKhaki_00BA9167_to_AlmostDarkKhaki_FFBA9167_002()
            {
                auto result = _c->CreateColorBrush(ColorHelper::FromArgb(0x00, 0xBA, 0x91, 0x67));
                result->StartAnimation("Color", _colorAnimation_TransparentAlmostDarkKhaki_00BA9167_to_AlmostDarkKhaki_FFBA9167);
                auto controller = result->TryGetAnimationController("Color");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            CompositionColorBrush^ AnimatedColorBrush_TransparentAlmostDarkOliveGreen_00603C2F_to_AlmostDarkOliveGreen_FF603C2F_000()
            {
                auto result = _c->CreateColorBrush(ColorHelper::FromArgb(0x00, 0x60, 0x3C, 0x2F));
                result->StartAnimation("Color", ColorAnimation_TransparentAlmostDarkOliveGreen_00603C2F_to_AlmostDarkOliveGreen_FF603C2F());
                auto controller = result->TryGetAnimationController("Color");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            CompositionColorBrush^ AnimatedColorBrush_TransparentAlmostDarkOliveGreen_00603C2F_to_AlmostDarkOliveGreen_FF603C2F_001()
            {
                auto result = _c->CreateColorBrush(ColorHelper::FromArgb(0x00, 0x60, 0x3C, 0x2F));
                result->StartAnimation("Color", _colorAnimation_TransparentAlmostDarkOliveGreen_00603C2F_to_AlmostDarkOliveGreen_FF603C2F);
                auto controller = result->TryGetAnimationController("Color");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            CompositionColorBrush^ AnimatedColorBrush_TransparentAlmostDarkOliveGreen_00603C2F_to_AlmostDarkOliveGreen_FF603C2F_002()
            {
                auto result = _c->CreateColorBrush(ColorHelper::FromArgb(0x00, 0x60, 0x3C, 0x2F));
                result->StartAnimation("Color", _colorAnimation_TransparentAlmostDarkOliveGreen_00603C2F_to_AlmostDarkOliveGreen_FF603C2F);
                auto controller = result->TryGetAnimationController("Color");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            CompositionColorBrush^ AnimatedColorBrush_TransparentAlmostDarkOliveGreen_00603C2F_to_AlmostDarkOliveGreen_FF603C2F_003()
            {
                auto result = _c->CreateColorBrush(ColorHelper::FromArgb(0x00, 0x60, 0x3C, 0x2F));
                result->StartAnimation("Color", _colorAnimation_TransparentAlmostDarkOliveGreen_00603C2F_to_AlmostDarkOliveGreen_FF603C2F);
                auto controller = result->TryGetAnimationController("Color");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            CompositionColorBrush^ AnimatedColorBrush_TransparentAlmostDarkOliveGreen_00603C2F_to_AlmostDarkOliveGreen_FF603C2F_004()
            {
                auto result = _c->CreateColorBrush(ColorHelper::FromArgb(0x00, 0x60, 0x3C, 0x2F));
                result->StartAnimation("Color", _colorAnimation_TransparentAlmostDarkOliveGreen_00603C2F_to_AlmostDarkOliveGreen_FF603C2F);
                auto controller = result->TryGetAnimationController("Color");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            CompositionColorBrush^ AnimatedColorBrush_TransparentAlmostGold_00FBE000_to_AlmostGold_FFFBE000()
            {
                auto result = _c->CreateColorBrush(ColorHelper::FromArgb(0x00, 0xFB, 0xE0, 0x00));
                result->StartAnimation("Color", ColorAnimation_TransparentAlmostGold_00FBE000_to_AlmostGold_FFFBE000());
                auto controller = result->TryGetAnimationController("Color");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            CompositionColorBrush^ AnimatedColorBrush_TransparentAlmostMediumTurquoise_0041DABB_to_AlmostMediumTurquoise_FF41DABB()
            {
                auto result = _c->CreateColorBrush(ColorHelper::FromArgb(0x00, 0x41, 0xDA, 0xBB));
                result->StartAnimation("Color", ColorAnimation_TransparentAlmostMediumTurquoise_0041DABB_to_AlmostMediumTurquoise_FF41DABB());
                auto controller = result->TryGetAnimationController("Color");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            CompositionColorBrush^ AnimatedColorBrush_TransparentAlmostOrange_00FFB800_to_AlmostOrange_FFFFB800_000()
            {
                auto result = _c->CreateColorBrush(ColorHelper::FromArgb(0x00, 0xFF, 0xB8, 0x00));
                result->StartAnimation("Color", ColorAnimation_TransparentAlmostOrange_00FFB800_to_AlmostOrange_FFFFB800());
                auto controller = result->TryGetAnimationController("Color");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            CompositionColorBrush^ AnimatedColorBrush_TransparentAlmostOrange_00FFB800_to_AlmostOrange_FFFFB800_001()
            {
                auto result = _c->CreateColorBrush(ColorHelper::FromArgb(0x00, 0xFF, 0xB8, 0x00));
                result->StartAnimation("Color", _colorAnimation_TransparentAlmostOrange_00FFB800_to_AlmostOrange_FFFFB800);
                auto controller = result->TryGetAnimationController("Color");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            CompositionColorBrush^ AnimatedColorBrush_TransparentAlmostOrange_00FFB800_to_AlmostOrange_FFFFB800_002()
            {
                auto result = _c->CreateColorBrush(ColorHelper::FromArgb(0x00, 0xFF, 0xB8, 0x00));
                result->StartAnimation("Color", _colorAnimation_TransparentAlmostOrange_00FFB800_to_AlmostOrange_FFFFB800);
                auto controller = result->TryGetAnimationController("Color");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            CompositionColorBrush^ AnimatedColorBrush_TransparentAlmostOrange_00FFB800_to_AlmostOrange_FFFFB800_003()
            {
                auto result = _c->CreateColorBrush(ColorHelper::FromArgb(0x00, 0xFF, 0xB8, 0x00));
                result->StartAnimation("Color", _colorAnimation_TransparentAlmostOrange_00FFB800_to_AlmostOrange_FFFFB800);
                auto controller = result->TryGetAnimationController("Color");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            CompositionColorBrush^ AnimatedColorBrush_TransparentAlmostOrange_00FFB800_to_AlmostOrange_FFFFB800_004()
            {
                auto result = _c->CreateColorBrush(ColorHelper::FromArgb(0x00, 0xFF, 0xB8, 0x00));
                result->StartAnimation("Color", _colorAnimation_TransparentAlmostOrange_00FFB800_to_AlmostOrange_FFFFB800);
                auto controller = result->TryGetAnimationController("Color");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            CompositionColorBrush^ AnimatedColorBrush_TransparentAlmostOrange_00FFB800_to_AlmostOrange_FFFFB800_005()
            {
                auto result = _c->CreateColorBrush(ColorHelper::FromArgb(0x00, 0xFF, 0xB8, 0x00));
                result->StartAnimation("Color", _colorAnimation_TransparentAlmostOrange_00FFB800_to_AlmostOrange_FFFFB800);
                auto controller = result->TryGetAnimationController("Color");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            CompositionColorBrush^ AnimatedColorBrush_TransparentAlmostOrangeRed_00F7620B_to_AlmostOrangeRed_FFF7620B_000()
            {
                auto result = _c->CreateColorBrush(ColorHelper::FromArgb(0x00, 0xF7, 0x62, 0x0B));
                result->StartAnimation("Color", ColorAnimation_TransparentAlmostOrangeRed_00F7620B_to_AlmostOrangeRed_FFF7620B());
                auto controller = result->TryGetAnimationController("Color");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            CompositionColorBrush^ AnimatedColorBrush_TransparentAlmostOrangeRed_00F7620B_to_AlmostOrangeRed_FFF7620B_001()
            {
                auto result = _c->CreateColorBrush(ColorHelper::FromArgb(0x00, 0xF7, 0x62, 0x0B));
                result->StartAnimation("Color", _colorAnimation_TransparentAlmostOrangeRed_00F7620B_to_AlmostOrangeRed_FFF7620B);
                auto controller = result->TryGetAnimationController("Color");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            CompositionColorBrush^ AnimatedColorBrush_TransparentAlmostSienna_008E552D_to_AlmostSienna_FF8E552D_000()
            {
                auto result = _c->CreateColorBrush(ColorHelper::FromArgb(0x00, 0x8E, 0x55, 0x2D));
                result->StartAnimation("Color", ColorAnimation_TransparentAlmostSienna_008E552D_to_AlmostSienna_FF8E552D());
                auto controller = result->TryGetAnimationController("Color");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            CompositionColorBrush^ AnimatedColorBrush_TransparentAlmostSienna_008E552D_to_AlmostSienna_FF8E552D_001()
            {
                auto result = _c->CreateColorBrush(ColorHelper::FromArgb(0x00, 0x8E, 0x55, 0x2D));
                result->StartAnimation("Color", _colorAnimation_TransparentAlmostSienna_008E552D_to_AlmostSienna_FF8E552D);
                auto controller = result->TryGetAnimationController("Color");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            CompositionColorBrush^ AnimatedColorBrush_TransparentAlmostSienna_008E552D_to_AlmostSienna_FF8E552D_002()
            {
                auto result = _c->CreateColorBrush(ColorHelper::FromArgb(0x00, 0x8E, 0x55, 0x2D));
                result->StartAnimation("Color", _colorAnimation_TransparentAlmostSienna_008E552D_to_AlmostSienna_FF8E552D);
                auto controller = result->TryGetAnimationController("Color");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicMountains'.Contents
            //     Group: MountianRight
            //       Path 1
            CompositionColorBrush^ AnimatedColorBrush_TransparentAlmostTeal_00008271_to_AlmostTeal_FF008271()
            {
                auto result = _c->CreateColorBrush(ColorHelper::FromArgb(0x00, 0x00, 0x82, 0x71));
                result->StartAnimation("Color", ColorAnimation_TransparentAlmostTeal_00008271_to_AlmostTeal_FF008271());
                auto controller = result->TryGetAnimationController("Color");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            CompositionColorBrush^ AnimatedColorBrush_TransparentAlmostTurquoise_0030D2F7_to_AlmostTurquoise_FF30D2F7_000()
            {
                auto result = _c->CreateColorBrush(ColorHelper::FromArgb(0x00, 0x30, 0xD2, 0xF7));
                result->StartAnimation("Color", ColorAnimation_TransparentAlmostTurquoise_0030D2F7_to_AlmostTurquoise_FF30D2F7_000());
                auto controller = result->TryGetAnimationController("Color");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            CompositionColorBrush^ AnimatedColorBrush_TransparentAlmostTurquoise_0030D2F7_to_AlmostTurquoise_FF30D2F7_001()
            {
                auto result = _c->CreateColorBrush(ColorHelper::FromArgb(0x00, 0x30, 0xD2, 0xF7));
                result->StartAnimation("Color", ColorAnimation_TransparentAlmostTurquoise_0030D2F7_to_AlmostTurquoise_FF30D2F7_001());
                auto controller = result->TryGetAnimationController("Color");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicMountains'.Contents
            //     Group: MountianRightSnow
            //       Path 1
            CompositionColorBrush^ AnimatedColorBrush_TransparentAlmostWhiteSmoke_00F1F1F1_to_AlmostWhiteSmoke_FFF1F1F1()
            {
                auto result = _c->CreateColorBrush(ColorHelper::FromArgb(0x00, 0xF1, 0xF1, 0xF1));
                result->StartAnimation("Color", ColorAnimation_TransparentAlmostWhiteSmoke_00F1F1F1_to_AlmostWhiteSmoke_FFF1F1F1());
                auto controller = result->TryGetAnimationController("Color");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'PhonePic01'.Contents
            //   'Flash'.Contents
            //     'Flash'.Contents
            //       Group: Rectangle 1
            //         Rectangle Path 1
            CompositionColorBrush^ AnimatedColorBrush_TransparentWhite_to_TransparentWhite_000()
            {
                auto result = _c->CreateColorBrush(ColorHelper::FromArgb(0x00, 0xFF, 0xFF, 0xFF));
                result->StartAnimation("Color", ColorAnimation_TransparentWhite_to_TransparentWhite_000());
                auto controller = result->TryGetAnimationController("Color");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PhonePic01 InApp'.Transforms
            //     'PhonePic01 InApp'.Contents
            //       'Flash'.Transforms
            //         'Flash'.Transforms
            //           'Flash'.Contents
            //             Group: Rectangle 1
            //               Rectangle Path 1
            CompositionColorBrush^ AnimatedColorBrush_TransparentWhite_to_TransparentWhite_001()
            {
                auto result = _c->CreateColorBrush(ColorHelper::FromArgb(0x00, 0xFF, 0xFF, 0xFF));
                result->StartAnimation("Color", ColorAnimation_TransparentWhite_to_TransparentWhite_001());
                auto controller = result->TryGetAnimationController("Color");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'PhonePic01'.AncestorTransformFrom_LaptopNull
            //   'PhonePic01'.Transforms
            //     'PhonePic01'.Contents
            //       'Flash'.Transforms
            //         'Flash'.Transforms
            //           'Flash'.Contents
            //             Group: Rectangle 1
            //               Rectangle Path 1
            CompositionColorBrush^ AnimatedColorBrush_TransparentWhite_to_TransparentWhite_002()
            {
                auto result = _c->CreateColorBrush(ColorHelper::FromArgb(0x00, 0xFF, 0xFF, 0xFF));
                result->StartAnimation("Color", _colorAnimation_TransparentWhite_to_TransparentWhite_001);
                auto controller = result->TryGetAnimationController("Color");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'PhonePic01'.Transforms
            //   'PhonePic01'.Contents
            //     'Flash'.Transforms
            //       'Flash'.Transforms
            //         'Flash'.Contents
            //           Group: Rectangle 1
            //             Rectangle Path 1
            CompositionColorBrush^ AnimatedColorBrush_TransparentWhite_to_TransparentWhite_003()
            {
                auto result = _c->CreateColorBrush(ColorHelper::FromArgb(0x00, 0xFF, 0xFF, 0xFF));
                result->StartAnimation("Color", _colorAnimation_TransparentWhite_to_TransparentWhite_001);
                auto controller = result->TryGetAnimationController("Color");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'PhonePic01'.Contents
            //   'Flash'.Contents
            //     'Flash'.Contents
            //       Group: Rectangle 1
            //         Rectangle Path 1
            CompositionColorBrush^ AnimatedColorBrush_TransparentWhite_to_TransparentWhite_004()
            {
                auto result = _c->CreateColorBrush(ColorHelper::FromArgb(0x00, 0xFF, 0xFF, 0xFF));
                result->StartAnimation("Color", _colorAnimation_TransparentWhite_to_TransparentWhite_000);
                auto controller = result->TryGetAnimationController("Color");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'PhonePic01'.Contents
            //   'Flash'.Contents
            //     'Flash'.Contents
            //       Group: Rectangle 1
            //         Rectangle Path 1
            CompositionColorBrush^ AnimatedColorBrush_TransparentWhite_to_TransparentWhite_005()
            {
                auto result = _c->CreateColorBrush(ColorHelper::FromArgb(0x00, 0xFF, 0xFF, 0xFF));
                result->StartAnimation("Color", _colorAnimation_TransparentWhite_to_TransparentWhite_000);
                auto controller = result->TryGetAnimationController("Color");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicMountains'.Contents
            //     Group: MountainLeftSnow
            //       Path 1
            CompositionColorBrush^ AnimatedColorBrush_TransparentWhite_to_White()
            {
                auto result = _c->CreateColorBrush(ColorHelper::FromArgb(0x00, 0xFF, 0xFF, 0xFF));
                result->StartAnimation("Color", ColorAnimation_TransparentWhite_to_White());
                auto controller = result->TryGetAnimationController("Color");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'CamButtonFill'.Transforms
            //     'CamButtonFill'.Contents
            //       Group: Ellipse 1
            //         Ellipse Path 1
            CompositionColorBrush^ AnimatedColorBrush_White_to_TransparentWhite()
            {
                auto result = _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0xFF, 0xFF, 0xFF));
                result->StartAnimation("Color", ColorAnimation_White_to_TransparentWhite());
                auto controller = result->TryGetAnimationController("Color");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            ColorKeyFrameAnimation^ ColorAnimation_AlmostDarkSlateGray_FF2A2A2A_to_TransparentAlmostDarkSlateGray_002A2A2A()
            {
                auto result = _colorAnimation_AlmostDarkSlateGray_FF2A2A2A_to_TransparentAlmostDarkSlateGray_002A2A2A = _c->CreateColorKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                // AlmostDarkSlateGray_FF2A2A2A
                result->InsertKeyFrame(0, ColorHelper::FromArgb(0xFF, 0x2A, 0x2A, 0x2A), _linearEasingFunction);
                // AlmostDarkSlateGray_FF2A2A2A
                result->InsertKeyFrame(0.148208469F, ColorHelper::FromArgb(0xFF, 0x2A, 0x2A, 0x2A), _linearEasingFunction);
                // TransparentAlmostDarkSlateGray_002A2A2A
                result->InsertKeyFrame(0.195439741F, ColorHelper::FromArgb(0x00, 0x2A, 0x2A, 0x2A), CubicBezierEasingFunction_006());
                return result;
            }

            ColorKeyFrameAnimation^ ColorAnimation_AlmostGold_FFFBE000_to_TransparentAlmostGold_00FBE000_000()
            {
                auto result = _c->CreateColorKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                // AlmostGold_FFFBE000
                result->InsertKeyFrame(0, ColorHelper::FromArgb(0xFF, 0xFB, 0xE0, 0x00), _linearEasingFunction);
                // AlmostGold_FFFBE000
                result->InsertKeyFrame(0.127035826F, ColorHelper::FromArgb(0xFF, 0xFB, 0xE0, 0x00), _linearEasingFunction);
                // TransparentAlmostGold_00FBE000
                result->InsertKeyFrame(0.133550495F, ColorHelper::FromArgb(0x00, 0xFB, 0xE0, 0x00), _cubicBezierEasingFunction_003);
                return result;
            }

            ColorKeyFrameAnimation^ ColorAnimation_AlmostGold_FFFBE000_to_TransparentAlmostGold_00FBE000_001()
            {
                auto result = _colorAnimation_AlmostGold_FFFBE000_to_TransparentAlmostGold_00FBE000_001 = _c->CreateColorKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                // AlmostGold_FFFBE000
                result->InsertKeyFrame(0, ColorHelper::FromArgb(0xFF, 0xFB, 0xE0, 0x00), _linearEasingFunction);
                // AlmostGold_FFFBE000
                result->InsertKeyFrame(0.1237785F, ColorHelper::FromArgb(0xFF, 0xFB, 0xE0, 0x00), _linearEasingFunction);
                // TransparentAlmostGold_00FBE000
                result->InsertKeyFrame(0.133550495F, ColorHelper::FromArgb(0x00, 0xFB, 0xE0, 0x00), _cubicBezierEasingFunction_003);
                return result;
            }

            ColorKeyFrameAnimation^ ColorAnimation_TransparentAlmostChocolate_00C95010_to_AlmostChocolate_FFC95010()
            {
                auto result = _colorAnimation_TransparentAlmostChocolate_00C95010_to_AlmostChocolate_FFC95010 = _c->CreateColorKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                // TransparentAlmostChocolate_00C95010
                result->InsertKeyFrame(0, ColorHelper::FromArgb(0x00, 0xC9, 0x50, 0x10), _linearEasingFunction);
                // TransparentAlmostChocolate_00C95010
                result->InsertKeyFrame(0.320846915F, ColorHelper::FromArgb(0x00, 0xC9, 0x50, 0x10), _linearEasingFunction);
                // AlmostChocolate_FFC95010
                result->InsertKeyFrame(0.385993481F, ColorHelper::FromArgb(0xFF, 0xC9, 0x50, 0x10), _cubicBezierEasingFunction_006);
                return result;
            }

            ColorKeyFrameAnimation^ ColorAnimation_TransparentAlmostDarkCyan_0000B193_to_AlmostDarkCyan_FF00B193_000()
            {
                auto result = _c->CreateColorKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                // TransparentAlmostDarkCyan_0000B193
                result->InsertKeyFrame(0, ColorHelper::FromArgb(0x00, 0x00, 0xB1, 0x93), _linearEasingFunction);
                // TransparentAlmostDarkCyan_0000B193
                result->InsertKeyFrame(0.32410422F, ColorHelper::FromArgb(0x00, 0x00, 0xB1, 0x93), _linearEasingFunction);
                // AlmostDarkCyan_FF00B193
                result->InsertKeyFrame(0.389250815F, ColorHelper::FromArgb(0xFF, 0x00, 0xB1, 0x93), _cubicBezierEasingFunction_006);
                return result;
            }

            ColorKeyFrameAnimation^ ColorAnimation_TransparentAlmostDarkCyan_0000B193_to_AlmostDarkCyan_FF00B193_001()
            {
                auto result = _c->CreateColorKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                // TransparentAlmostDarkCyan_0000B193
                result->InsertKeyFrame(0, ColorHelper::FromArgb(0x00, 0x00, 0xB1, 0x93), _linearEasingFunction);
                // TransparentAlmostDarkCyan_0000B193
                result->InsertKeyFrame(0.317589581F, ColorHelper::FromArgb(0x00, 0x00, 0xB1, 0x93), _linearEasingFunction);
                // AlmostDarkCyan_FF00B193
                result->InsertKeyFrame(0.382736146F, ColorHelper::FromArgb(0xFF, 0x00, 0xB1, 0x93), _cubicBezierEasingFunction_006);
                return result;
            }

            ColorKeyFrameAnimation^ ColorAnimation_TransparentAlmostDarkKhaki_00BA9167_to_AlmostDarkKhaki_FFBA9167()
            {
                auto result = _colorAnimation_TransparentAlmostDarkKhaki_00BA9167_to_AlmostDarkKhaki_FFBA9167 = _c->CreateColorKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                // TransparentAlmostDarkKhaki_00BA9167
                result->InsertKeyFrame(0, ColorHelper::FromArgb(0x00, 0xBA, 0x91, 0x67), _linearEasingFunction);
                // TransparentAlmostDarkKhaki_00BA9167
                result->InsertKeyFrame(0.32410422F, ColorHelper::FromArgb(0x00, 0xBA, 0x91, 0x67), _linearEasingFunction);
                // AlmostDarkKhaki_FFBA9167
                result->InsertKeyFrame(0.389250815F, ColorHelper::FromArgb(0xFF, 0xBA, 0x91, 0x67), _cubicBezierEasingFunction_006);
                return result;
            }

            ColorKeyFrameAnimation^ ColorAnimation_TransparentAlmostDarkOliveGreen_00603C2F_to_AlmostDarkOliveGreen_FF603C2F()
            {
                auto result = _colorAnimation_TransparentAlmostDarkOliveGreen_00603C2F_to_AlmostDarkOliveGreen_FF603C2F = _c->CreateColorKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                // TransparentAlmostDarkOliveGreen_00603C2F
                result->InsertKeyFrame(0, ColorHelper::FromArgb(0x00, 0x60, 0x3C, 0x2F), _linearEasingFunction);
                // TransparentAlmostDarkOliveGreen_00603C2F
                result->InsertKeyFrame(0.32410422F, ColorHelper::FromArgb(0x00, 0x60, 0x3C, 0x2F), _linearEasingFunction);
                // AlmostDarkOliveGreen_FF603C2F
                result->InsertKeyFrame(0.389250815F, ColorHelper::FromArgb(0xFF, 0x60, 0x3C, 0x2F), _cubicBezierEasingFunction_006);
                return result;
            }

            ColorKeyFrameAnimation^ ColorAnimation_TransparentAlmostGold_00FBE000_to_AlmostGold_FFFBE000()
            {
                auto result = _c->CreateColorKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                // TransparentAlmostGold_00FBE000
                result->InsertKeyFrame(0, ColorHelper::FromArgb(0x00, 0xFB, 0xE0, 0x00), _linearEasingFunction);
                // TransparentAlmostGold_00FBE000
                result->InsertKeyFrame(0.317589581F, ColorHelper::FromArgb(0x00, 0xFB, 0xE0, 0x00), _linearEasingFunction);
                // AlmostGold_FFFBE000
                result->InsertKeyFrame(0.382736146F, ColorHelper::FromArgb(0xFF, 0xFB, 0xE0, 0x00), _cubicBezierEasingFunction_006);
                return result;
            }

            ColorKeyFrameAnimation^ ColorAnimation_TransparentAlmostMediumTurquoise_0041DABB_to_AlmostMediumTurquoise_FF41DABB()
            {
                auto result = _c->CreateColorKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                // TransparentAlmostMediumTurquoise_0041DABB
                result->InsertKeyFrame(0, ColorHelper::FromArgb(0x00, 0x41, 0xDA, 0xBB), _linearEasingFunction);
                // TransparentAlmostMediumTurquoise_0041DABB
                result->InsertKeyFrame(0.320846915F, ColorHelper::FromArgb(0x00, 0x41, 0xDA, 0xBB), _linearEasingFunction);
                // AlmostMediumTurquoise_FF41DABB
                result->InsertKeyFrame(0.385993481F, ColorHelper::FromArgb(0xFF, 0x41, 0xDA, 0xBB), _cubicBezierEasingFunction_006);
                return result;
            }

            ColorKeyFrameAnimation^ ColorAnimation_TransparentAlmostOrange_00FFB800_to_AlmostOrange_FFFFB800()
            {
                auto result = _colorAnimation_TransparentAlmostOrange_00FFB800_to_AlmostOrange_FFFFB800 = _c->CreateColorKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                // TransparentAlmostOrange_00FFB800
                result->InsertKeyFrame(0, ColorHelper::FromArgb(0x00, 0xFF, 0xB8, 0x00), _linearEasingFunction);
                // TransparentAlmostOrange_00FFB800
                result->InsertKeyFrame(0.320846915F, ColorHelper::FromArgb(0x00, 0xFF, 0xB8, 0x00), _linearEasingFunction);
                // AlmostOrange_FFFFB800
                result->InsertKeyFrame(0.385993481F, ColorHelper::FromArgb(0xFF, 0xFF, 0xB8, 0x00), _cubicBezierEasingFunction_006);
                return result;
            }

            ColorKeyFrameAnimation^ ColorAnimation_TransparentAlmostOrangeRed_00F7620B_to_AlmostOrangeRed_FFF7620B()
            {
                auto result = _colorAnimation_TransparentAlmostOrangeRed_00F7620B_to_AlmostOrangeRed_FFF7620B = _c->CreateColorKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                // TransparentAlmostOrangeRed_00F7620B
                result->InsertKeyFrame(0, ColorHelper::FromArgb(0x00, 0xF7, 0x62, 0x0B), _linearEasingFunction);
                // TransparentAlmostOrangeRed_00F7620B
                result->InsertKeyFrame(0.320846915F, ColorHelper::FromArgb(0x00, 0xF7, 0x62, 0x0B), _linearEasingFunction);
                // AlmostOrangeRed_FFF7620B
                result->InsertKeyFrame(0.385993481F, ColorHelper::FromArgb(0xFF, 0xF7, 0x62, 0x0B), _cubicBezierEasingFunction_006);
                return result;
            }

            ColorKeyFrameAnimation^ ColorAnimation_TransparentAlmostSienna_008E552D_to_AlmostSienna_FF8E552D()
            {
                auto result = _colorAnimation_TransparentAlmostSienna_008E552D_to_AlmostSienna_FF8E552D = _c->CreateColorKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                // TransparentAlmostSienna_008E552D
                result->InsertKeyFrame(0, ColorHelper::FromArgb(0x00, 0x8E, 0x55, 0x2D), _linearEasingFunction);
                // TransparentAlmostSienna_008E552D
                result->InsertKeyFrame(0.32410422F, ColorHelper::FromArgb(0x00, 0x8E, 0x55, 0x2D), _linearEasingFunction);
                // AlmostSienna_FF8E552D
                result->InsertKeyFrame(0.389250815F, ColorHelper::FromArgb(0xFF, 0x8E, 0x55, 0x2D), _cubicBezierEasingFunction_006);
                return result;
            }

            ColorKeyFrameAnimation^ ColorAnimation_TransparentAlmostTeal_00008271_to_AlmostTeal_FF008271()
            {
                auto result = _c->CreateColorKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                // TransparentAlmostTeal_00008271
                result->InsertKeyFrame(0, ColorHelper::FromArgb(0x00, 0x00, 0x82, 0x71), _linearEasingFunction);
                // TransparentAlmostTeal_00008271
                result->InsertKeyFrame(0.317589581F, ColorHelper::FromArgb(0x00, 0x00, 0x82, 0x71), _linearEasingFunction);
                // AlmostTeal_FF008271
                result->InsertKeyFrame(0.382736146F, ColorHelper::FromArgb(0xFF, 0x00, 0x82, 0x71), _cubicBezierEasingFunction_006);
                return result;
            }

            ColorKeyFrameAnimation^ ColorAnimation_TransparentAlmostTurquoise_0030D2F7_to_AlmostTurquoise_FF30D2F7_000()
            {
                auto result = _c->CreateColorKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                // TransparentAlmostTurquoise_0030D2F7
                result->InsertKeyFrame(0, ColorHelper::FromArgb(0x00, 0x30, 0xD2, 0xF7), _linearEasingFunction);
                // TransparentAlmostTurquoise_0030D2F7
                result->InsertKeyFrame(0.32410422F, ColorHelper::FromArgb(0x00, 0x30, 0xD2, 0xF7), _linearEasingFunction);
                // AlmostTurquoise_FF30D2F7
                result->InsertKeyFrame(0.389250815F, ColorHelper::FromArgb(0xFF, 0x30, 0xD2, 0xF7), _cubicBezierEasingFunction_006);
                return result;
            }

            ColorKeyFrameAnimation^ ColorAnimation_TransparentAlmostTurquoise_0030D2F7_to_AlmostTurquoise_FF30D2F7_001()
            {
                auto result = _c->CreateColorKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                // TransparentAlmostTurquoise_0030D2F7
                result->InsertKeyFrame(0, ColorHelper::FromArgb(0x00, 0x30, 0xD2, 0xF7), _linearEasingFunction);
                // TransparentAlmostTurquoise_0030D2F7
                result->InsertKeyFrame(0.317589581F, ColorHelper::FromArgb(0x00, 0x30, 0xD2, 0xF7), _linearEasingFunction);
                // AlmostTurquoise_FF30D2F7
                result->InsertKeyFrame(0.382736146F, ColorHelper::FromArgb(0xFF, 0x30, 0xD2, 0xF7), _cubicBezierEasingFunction_006);
                return result;
            }

            ColorKeyFrameAnimation^ ColorAnimation_TransparentAlmostWhiteSmoke_00F1F1F1_to_AlmostWhiteSmoke_FFF1F1F1()
            {
                auto result = _c->CreateColorKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                // TransparentAlmostWhiteSmoke_00F1F1F1
                result->InsertKeyFrame(0, ColorHelper::FromArgb(0x00, 0xF1, 0xF1, 0xF1), _linearEasingFunction);
                // TransparentAlmostWhiteSmoke_00F1F1F1
                result->InsertKeyFrame(0.317589581F, ColorHelper::FromArgb(0x00, 0xF1, 0xF1, 0xF1), _linearEasingFunction);
                // AlmostWhiteSmoke_FFF1F1F1
                result->InsertKeyFrame(0.382736146F, ColorHelper::FromArgb(0xFF, 0xF1, 0xF1, 0xF1), _cubicBezierEasingFunction_006);
                return result;
            }

            ColorKeyFrameAnimation^ ColorAnimation_TransparentWhite_to_TransparentWhite_000()
            {
                auto result = _colorAnimation_TransparentWhite_to_TransparentWhite_000 = _c->CreateColorKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                // TransparentWhite
                result->InsertKeyFrame(0, ColorHelper::FromArgb(0x00, 0xFF, 0xFF, 0xFF), _linearEasingFunction);
                // TransparentWhite
                result->InsertKeyFrame(0.107491858F, ColorHelper::FromArgb(0x00, 0xFF, 0xFF, 0xFF), _linearEasingFunction);
                // White
                result->InsertKeyFrame(0.109120518F, ColorHelper::FromArgb(0xFF, 0xFF, 0xFF, 0xFF), _cubicBezierEasingFunction_007);
                // TransparentWhite
                result->InsertKeyFrame(0.133550495F, ColorHelper::FromArgb(0x00, 0xFF, 0xFF, 0xFF), _cubicBezierEasingFunction_003);
                return result;
            }

            ColorKeyFrameAnimation^ ColorAnimation_TransparentWhite_to_TransparentWhite_001()
            {
                auto result = _colorAnimation_TransparentWhite_to_TransparentWhite_001 = _c->CreateColorKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                // TransparentWhite
                result->InsertKeyFrame(0, ColorHelper::FromArgb(0x00, 0xFF, 0xFF, 0xFF), _linearEasingFunction);
                // TransparentWhite
                result->InsertKeyFrame(0.109120518F, ColorHelper::FromArgb(0x00, 0xFF, 0xFF, 0xFF), _linearEasingFunction);
                // White
                result->InsertKeyFrame(0.110749185F, ColorHelper::FromArgb(0xFF, 0xFF, 0xFF, 0xFF), _cubicBezierEasingFunction_007);
                // TransparentWhite
                result->InsertKeyFrame(0.135179147F, ColorHelper::FromArgb(0x00, 0xFF, 0xFF, 0xFF), _cubicBezierEasingFunction_003);
                return result;
            }

            ColorKeyFrameAnimation^ ColorAnimation_TransparentWhite_to_White()
            {
                auto result = _c->CreateColorKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                // TransparentWhite
                result->InsertKeyFrame(0, ColorHelper::FromArgb(0x00, 0xFF, 0xFF, 0xFF), _linearEasingFunction);
                // TransparentWhite
                result->InsertKeyFrame(0.317589581F, ColorHelper::FromArgb(0x00, 0xFF, 0xFF, 0xFF), _linearEasingFunction);
                // White
                result->InsertKeyFrame(0.382736146F, ColorHelper::FromArgb(0xFF, 0xFF, 0xFF, 0xFF), _cubicBezierEasingFunction_006);
                return result;
            }

            ColorKeyFrameAnimation^ ColorAnimation_White_to_TransparentWhite()
            {
                auto result = _c->CreateColorKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                // White
                result->InsertKeyFrame(0, ColorHelper::FromArgb(0xFF, 0xFF, 0xFF, 0xFF), _linearEasingFunction);
                // White
                result->InsertKeyFrame(0.0912052095F, ColorHelper::FromArgb(0xFF, 0xFF, 0xFF, 0xFF), _linearEasingFunction);
                // SemiTransparentWhite
                result->InsertKeyFrame(0.0944625437F, ColorHelper::FromArgb(0x19, 0xFF, 0xFF, 0xFF), _cubicBezierEasingFunction_007);
                // SemiTransparentWhite
                result->InsertKeyFrame(0.100977197F, ColorHelper::FromArgb(0x19, 0xFF, 0xFF, 0xFF), _linearEasingFunction);
                // White
                result->InsertKeyFrame(0.136807814F, ColorHelper::FromArgb(0xFF, 0xFF, 0xFF, 0xFF), _cubicBezierEasingFunction_006);
                // White
                result->InsertKeyFrame(0.148208469F, ColorHelper::FromArgb(0xFF, 0xFF, 0xFF, 0xFF), _linearEasingFunction);
                // TransparentWhite
                result->InsertKeyFrame(0.195439741F, ColorHelper::FromArgb(0x00, 0xFF, 0xFF, 0xFF), _cubicBezierEasingFunction_006);
                return result;
            }

            // 'LaptopScreen'.AncestorTransformFrom_LaptopTop
            //   'LaptopTop'.Transforms
            //     'LaptopScreen'.Contents
            //       Group: Group 2
            //         Path 1
            CompositionColorBrush^ ColorBrush_AlmostBlack_FF1A1A1A()
            {
                return _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0x1A, 0x1A, 0x1A));
            }

            CompositionColorBrush^ ColorBrush_AlmostBlack_FF1F1F1F()
            {
                return _colorBrush_AlmostBlack_FF1F1F1F = _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0x1F, 0x1F, 0x1F));
            }

            CompositionColorBrush^ ColorBrush_AlmostChocolate_FFC95010()
            {
                return _colorBrush_AlmostChocolate_FFC95010 = _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0xC9, 0x50, 0x10));
            }

            CompositionColorBrush^ ColorBrush_AlmostDarkCyan_FF00B193()
            {
                return _colorBrush_AlmostDarkCyan_FF00B193 = _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0x00, 0xB1, 0x93));
            }

            CompositionColorBrush^ ColorBrush_AlmostDarkGray_FF999999()
            {
                return _colorBrush_AlmostDarkGray_FF999999 = _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0x99, 0x99, 0x99));
            }

            CompositionColorBrush^ ColorBrush_AlmostDarkSlateGray_FF2A2A2A()
            {
                return _colorBrush_AlmostDarkSlateGray_FF2A2A2A = _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0x2A, 0x2A, 0x2A));
            }

            CompositionColorBrush^ ColorBrush_AlmostDarkSlateGray_FF333333()
            {
                return _colorBrush_AlmostDarkSlateGray_FF333333 = _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0x33, 0x33, 0x33));
            }

            CompositionColorBrush^ ColorBrush_AlmostDarkSlateGray_FF383838()
            {
                return _colorBrush_AlmostDarkSlateGray_FF383838 = _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0x38, 0x38, 0x38));
            }

            CompositionColorBrush^ ColorBrush_AlmostDodgerBlue_FF0078D7()
            {
                return _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0x00, 0x78, 0xD7));
            }

            // 'LaptopScreen'.AncestorTransformFrom_LaptopTop
            //   'LaptopTop'.Transforms
            //     'LaptopScreen'.Contents
            //       Group: Group 3
            //         Path 1
            CompositionColorBrush^ ColorBrush_AlmostDodgerBlue_FF3A96DD()
            {
                return _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0x3A, 0x96, 0xDD));
            }

            CompositionColorBrush^ ColorBrush_AlmostGainsboro_FFE3E3E3()
            {
                return _colorBrush_AlmostGainsboro_FFE3E3E3 = _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0xE3, 0xE3, 0xE3));
            }

            CompositionColorBrush^ ColorBrush_AlmostGold_FFFBE000()
            {
                return _colorBrush_AlmostGold_FFFBE000 = _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0xFB, 0xE0, 0x00));
            }

            // 'GoldenGate'.Contents
            //   Group: GreySidebar
            //     Path 1
            CompositionColorBrush^ ColorBrush_AlmostLavender_FFEBEBEB()
            {
                return _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0xEB, 0xEB, 0xEB));
            }

            // 'LaptopBottom'.AncestorTransformFrom_LaptopNull
            //   'LaptopBottom'.Contents
            //     Group: Group 5
            //       Path 1
            CompositionColorBrush^ ColorBrush_AlmostLightGray_FFCCCCCC()
            {
                return _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0xCC, 0xCC, 0xCC));
            }

            CompositionColorBrush^ ColorBrush_AlmostMediumTurquoise_FF41DABB()
            {
                return _colorBrush_AlmostMediumTurquoise_FF41DABB = _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0x41, 0xDA, 0xBB));
            }

            CompositionColorBrush^ ColorBrush_AlmostOrange_FFFBB713()
            {
                return _colorBrush_AlmostOrange_FFFBB713 = _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0xFB, 0xB7, 0x13));
            }

            CompositionColorBrush^ ColorBrush_AlmostOrange_FFFFB800()
            {
                return _colorBrush_AlmostOrange_FFFFB800 = _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0xFF, 0xB8, 0x00));
            }

            CompositionColorBrush^ ColorBrush_AlmostOrangeRed_FFF7620B()
            {
                return _colorBrush_AlmostOrangeRed_FFF7620B = _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0xF7, 0x62, 0x0B));
            }

            CompositionColorBrush^ ColorBrush_AlmostPeru_FFD18A29()
            {
                return _colorBrush_AlmostPeru_FFD18A29 = _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0xD1, 0x8A, 0x29));
            }

            CompositionColorBrush^ ColorBrush_AlmostSteelBlue_FF5262AD()
            {
                return _colorBrush_AlmostSteelBlue_FF5262AD = _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0x52, 0x62, 0xAD));
            }

            CompositionColorBrush^ ColorBrush_AlmostTeal_FF008271()
            {
                return _colorBrush_AlmostTeal_FF008271 = _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0x00, 0x82, 0x71));
            }

            CompositionColorBrush^ ColorBrush_AlmostTomato_FFEC6950()
            {
                return _colorBrush_AlmostTomato_FFEC6950 = _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0xEC, 0x69, 0x50));
            }

            CompositionColorBrush^ ColorBrush_AlmostTurquoise_FF30D2F7()
            {
                return _colorBrush_AlmostTurquoise_FF30D2F7 = _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0x30, 0xD2, 0xF7));
            }

            CompositionColorBrush^ ColorBrush_AlmostWhiteSmoke_FFF1F1F1()
            {
                return _colorBrush_AlmostWhiteSmoke_FFF1F1F1 = _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0xF1, 0xF1, 0xF1));
            }

            CompositionColorBrush^ ColorBrush_Black()
            {
                return _colorBrush_Black = _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0x00, 0x00, 0x00));
            }

            // 'PicShadow'.Transforms
            //   'PicShadow'.Contents
            //     Group: Rectangle 1
            //       Rectangle Path 1
            CompositionColorBrush^ ColorBrush_SemiTransparentBlack()
            {
                return _c->CreateColorBrush(ColorHelper::FromArgb(0x4C, 0x00, 0x00, 0x00));
            }

            CompositionColorBrush^ ColorBrush_TransparentWhite()
            {
                return _colorBrush_TransparentWhite = _c->CreateColorBrush(ColorHelper::FromArgb(0x00, 0xFF, 0xFF, 0xFF));
            }

            CompositionColorBrush^ ColorBrush_White()
            {
                return _colorBrush_White = _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0xFF, 0xFF, 0xFF));
            }

            // 'PhoneShell Outlines 2'.AncestorTransformFrom_Master Null
            // 'PhoneShell Outlines 2'.AncestorTransformFrom_Master Null
            CompositionContainerShape^ ContainerShape_000()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 213, 106.5F };
                result->Scale = { 0.5F, 0.5F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_001());
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            CompositionContainerShape^ ContainerShape_001()
            {
                auto result = _c->CreateContainerShape();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 46.25F, 86.25F });
                propertySet->InsertVector2("Position", { -239, 15 });
                result->CenterPoint = { 46.25F, 86.25F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_002());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position.X", ScalarAnimation_m239_to_0());
                auto controller = result->TryGetAnimationController("Position.X");
                controller->Pause();
                controller->StartAnimation("Progress", ScalarExpressionAnimation_000());
                result->StartAnimation("Position.Y", ScalarAnimation_15_to_m0p063());
                controller = result->TryGetAnimationController("Position.Y");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Scale", Vector2Animation_000());
                controller = result->TryGetAnimationController("Scale");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            // 'PhoneShell Outlines 2'.Contents
            CompositionContainerShape^ ContainerShape_002()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_003());
                shapes->Append(ContainerShape_004());
                shapes->Append(ContainerShape_005());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "(_.Progress < 0.451140076) ? Matrix3x2(0,0,0,0,0,0) : ((_.Progress < 0.908794761) ? Matrix3x2(1,0,0,1,0,0) : Matrix3x2(0,0,0,0,0,0))";
                _reusableExpressionAnimation->SetReferenceParameter("_", _root);
                result->StartAnimation("TransformMatrix", _reusableExpressionAnimation);
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneShell Outlines 2'.Contents
            // Group: Group 3
            CompositionContainerShape^ ContainerShape_003()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 46.25F, 86.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_000());
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneShell Outlines 2'.Contents
            // Group: Group 2
            CompositionContainerShape^ ContainerShape_004()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 46.25F, 86.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_001());
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneShell Outlines 2'.Contents
            // Group: Group 1
            CompositionContainerShape^ ContainerShape_005()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 46.25F, 10.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_002());
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneScreen'.Transforms
            //     'PhoneScreen'.Contents
            //       'PhoneScreen Outlines 2'.Contents
            // 'PhoneScreen Outlines 2'.Contents
            CompositionContainerShape^ ContainerShape_006()
            {
                auto result = _c->CreateContainerShape();
                result->CenterPoint = { 38.25F, 70.25F };
                result->Offset = { -0.25F, -0.25F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_007());
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneScreen'.Transforms
            //     'PhoneScreen'.Contents
            //       'PhoneScreen Outlines 2'.Contents
            //         'PhoneScreen Outlines 2'.Contents
            // Group: Group 1
            CompositionContainerShape^ ContainerShape_007()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 38.25F, 70.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_003());
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            // 'PhonePic03 Outlines 2'.Contents
            CompositionContainerShape^ ContainerShape_008()
            {
                auto result = _c->CreateContainerShape();
                result->CenterPoint = { 34.25F, 34.25F };
                result->Offset = { -0.25F, -0.25F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_009());
                shapes->Append(ContainerShape_010());
                shapes->Append(ContainerShape_011());
                shapes->Append(ContainerShape_012());
                shapes->Append(ContainerShape_013());
                shapes->Append(ContainerShape_014());
                shapes->Append(ContainerShape_015());
                shapes->Append(ContainerShape_016());
                shapes->Append(ContainerShape_017());
                shapes->Append(ContainerShape_018());
                shapes->Append(ContainerShape_019());
                shapes->Append(ContainerShape_020());
                shapes->Append(ContainerShape_021());
                shapes->Append(ContainerShape_022());
                shapes->Append(ContainerShape_023());
                shapes->Append(ContainerShape_024());
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            // Group: Group 16
            CompositionContainerShape^ ContainerShape_009()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 34.25F, 34.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_004());
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            // Group: Group 15
            CompositionContainerShape^ ContainerShape_010()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 34.25F, 34.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_005());
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            // Group: Group 14
            CompositionContainerShape^ ContainerShape_011()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 34.25F, 28.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_006());
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            // Group: Group 13
            CompositionContainerShape^ ContainerShape_012()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 34.25F, 43.6790009F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_007());
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            // Group: Group 12
            CompositionContainerShape^ ContainerShape_013()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 41.9640007F, 35.9650002F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_008());
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            // Group: Group 11
            CompositionContainerShape^ ContainerShape_014()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 26.5359993F, 35.9640007F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_009());
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            // Group: Group 10
            CompositionContainerShape^ ContainerShape_015()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 34.25F, 23.9640007F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_010());
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            // Group: Group 9
            CompositionContainerShape^ ContainerShape_016()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 34.25F, 47.9620018F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_011());
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            // Group: Group 8
            CompositionContainerShape^ ContainerShape_017()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 46.2490005F, 35.9650002F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_012());
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            // Group: Group 7
            CompositionContainerShape^ ContainerShape_018()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 44.5349998F, 27.3929996F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_013());
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            // Group: Group 6
            CompositionContainerShape^ ContainerShape_019()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 22.2509995F, 35.9640007F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_014());
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            // Group: Group 5
            CompositionContainerShape^ ContainerShape_020()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 23.9650002F, 27.3929996F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_015());
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            // Group: Group 4
            CompositionContainerShape^ ContainerShape_021()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 23.9650002F, 44.5349998F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_016());
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            // Group: Group 3
            CompositionContainerShape^ ContainerShape_022()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 44.5349998F, 44.5349998F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_017());
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            // Group: Group 2
            CompositionContainerShape^ ContainerShape_023()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 34.25F, 35.9640007F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_018());
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            // Group: Group 1
            CompositionContainerShape^ ContainerShape_024()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 34.25F, 35.9640007F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_019());
                return result;
            }

            // 'PhonePic02'.AncestorTransformFrom_PicMover
            //   'PhonePic02'.Contents
            //     'PicMountains'.Contents
            // 'PicMountains'.Contents
            CompositionContainerShape^ ContainerShape_025()
            {
                auto result = _c->CreateContainerShape();
                result->CenterPoint = { 168.25F, 42.25F };
                result->Offset = { -134.25F, -8.31700134F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_026());
                shapes->Append(ContainerShape_027());
                shapes->Append(ContainerShape_028());
                shapes->Append(ContainerShape_029());
                shapes->Append(ContainerShape_030());
                shapes->Append(ContainerShape_031());
                return result;
            }

            // 'PhonePic02'.AncestorTransformFrom_PicMover
            //   'PhonePic02'.Contents
            //     'PicMountains'.Contents
            //       'PicMountains'.Contents
            // Group: Sky
            CompositionContainerShape^ ContainerShape_026()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 168.25F, 42.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_020());
                return result;
            }

            // 'PhonePic02'.AncestorTransformFrom_PicMover
            //   'PhonePic02'.Contents
            //     'PicMountains'.Contents
            //       'PicMountains'.Contents
            // Group: MountianRight
            CompositionContainerShape^ ContainerShape_027()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 183.25F, 58.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_021());
                return result;
            }

            // 'PhonePic02'.AncestorTransformFrom_PicMover
            //   'PhonePic02'.Contents
            //     'PicMountains'.Contents
            //       'PicMountains'.Contents
            // Group: MountianRightSnow
            CompositionContainerShape^ ContainerShape_028()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 183.25F, 58.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_022());
                return result;
            }

            // 'PhonePic02'.AncestorTransformFrom_PicMover
            //   'PhonePic02'.Contents
            //     'PicMountains'.Contents
            //       'PicMountains'.Contents
            // Group: MountainLeft
            CompositionContainerShape^ ContainerShape_029()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 168.25F, 52.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_023());
                return result;
            }

            // 'PhonePic02'.AncestorTransformFrom_PicMover
            //   'PhonePic02'.Contents
            //     'PicMountains'.Contents
            //       'PicMountains'.Contents
            // Group: MountainLeftSnow
            CompositionContainerShape^ ContainerShape_030()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 168.25F, 52.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_024());
                return result;
            }

            // 'PhonePic02'.AncestorTransformFrom_PicMover
            //   'PhonePic02'.Contents
            //     'PicMountains'.Contents
            //       'PicMountains'.Contents
            // Group: Sun
            CompositionContainerShape^ ContainerShape_031()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 182.25F, 18.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_025());
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneScreen'.Transforms
            //     'PhoneScreen'.Contents
            //       'BlackBG'.Contents
            // 'BlackBG'.Contents
            CompositionContainerShape^ ContainerShape_032()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 38, 70 };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_033());
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneScreen'.Transforms
            //     'PhoneScreen'.Contents
            //       'BlackBG'.Contents
            //         'BlackBG'.Contents
            // Group: Rectangle 1
            CompositionContainerShape^ ContainerShape_033()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_026());
                return result;
            }

            // 'PhonePic01'.Contents
            //   'Flash'.Contents
            // 'PurpleBG'.Contents
            CompositionContainerShape^ ContainerShape_034()
            {
                auto result = _c->CreateContainerShape();
                result->CenterPoint = { 39.25F, 43.25F };
                result->Offset = { -0.25F, -0.25F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_035());
                return result;
            }

            // 'PhonePic01'.Contents
            //   'Flash'.Contents
            //     'PurpleBG'.Contents
            // Group: Group 11
            CompositionContainerShape^ ContainerShape_035()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 34.25F, 34.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_027());
                return result;
            }

            // 'Cat'.Contents
            CompositionContainerShape^ ContainerShape_036()
            {
                auto result = _c->CreateContainerShape();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 39.25F, 43.25F });
                propertySet->InsertVector2("Position", { 39.625F, 37.75F });
                result->CenterPoint = { 39.25F, 43.25F };
                result->Scale = { 0.751999974F, 0.751999974F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_037());
                shapes->Append(ContainerShape_038());
                shapes->Append(ContainerShape_039());
                shapes->Append(ContainerShape_040());
                shapes->Append(ContainerShape_041());
                shapes->Append(ContainerShape_042());
                shapes->Append(ContainerShape_043());
                shapes->Append(ContainerShape_044());
                shapes->Append(ContainerShape_045());
                shapes->Append(ContainerShape_046());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position", Vector2Animation_001());
                auto controller = result->TryGetAnimationController("Position");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Scale", Vector2Animation_002());
                controller = result->TryGetAnimationController("Scale");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'Cat'.Contents
            // Group: Group 10
            CompositionContainerShape^ ContainerShape_037()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 29.3239994F, 24.1590004F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_028());
                return result;
            }

            // 'Cat'.Contents
            // Group: Group 9
            CompositionContainerShape^ ContainerShape_038()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 39.5289993F, 24.1590004F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_029());
                return result;
            }

            // 'Cat'.Contents
            // Group: Group 8
            CompositionContainerShape^ ContainerShape_039()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 40.8320007F, 43.5419998F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_030());
                return result;
            }

            // 'Cat'.Contents
            // Group: EyeLeft
            CompositionContainerShape^ ContainerShape_040()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 25.4220009F, 30.4619999F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_031());
                return result;
            }

            // 'Cat'.Contents
            // Group: EyeRight
            CompositionContainerShape^ ContainerShape_041()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 44.0320015F, 30.4619999F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_032());
                return result;
            }

            // 'Cat'.Contents
            // Group: Group 5
            CompositionContainerShape^ ContainerShape_042()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 34.7270012F, 46.6699982F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_033());
                return result;
            }

            // 'Cat'.Contents
            // Group: Group 4
            CompositionContainerShape^ ContainerShape_043()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 28.7240009F, 40.6679993F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_034());
                return result;
            }

            // 'Cat'.Contents
            // Group: Group 3
            CompositionContainerShape^ ContainerShape_044()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 40.7299995F, 40.6679993F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_035());
                return result;
            }

            // 'Cat'.Contents
            // Group: Group 2
            CompositionContainerShape^ ContainerShape_045()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 34.7270012F, 38.2659988F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_036());
                return result;
            }

            // 'Cat'.Contents
            // Group: Group 1
            CompositionContainerShape^ ContainerShape_046()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 35.6269989F, 64.6439972F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_037());
                return result;
            }

            // 'PhonePic01'.Contents
            //   'Flash'.Contents
            // 'Flash'.Contents
            CompositionContainerShape^ ContainerShape_047()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 34, 34 };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_048());
                return result;
            }

            // 'PhonePic01'.Contents
            //   'Flash'.Contents
            //     'Flash'.Contents
            // Group: Rectangle 1
            CompositionContainerShape^ ContainerShape_048()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_038());
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneScreen'.Transforms
            //     'PhoneScreen'.Contents
            //       'BlackBG 2'.Transforms
            // 'BlackBG 2'.Transforms
            CompositionContainerShape^ ContainerShape_049()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 38, 70 };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_050());
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneScreen'.Transforms
            //     'PhoneScreen'.Contents
            //       'BlackBG 2'.Transforms
            //         'BlackBG 2'.Transforms
            // 'BlackBG 2'.Contents
            CompositionContainerShape^ ContainerShape_050()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_051());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "(_.Progress < 0.85830617) ? Matrix3x2(0,0,0,0,0,0) : Matrix3x2(1,0,0,1,0,0)";
                _reusableExpressionAnimation->SetReferenceParameter("_", _root);
                result->StartAnimation("TransformMatrix", _reusableExpressionAnimation);
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneScreen'.Transforms
            //     'PhoneScreen'.Contents
            //       'BlackBG 2'.Transforms
            //         'BlackBG 2'.Transforms
            //           'BlackBG 2'.Contents
            // Group: Rectangle 1
            CompositionContainerShape^ ContainerShape_051()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_039());
                return result;
            }

            // 'PhonePic01_Ending'.Transforms
            //   'PhonePic01_Ending'.Contents
            //     'Flash'.Transforms
            // 'PurpleBG'.Transforms
            CompositionContainerShape^ ContainerShape_052()
            {
                auto result = _c->CreateContainerShape();
                result->CenterPoint = { 39.25F, 43.25F };
                result->Offset = { -0.25F, -0.25F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_053());
                return result;
            }

            // 'PhonePic01_Ending'.Transforms
            //   'PhonePic01_Ending'.Contents
            //     'Flash'.Transforms
            //       'PurpleBG'.Transforms
            // 'PurpleBG'.Contents
            CompositionContainerShape^ ContainerShape_053()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_054());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "(_.Progress < 0.817589581) ? Matrix3x2(0,0,0,0,0,0) : Matrix3x2(1,0,0,1,0,0)";
                _reusableExpressionAnimation->SetReferenceParameter("_", _root);
                result->StartAnimation("TransformMatrix", _reusableExpressionAnimation);
                return result;
            }

            // 'PhonePic01_Ending'.Transforms
            //   'PhonePic01_Ending'.Contents
            //     'Flash'.Transforms
            //       'PurpleBG'.Transforms
            //         'PurpleBG'.Contents
            // Group: Group 11
            CompositionContainerShape^ ContainerShape_054()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 34.25F, 34.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_040());
                return result;
            }

            // 'Cat'.Transforms
            CompositionContainerShape^ ContainerShape_055()
            {
                auto result = _c->CreateContainerShape();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 39.25F, 43.25F });
                propertySet->InsertVector2("Position", { 39.625F, 37.75F });
                result->CenterPoint = { 39.25F, 43.25F };
                result->Scale = { 0.751999974F, 0.751999974F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_056());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position", Vector2Animation_004());
                auto controller = result->TryGetAnimationController("Position");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'Cat'.Transforms
            // 'Cat'.Contents
            CompositionContainerShape^ ContainerShape_056()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_057());
                shapes->Append(ContainerShape_058());
                shapes->Append(ContainerShape_059());
                shapes->Append(ContainerShape_060());
                shapes->Append(ContainerShape_061());
                shapes->Append(ContainerShape_062());
                shapes->Append(ContainerShape_063());
                shapes->Append(ContainerShape_064());
                shapes->Append(ContainerShape_065());
                shapes->Append(ContainerShape_066());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "(_.Progress < 0.817589581) ? Matrix3x2(0,0,0,0,0,0) : Matrix3x2(1,0,0,1,0,0)";
                _reusableExpressionAnimation->SetReferenceParameter("_", _root);
                result->StartAnimation("TransformMatrix", _reusableExpressionAnimation);
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            // Group: Group 10
            CompositionContainerShape^ ContainerShape_057()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 29.3239994F, 24.1590004F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_041());
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            // Group: Group 9
            CompositionContainerShape^ ContainerShape_058()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 39.5289993F, 24.1590004F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_042());
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            // Group: Group 8
            CompositionContainerShape^ ContainerShape_059()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 40.8320007F, 43.5419998F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_043());
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            // Group: EyeLeft
            CompositionContainerShape^ ContainerShape_060()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 25.4220009F, 30.4619999F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_044());
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            // Group: EyeRight
            CompositionContainerShape^ ContainerShape_061()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 44.0320015F, 30.4619999F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_045());
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            // Group: Group 5
            CompositionContainerShape^ ContainerShape_062()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 34.7270012F, 46.6699982F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_046());
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            // Group: Group 4
            CompositionContainerShape^ ContainerShape_063()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 28.7240009F, 40.6679993F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_047());
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            // Group: Group 3
            CompositionContainerShape^ ContainerShape_064()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 40.7299995F, 40.6679993F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_048());
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            // Group: Group 2
            CompositionContainerShape^ ContainerShape_065()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 34.7270012F, 38.2659988F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_049());
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            // Group: Group 1
            CompositionContainerShape^ ContainerShape_066()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 35.6269989F, 64.6439972F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_050());
                return result;
            }

            // 'PhonePic01_Ending'.Transforms
            //   'PhonePic01_Ending'.Contents
            //     'Flash'.Transforms
            // 'Flash'.Transforms
            CompositionContainerShape^ ContainerShape_067()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 34, 34 };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_068());
                return result;
            }

            // 'PhonePic01_Ending'.Transforms
            //   'PhonePic01_Ending'.Contents
            //     'Flash'.Transforms
            //       'Flash'.Transforms
            // 'Flash'.Contents
            CompositionContainerShape^ ContainerShape_068()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_069());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "(_.Progress < 0.817589581) ? Matrix3x2(0,0,0,0,0,0) : Matrix3x2(1,0,0,1,0,0)";
                _reusableExpressionAnimation->SetReferenceParameter("_", _root);
                result->StartAnimation("TransformMatrix", _reusableExpressionAnimation);
                return result;
            }

            // 'PhonePic01_Ending'.Transforms
            //   'PhonePic01_Ending'.Contents
            //     'Flash'.Transforms
            //       'Flash'.Transforms
            //         'Flash'.Contents
            // Group: Rectangle 1
            CompositionContainerShape^ ContainerShape_069()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_051());
                return result;
            }

            // 'Cursor 2'.AncestorTransformFrom_CursorPic Null
            // 'ScreenOutlineCoverup 2'.AncestorTransformFrom_PhoneShell Outlines 2
            CompositionContainerShape^ ContainerShape_070()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 213, 106.5F };
                result->Scale = { 0.5F, 0.5F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_071());
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            CompositionContainerShape^ ContainerShape_071()
            {
                auto result = _c->CreateContainerShape();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 46.25F, 86.25F });
                propertySet->InsertVector2("Position", { -239, 15 });
                result->CenterPoint = { 46.25F, 86.25F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_072());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position.X", _scalarAnimation_m239_to_0);
                auto controller = result->TryGetAnimationController("Position.X");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Position.Y", _scalarAnimation_15_to_m0p063);
                controller = result->TryGetAnimationController("Position.Y");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Scale", _vector2Animation_000);
                controller = result->TryGetAnimationController("Scale");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            // 'ScreenOutlineCoverup 2'.Transforms
            CompositionContainerShape^ ContainerShape_072()
            {
                auto result = _c->CreateContainerShape();
                result->CenterPoint = { -0.375F, -0.125F };
                result->Offset = { 46.4830017F, 86.4110031F };
                result->Scale = { 1.13636005F, 1.13636005F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_073());
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'ScreenOutlineCoverup 2'.Transforms
            // 'ScreenOutlineCoverup 2'.Contents
            CompositionContainerShape^ ContainerShape_073()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_074());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "(_.Progress < 0.451140076) ? Matrix3x2(0,0,0,0,0,0) : ((_.Progress < 0.908794761) ? Matrix3x2(1,0,0,1,0,0) : Matrix3x2(0,0,0,0,0,0))";
                _reusableExpressionAnimation->SetReferenceParameter("_", _root);
                result->StartAnimation("TransformMatrix", _reusableExpressionAnimation);
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'ScreenOutlineCoverup 2'.Transforms
            //     'ScreenOutlineCoverup 2'.Contents
            // Group: Rectangle 1
            CompositionContainerShape^ ContainerShape_074()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { -0.375F, -0.125F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_052());
                return result;
            }

            // 'Cursor 2'.AncestorTransformFrom_CursorPic Null
            // 'CamButtonFill 2'.AncestorTransformFrom_PhoneShell Outlines 3
            CompositionContainerShape^ ContainerShape_075()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 213, 106.5F };
                result->Scale = { 0.5F, 0.5F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_076());
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            CompositionContainerShape^ ContainerShape_076()
            {
                auto result = _c->CreateContainerShape();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 46.25F, 86.25F });
                propertySet->InsertVector2("Position", { -239, 15 });
                result->CenterPoint = { 46.25F, 86.25F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_077());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position.X", _scalarAnimation_m239_to_0);
                auto controller = result->TryGetAnimationController("Position.X");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Position.Y", _scalarAnimation_15_to_m0p063);
                controller = result->TryGetAnimationController("Position.Y");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Scale", _vector2Animation_000);
                controller = result->TryGetAnimationController("Scale");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            // 'PhoneShell Outlines 3'.Transforms
            CompositionContainerShape^ ContainerShape_077()
            {
                auto result = _c->CreateContainerShape();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 46.25F, 86.25F });
                propertySet->InsertVector2("Position", { 46.25F, 86.25F });
                result->CenterPoint = { 46.25F, 86.25F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_078());
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneShell Outlines 3'.Transforms
            // 'CamButtonFill 2'.Transforms
            CompositionContainerShape^ ContainerShape_078()
            {
                auto result = _c->CreateContainerShape();
                result->CenterPoint = { 0, 58 };
                result->Offset = { 46.25F, 88.5130005F };
                result->Scale = { 0.971589983F, 0.971589983F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_079());
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneShell Outlines 3'.Transforms
            //     'CamButtonFill 2'.Transforms
            // 'CamButtonFill 2'.Contents
            CompositionContainerShape^ ContainerShape_079()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_080());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "(_.Progress < 0.868078172) ? Matrix3x2(0,0,0,0,0,0) : ((_.Progress < 0.908794761) ? Matrix3x2(1,0,0,1,0,0) : Matrix3x2(0,0,0,0,0,0))";
                _reusableExpressionAnimation->SetReferenceParameter("_", _root);
                result->StartAnimation("TransformMatrix", _reusableExpressionAnimation);
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneShell Outlines 3'.Transforms
            //     'CamButtonFill 2'.Transforms
            //       'CamButtonFill 2'.Contents
            // Group: Ellipse 1
            CompositionContainerShape^ ContainerShape_080()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 0, 58 };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_053());
                return result;
            }

            // 'Cursor 2'.AncestorTransformFrom_CursorPic Null
            // 'Cursor 2'.AncestorTransformFrom_CursorPic Null
            CompositionContainerShape^ ContainerShape_081()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 213, 106.5F };
                result->Scale = { 0.5F, 0.5F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_082());
                return result;
            }

            // 'Laptop Null Null'.Transforms
            CompositionContainerShape^ ContainerShape_082()
            {
                auto result = _c->CreateContainerShape();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 0, 0 });
                propertySet->InsertVector2("Position", { 0.125F, 0 });
                result->Scale = { 1.15900004F, 1.15900004F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_083());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position.X", ScalarAnimation_0p125_to_m143p875());
                auto controller = result->TryGetAnimationController("Position.X");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Position.Y", ScalarAnimation_0_to_m7p3());
                controller = result->TryGetAnimationController("Position.Y");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Scale", Vector2Animation_010());
                controller = result->TryGetAnimationController("Scale");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'LaptopNull'.Transforms
            CompositionContainerShape^ ContainerShape_083()
            {
                auto result = _c->CreateContainerShape();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 0, 0 });
                propertySet->InsertVector2("Position", { 47.3470001F, 0 });
                result->Scale = { 0.862810016F, 0.862810016F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_084());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position", Vector2Animation_008());
                auto controller = result->TryGetAnimationController("Position");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Scale", Vector2Animation_009());
                controller = result->TryGetAnimationController("Scale");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'CursorPic Null'.Transforms
            CompositionContainerShape^ ContainerShape_084()
            {
                auto result = _c->CreateContainerShape();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 0, 0 });
                propertySet->InsertVector2("Position", { -0.108000003F, 0 });
                result->Scale = { 0.862810016F, 0.862810016F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_085());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position", Vector2Animation_007());
                auto controller = result->TryGetAnimationController("Position");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'Cursor 2'.Transforms
            CompositionContainerShape^ ContainerShape_085()
            {
                auto result = _c->CreateContainerShape();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { -19.7380009F, -43.25F });
                propertySet->InsertVector2("Position", { 133.261993F, -87.25F });
                result->CenterPoint = { -19.7380009F, -43.25F };
                result->RotationAngleInDegrees = 120.099998F;
                result->Scale = { 0.439999998F, 0.439999998F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_086());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position", Vector2Animation_005());
                auto controller = result->TryGetAnimationController("Position");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Scale", Vector2Animation_006());
                controller = result->TryGetAnimationController("Scale");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("RotationAngleInDegrees", ScalarAnimation_120p1_to_360());
                controller = result->TryGetAnimationController("RotationAngleInDegrees");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'Cursor 2'.Transforms
            // 'Cursor 2'.Contents
            CompositionContainerShape^ ContainerShape_086()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_087());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "(_.Progress < 0.508143306) ? Matrix3x2(0,0,0,0,0,0) : ((_.Progress < 0.540716588) ? Matrix3x2(1,0,0,1,0,0) : Matrix3x2(0,0,0,0,0,0))";
                _reusableExpressionAnimation->SetReferenceParameter("_", _root);
                result->StartAnimation("TransformMatrix", _reusableExpressionAnimation);
                return result;
            }

            // 'Cursor 2'.Transforms
            //   'Cursor 2'.Contents
            // Group: Shape 1
            CompositionContainerShape^ ContainerShape_087()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_054());
                return result;
            }

            // 'LaptopTop'.AncestorTransformFrom_LaptopNull
            CompositionContainerShape^ ContainerShape_088()
            {
                auto result = _c->CreateContainerShape();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 0, 0 });
                propertySet->InsertVector2("Position", { -134.5F, 154 });
                result->Scale = { 0.629999995F, 0.629999995F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_089());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position", Vector2Animation_011());
                auto controller = result->TryGetAnimationController("Position");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Scale", Vector2Animation_012());
                controller = result->TryGetAnimationController("Scale");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'LaptopTop'.AncestorTransformFrom_LaptopNull
            // 'LaptopTop'.Contents
            CompositionContainerShape^ ContainerShape_089()
            {
                auto result = _c->CreateContainerShape();
                result->CenterPoint = { 164.25F, 98.25F };
                result->Offset = { -163.75F, -100.25F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_090());
                shapes->Append(ContainerShape_091());
                return result;
            }

            // 'LaptopTop'.AncestorTransformFrom_LaptopNull
            //   'LaptopTop'.Contents
            // Group: Group 3
            CompositionContainerShape^ ContainerShape_090()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 164.25F, 98.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_055());
                return result;
            }

            // 'LaptopTop'.AncestorTransformFrom_LaptopNull
            //   'LaptopTop'.Contents
            // Group: Group 1
            CompositionContainerShape^ ContainerShape_091()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 164.25F, 100.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_056());
                return result;
            }

            // 'LaptopScreen'.AncestorTransformFrom_LaptopTop
            CompositionContainerShape^ ContainerShape_092()
            {
                auto result = _c->CreateContainerShape();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 0, 0 });
                propertySet->InsertVector2("Position", { -134.5F, 154 });
                result->Scale = { 0.629999995F, 0.629999995F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_093());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position", Vector2Animation_013());
                auto controller = result->TryGetAnimationController("Position");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Scale", _vector2Animation_012);
                controller = result->TryGetAnimationController("Scale");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'LaptopScreen'.AncestorTransformFrom_LaptopTop
            // 'LaptopTop'.Transforms
            CompositionContainerShape^ ContainerShape_093()
            {
                auto result = _c->CreateContainerShape();
                result->CenterPoint = { 164.25F, 98.25F };
                result->Offset = { -163.75F, -100.25F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_094());
                return result;
            }

            // 'LaptopScreen'.AncestorTransformFrom_LaptopTop
            //   'LaptopTop'.Transforms
            // 'LaptopScreen'.Contents
            CompositionContainerShape^ ContainerShape_094()
            {
                auto result = _c->CreateContainerShape();
                result->CenterPoint = { 148.25F, 84.2340012F };
                result->Offset = { 16, 16.0319977F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_095());
                shapes->Append(ContainerShape_096());
                shapes->Append(ContainerShape_097());
                return result;
            }

            // 'LaptopScreen'.AncestorTransformFrom_LaptopTop
            //   'LaptopTop'.Transforms
            //     'LaptopScreen'.Contents
            // Group: Group 3
            CompositionContainerShape^ ContainerShape_095()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 148.25F, 84.2340012F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_057());
                return result;
            }

            // 'LaptopScreen'.AncestorTransformFrom_LaptopTop
            //   'LaptopTop'.Transforms
            //     'LaptopScreen'.Contents
            // Group: Group 2
            CompositionContainerShape^ ContainerShape_096()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 148.25F, 162.218002F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_058());
                return result;
            }

            // 'LaptopScreen'.AncestorTransformFrom_LaptopTop
            //   'LaptopTop'.Transforms
            //     'LaptopScreen'.Contents
            // Group: Group 1
            CompositionContainerShape^ ContainerShape_097()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 6.25F, 162.218002F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_059());
                return result;
            }

            // 'GoldenGate'.AncestorTransformFrom_LaptopTop
            CompositionContainerShape^ ContainerShape_098()
            {
                auto result = _c->CreateContainerShape();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 0, 0 });
                propertySet->InsertVector2("Position", { -134.5F, 154 });
                result->Scale = { 0.629999995F, 0.629999995F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_099());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position", Vector2Animation_015());
                auto controller = result->TryGetAnimationController("Position");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Scale", _vector2Animation_012);
                controller = result->TryGetAnimationController("Scale");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'GoldenGate'.AncestorTransformFrom_LaptopTop
            // 'LaptopTop'.Transforms
            CompositionContainerShape^ ContainerShape_099()
            {
                auto result = _c->CreateContainerShape();
                result->CenterPoint = { 164.25F, 98.25F };
                result->Offset = { -163.75F, -100.25F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_100());
                return result;
            }

            // 'GoldenGate'.Contents
            CompositionContainerShape^ ContainerShape_100()
            {
                auto result = _c->CreateContainerShape();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 106.25F, 89.25F });
                propertySet->InsertVector2("Position", { 164.25F, 121.25F });
                result->CenterPoint = { 106.25F, 89.25F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_101());
                shapes->Append(ContainerShape_102());
                shapes->Append(ContainerShape_103());
                shapes->Append(ContainerShape_104());
                shapes->Append(ContainerShape_105());
                shapes->Append(ContainerShape_106());
                shapes->Append(ContainerShape_107());
                shapes->Append(ContainerShape_108());
                shapes->Append(ContainerShape_109());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position", Vector2Animation_014());
                auto controller = result->TryGetAnimationController("Position");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'GoldenGate'.Contents
            // Group: GreySidebar
            CompositionContainerShape^ ContainerShape_101()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 25.25F, 62.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_060());
                return result;
            }

            // 'GoldenGate'.Contents
            // Group: WhiteMainBG
            CompositionContainerShape^ ContainerShape_102()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 131.25F, 62.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_061());
                return result;
            }

            // 'GoldenGate'.Contents
            // Group: Group 39
            CompositionContainerShape^ ContainerShape_103()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 22.25F, 54.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_062());
                return result;
            }

            // 'GoldenGate'.Contents
            // Group: Group 38
            CompositionContainerShape^ ContainerShape_104()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 16.1959991F, 61.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_063());
                return result;
            }

            // 'GoldenGate'.Contents
            // Group: Group 37
            CompositionContainerShape^ ContainerShape_105()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 16.2299995F, 67.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_064());
                return result;
            }

            // 'GoldenGate'.Contents
            // Group: Group 36
            CompositionContainerShape^ ContainerShape_106()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 16.25F, 73.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_065());
                return result;
            }

            // 'GoldenGate'.Contents
            // Group: Group 35
            CompositionContainerShape^ ContainerShape_107()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 16.2609997F, 115.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_066());
                return result;
            }

            // 'GoldenGate'.Contents
            // Group: Group 34
            CompositionContainerShape^ ContainerShape_108()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 18.25F, 26.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_067());
                return result;
            }

            // 'GoldenGate'.Contents
            // Group: Group 33
            CompositionContainerShape^ ContainerShape_109()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 18.25F, 26.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_068());
                return result;
            }

            // 'PhoneCheckmark'.AncestorTransformFrom_GoldenGate
            CompositionContainerShape^ ContainerShape_110()
            {
                auto result = _c->CreateContainerShape();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 0, 0 });
                propertySet->InsertVector2("Position", { -134.5F, 154 });
                result->Scale = { 0.629999995F, 0.629999995F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_111());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position", Vector2Animation_017());
                auto controller = result->TryGetAnimationController("Position");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Scale", _vector2Animation_012);
                controller = result->TryGetAnimationController("Scale");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'PhoneCheckmark'.AncestorTransformFrom_GoldenGate
            // 'LaptopTop'.Transforms
            CompositionContainerShape^ ContainerShape_111()
            {
                auto result = _c->CreateContainerShape();
                result->CenterPoint = { 164.25F, 98.25F };
                result->Offset = { -163.75F, -100.25F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_112());
                return result;
            }

            // 'GoldenGate'.Transforms
            CompositionContainerShape^ ContainerShape_112()
            {
                auto result = _c->CreateContainerShape();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 106.25F, 89.25F });
                propertySet->InsertVector2("Position", { 164.25F, 121.25F });
                result->CenterPoint = { 106.25F, 89.25F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_113());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position", _vector2Animation_014);
                auto controller = result->TryGetAnimationController("Position");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'GoldenGate'.Transforms
            // 'PhoneCheckmark'.Transforms
            CompositionContainerShape^ ContainerShape_113()
            {
                auto result = _c->CreateContainerShape();
                result->CenterPoint = { 18.25F, 26.25F };
                result->Scale = { 0, 0 };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_114());
                result->StartAnimation("Scale", Vector2Animation_016());
                auto controller = result->TryGetAnimationController("Scale");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PhoneCheckmark'.Transforms
            // 'PhoneCheckmark'.Contents
            CompositionContainerShape^ ContainerShape_114()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_115());
                shapes->Append(ContainerShape_116());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "(_.Progress < 0.355048865) ? Matrix3x2(0,0,0,0,0,0) : Matrix3x2(1,0,0,1,0,0)";
                _reusableExpressionAnimation->SetReferenceParameter("_", _root);
                result->StartAnimation("TransformMatrix", _reusableExpressionAnimation);
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PhoneCheckmark'.Transforms
            //     'PhoneCheckmark'.Contents
            // Group: Group 32
            CompositionContainerShape^ ContainerShape_115()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 18.25F, 26.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_069());
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PhoneCheckmark'.Transforms
            //     'PhoneCheckmark'.Contents
            // Group: Group 31
            CompositionContainerShape^ ContainerShape_116()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 18.25F, 26.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_070());
                return result;
            }

            // 'PicBear'.AncestorTransformFrom_GoldenGate
            CompositionContainerShape^ ContainerShape_117()
            {
                auto result = _c->CreateContainerShape();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 0, 0 });
                propertySet->InsertVector2("Position", { -134.5F, 154 });
                result->Scale = { 0.629999995F, 0.629999995F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_118());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position", Vector2Animation_018());
                auto controller = result->TryGetAnimationController("Position");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Scale", _vector2Animation_012);
                controller = result->TryGetAnimationController("Scale");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'PicBear'.AncestorTransformFrom_GoldenGate
            // 'LaptopTop'.Transforms
            CompositionContainerShape^ ContainerShape_118()
            {
                auto result = _c->CreateContainerShape();
                result->CenterPoint = { 164.25F, 98.25F };
                result->Offset = { -163.75F, -100.25F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_119());
                return result;
            }

            // 'GoldenGate'.Transforms
            CompositionContainerShape^ ContainerShape_119()
            {
                auto result = _c->CreateContainerShape();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 106.25F, 89.25F });
                propertySet->InsertVector2("Position", { 164.25F, 121.25F });
                result->CenterPoint = { 106.25F, 89.25F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_120());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position", _vector2Animation_014);
                auto controller = result->TryGetAnimationController("Position");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'GoldenGate'.Transforms
            // 'PicBear'.Contents
            CompositionContainerShape^ ContainerShape_120()
            {
                auto result = _c->CreateContainerShape();
                result->CenterPoint = { 169.753006F, 116.25F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_121());
                shapes->Append(ContainerShape_122());
                shapes->Append(ContainerShape_123());
                shapes->Append(ContainerShape_124());
                shapes->Append(ContainerShape_125());
                shapes->Append(ContainerShape_126());
                shapes->Append(ContainerShape_127());
                shapes->Append(ContainerShape_128());
                shapes->Append(ContainerShape_129());
                shapes->Append(ContainerShape_130());
                shapes->Append(ContainerShape_131());
                shapes->Append(ContainerShape_132());
                shapes->Append(ContainerShape_133());
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicBear'.Contents
            // Group: Group 13
            CompositionContainerShape^ ContainerShape_121()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 168.25F, 104.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_071());
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicBear'.Contents
            // Group: Group 12
            CompositionContainerShape^ ContainerShape_122()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 168.25F, 120.239998F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_072());
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicBear'.Contents
            // Group: Group 11
            CompositionContainerShape^ ContainerShape_123()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 157.891006F, 112.890999F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_073());
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicBear'.Contents
            // Group: Group 10
            CompositionContainerShape^ ContainerShape_124()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 177.018997F, 112.327003F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_074());
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicBear'.Contents
            // Group: Group 9
            CompositionContainerShape^ ContainerShape_125()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 164.608994F, 98.1480026F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_075());
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicBear'.Contents
            // Group: Group 8
            CompositionContainerShape^ ContainerShape_126()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 189.429993F, 98.1480026F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_076());
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicBear'.Contents
            // Group: Group 7
            CompositionContainerShape^ ContainerShape_127()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 164.608994F, 98.1480026F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_077());
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicBear'.Contents
            // Group: Group 6
            CompositionContainerShape^ ContainerShape_128()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 189.429001F, 98.1480026F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_078());
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicBear'.Contents
            // Group: Group 5
            CompositionContainerShape^ ContainerShape_129()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 177.020004F, 108.301003F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_079());
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicBear'.Contents
            // Group: Group 4
            CompositionContainerShape^ ContainerShape_130()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 177.018997F, 112.814003F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_080());
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicBear'.Contents
            // Group: Group 3
            CompositionContainerShape^ ContainerShape_131()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 177.018997F, 115.635002F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_081());
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicBear'.Contents
            // Group: Group 2
            CompositionContainerShape^ ContainerShape_132()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 170.25F, 107.172997F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_082());
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicBear'.Contents
            // Group: Group 1
            CompositionContainerShape^ ContainerShape_133()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 183.789001F, 107.172997F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_083());
                return result;
            }

            // 'PicFlower'.AncestorTransformFrom_GoldenGate
            CompositionContainerShape^ ContainerShape_134()
            {
                auto result = _c->CreateContainerShape();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 0, 0 });
                propertySet->InsertVector2("Position", { -134.5F, 154 });
                result->Scale = { 0.629999995F, 0.629999995F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_135());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position", Vector2Animation_019());
                auto controller = result->TryGetAnimationController("Position");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Scale", _vector2Animation_012);
                controller = result->TryGetAnimationController("Scale");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'PicFlower'.AncestorTransformFrom_GoldenGate
            // 'LaptopTop'.Transforms
            CompositionContainerShape^ ContainerShape_135()
            {
                auto result = _c->CreateContainerShape();
                result->CenterPoint = { 164.25F, 98.25F };
                result->Offset = { -163.75F, -100.25F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_136());
                return result;
            }

            // 'GoldenGate'.Transforms
            CompositionContainerShape^ ContainerShape_136()
            {
                auto result = _c->CreateContainerShape();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 106.25F, 89.25F });
                propertySet->InsertVector2("Position", { 164.25F, 121.25F });
                result->CenterPoint = { 106.25F, 89.25F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_137());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position", _vector2Animation_014);
                auto controller = result->TryGetAnimationController("Position");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'GoldenGate'.Transforms
            // 'PicFlower'.Contents
            CompositionContainerShape^ ContainerShape_137()
            {
                auto result = _c->CreateContainerShape();
                result->CenterPoint = { 90.5360031F, 119.963997F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_138());
                shapes->Append(ContainerShape_139());
                shapes->Append(ContainerShape_140());
                shapes->Append(ContainerShape_141());
                shapes->Append(ContainerShape_142());
                shapes->Append(ContainerShape_143());
                shapes->Append(ContainerShape_144());
                shapes->Append(ContainerShape_145());
                shapes->Append(ContainerShape_146());
                shapes->Append(ContainerShape_147());
                shapes->Append(ContainerShape_148());
                shapes->Append(ContainerShape_149());
                shapes->Append(ContainerShape_150());
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicFlower'.Contents
            // Group: Group 30
            CompositionContainerShape^ ContainerShape_138()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 92.25F, 104.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_084());
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicFlower'.Contents
            // Group: Group 29
            CompositionContainerShape^ ContainerShape_139()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 92.25F, 109.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_085());
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicFlower'.Contents
            // Group: Group 28
            CompositionContainerShape^ ContainerShape_140()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 92.25F, 112.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_086());
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicFlower'.Contents
            // Group: Group 27
            CompositionContainerShape^ ContainerShape_141()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 92.25F, 122.963997F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_087());
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicFlower'.Contents
            // Group: Group 26
            CompositionContainerShape^ ContainerShape_142()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 99.9639969F, 116.880997F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_088());
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicFlower'.Contents
            // Group: Group 25
            CompositionContainerShape^ ContainerShape_143()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 84.5360031F, 116.879997F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_089());
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicFlower'.Contents
            // Group: Group 24
            CompositionContainerShape^ ContainerShape_144()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 92.25F, 107.963997F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_090());
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicFlower'.Contents
            // Group: Group 23
            CompositionContainerShape^ ContainerShape_145()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 104.249001F, 119.964996F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_091());
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicFlower'.Contents
            // Group: Group 22
            CompositionContainerShape^ ContainerShape_146()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 102.535004F, 111.392998F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_092());
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicFlower'.Contents
            // Group: Group 21
            CompositionContainerShape^ ContainerShape_147()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 80.2509995F, 119.963997F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_093());
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicFlower'.Contents
            // Group: Group 20
            CompositionContainerShape^ ContainerShape_148()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 81.9649963F, 111.392998F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_094());
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicFlower'.Contents
            // Group: Group 19
            CompositionContainerShape^ ContainerShape_149()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 92.25F, 118.679001F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_095());
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicFlower'.Contents
            // Group: Group 18
            CompositionContainerShape^ ContainerShape_150()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 92.25F, 119.963997F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_096());
                return result;
            }

            // 'PicMountains'.AncestorTransformFrom_GoldenGate
            CompositionContainerShape^ ContainerShape_151()
            {
                auto result = _c->CreateContainerShape();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 0, 0 });
                propertySet->InsertVector2("Position", { -134.5F, 154 });
                result->Scale = { 0.629999995F, 0.629999995F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_152());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position", Vector2Animation_020());
                auto controller = result->TryGetAnimationController("Position");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Scale", _vector2Animation_012);
                controller = result->TryGetAnimationController("Scale");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'PicMountains'.AncestorTransformFrom_GoldenGate
            // 'LaptopTop'.Transforms
            CompositionContainerShape^ ContainerShape_152()
            {
                auto result = _c->CreateContainerShape();
                result->CenterPoint = { 164.25F, 98.25F };
                result->Offset = { -163.75F, -100.25F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_153());
                return result;
            }

            // 'GoldenGate'.Transforms
            CompositionContainerShape^ ContainerShape_153()
            {
                auto result = _c->CreateContainerShape();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 106.25F, 89.25F });
                propertySet->InsertVector2("Position", { 164.25F, 121.25F });
                result->CenterPoint = { 106.25F, 89.25F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_154());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position", _vector2Animation_014);
                auto controller = result->TryGetAnimationController("Position");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'GoldenGate'.Transforms
            // 'PicMountains'.Contents
            CompositionContainerShape^ ContainerShape_154()
            {
                auto result = _c->CreateContainerShape();
                result->CenterPoint = { 168.25F, 42.25F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_155());
                shapes->Append(ContainerShape_156());
                shapes->Append(ContainerShape_157());
                shapes->Append(ContainerShape_158());
                shapes->Append(ContainerShape_159());
                shapes->Append(ContainerShape_160());
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicMountains'.Contents
            // Group: Sky
            CompositionContainerShape^ ContainerShape_155()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 168.25F, 42.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_097());
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicMountains'.Contents
            // Group: MountianRight
            CompositionContainerShape^ ContainerShape_156()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 183.25F, 58.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_098());
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicMountains'.Contents
            // Group: MountianRightSnow
            CompositionContainerShape^ ContainerShape_157()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 183.25F, 58.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_099());
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicMountains'.Contents
            // Group: MountainLeft
            CompositionContainerShape^ ContainerShape_158()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 168.25F, 52.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_100());
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicMountains'.Contents
            // Group: MountainLeftSnow
            CompositionContainerShape^ ContainerShape_159()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 168.25F, 52.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_101());
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicMountains'.Contents
            // Group: Sun
            CompositionContainerShape^ ContainerShape_160()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 182.25F, 18.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_102());
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PhonePic01 InApp'.Transforms
            //     'PhonePic01 InApp'.Contents
            //       'Flash'.Transforms
            // 'PurpleBG'.Transforms
            CompositionContainerShape^ ContainerShape_161()
            {
                auto result = _c->CreateContainerShape();
                result->CenterPoint = { 39.25F, 43.25F };
                result->Offset = { -0.25F, -0.25F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_162());
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PhonePic01 InApp'.Transforms
            //     'PhonePic01 InApp'.Contents
            //       'Flash'.Transforms
            //         'PurpleBG'.Transforms
            // 'PurpleBG'.Contents
            CompositionContainerShape^ ContainerShape_162()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_163());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "(_.Progress < 0.00162866444) ? Matrix3x2(0,0,0,0,0,0) : Matrix3x2(1,0,0,1,0,0)";
                _reusableExpressionAnimation->SetReferenceParameter("_", _root);
                result->StartAnimation("TransformMatrix", _reusableExpressionAnimation);
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PhonePic01 InApp'.Transforms
            //     'PhonePic01 InApp'.Contents
            //       'Flash'.Transforms
            //         'PurpleBG'.Transforms
            //           'PurpleBG'.Contents
            // Group: Group 11
            CompositionContainerShape^ ContainerShape_163()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 34.25F, 34.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_103());
                return result;
            }

            // 'Cat'.Transforms
            CompositionContainerShape^ ContainerShape_164()
            {
                auto result = _c->CreateContainerShape();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 39.25F, 43.25F });
                propertySet->InsertVector2("Position", { 39.625F, 37.75F });
                result->CenterPoint = { 39.25F, 43.25F };
                result->Scale = { 0.751999974F, 0.751999974F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_165());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position", Vector2Animation_021());
                auto controller = result->TryGetAnimationController("Position");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Scale", Vector2Animation_022());
                controller = result->TryGetAnimationController("Scale");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'Cat'.Transforms
            // 'Cat'.Contents
            CompositionContainerShape^ ContainerShape_165()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_166());
                shapes->Append(ContainerShape_167());
                shapes->Append(ContainerShape_168());
                shapes->Append(ContainerShape_169());
                shapes->Append(ContainerShape_170());
                shapes->Append(ContainerShape_171());
                shapes->Append(ContainerShape_172());
                shapes->Append(ContainerShape_173());
                shapes->Append(ContainerShape_174());
                shapes->Append(ContainerShape_175());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "(_.Progress < 0.00162866444) ? Matrix3x2(0,0,0,0,0,0) : Matrix3x2(1,0,0,1,0,0)";
                _reusableExpressionAnimation->SetReferenceParameter("_", _root);
                result->StartAnimation("TransformMatrix", _reusableExpressionAnimation);
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            // Group: Group 10
            CompositionContainerShape^ ContainerShape_166()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 29.3239994F, 24.1590004F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_104());
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            // Group: Group 9
            CompositionContainerShape^ ContainerShape_167()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 39.5289993F, 24.1590004F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_105());
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            // Group: Group 8
            CompositionContainerShape^ ContainerShape_168()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 40.8320007F, 43.5419998F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_106());
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            // Group: EyeLeft
            CompositionContainerShape^ ContainerShape_169()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 25.4220009F, 30.4619999F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_107());
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            // Group: EyeRight
            CompositionContainerShape^ ContainerShape_170()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 44.0320015F, 30.4619999F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_108());
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            // Group: Group 5
            CompositionContainerShape^ ContainerShape_171()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 34.7270012F, 46.6699982F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_109());
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            // Group: Group 4
            CompositionContainerShape^ ContainerShape_172()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 28.7240009F, 40.6679993F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_110());
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            // Group: Group 3
            CompositionContainerShape^ ContainerShape_173()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 40.7299995F, 40.6679993F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_111());
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            // Group: Group 2
            CompositionContainerShape^ ContainerShape_174()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 34.7270012F, 38.2659988F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_112());
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            // Group: Group 1
            CompositionContainerShape^ ContainerShape_175()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 35.6269989F, 64.6439972F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_113());
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PhonePic01 InApp'.Transforms
            //     'PhonePic01 InApp'.Contents
            //       'Flash'.Transforms
            // 'Flash'.Transforms
            CompositionContainerShape^ ContainerShape_176()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 34, 34 };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_177());
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PhonePic01 InApp'.Transforms
            //     'PhonePic01 InApp'.Contents
            //       'Flash'.Transforms
            //         'Flash'.Transforms
            // 'Flash'.Contents
            CompositionContainerShape^ ContainerShape_177()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_178());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "(_.Progress < 0.00162866444) ? Matrix3x2(0,0,0,0,0,0) : Matrix3x2(1,0,0,1,0,0)";
                _reusableExpressionAnimation->SetReferenceParameter("_", _root);
                result->StartAnimation("TransformMatrix", _reusableExpressionAnimation);
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PhonePic01 InApp'.Transforms
            //     'PhonePic01 InApp'.Contents
            //       'Flash'.Transforms
            //         'Flash'.Transforms
            //           'Flash'.Contents
            // Group: Rectangle 1
            CompositionContainerShape^ ContainerShape_178()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_114());
                return result;
            }

            // 'ScreenOutlineCoverup'.AncestorTransformFrom_LaptopNull
            CompositionContainerShape^ ContainerShape_179()
            {
                auto result = _c->CreateContainerShape();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 0, 0 });
                propertySet->InsertVector2("Position", { -134.5F, 154 });
                result->Scale = { 0.629999995F, 0.629999995F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_180());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position", Vector2Animation_024());
                auto controller = result->TryGetAnimationController("Position");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Scale", _vector2Animation_012);
                controller = result->TryGetAnimationController("Scale");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'ScreenOutlineCoverup'.AncestorTransformFrom_LaptopNull
            // 'ScreenOutlineCoverup'.Contents
            CompositionContainerShape^ ContainerShape_180()
            {
                auto result = _c->CreateContainerShape();
                result->CenterPoint = { -0.375F, -0.125F };
                result->Offset = { 0.75F, 0.125F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_181());
                return result;
            }

            // 'ScreenOutlineCoverup'.AncestorTransformFrom_LaptopNull
            //   'ScreenOutlineCoverup'.Contents
            // Group: Rectangle 1
            CompositionContainerShape^ ContainerShape_181()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { -0.375F, -0.125F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_115());
                return result;
            }

            // 'LaptopBottom'.AncestorTransformFrom_LaptopNull
            CompositionContainerShape^ ContainerShape_182()
            {
                auto result = _c->CreateContainerShape();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 0, 0 });
                propertySet->InsertVector2("Position", { -134.5F, 154 });
                result->Scale = { 0.629999995F, 0.629999995F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_183());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position", Vector2Animation_025());
                auto controller = result->TryGetAnimationController("Position");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Scale", _vector2Animation_012);
                controller = result->TryGetAnimationController("Scale");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'LaptopBottom'.AncestorTransformFrom_LaptopNull
            // 'LaptopBottom'.Contents
            CompositionContainerShape^ ContainerShape_183()
            {
                auto result = _c->CreateContainerShape();
                result->CenterPoint = { 200.25F, 8.25F };
                result->Offset = { -199.75F, 95.75F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_184());
                shapes->Append(ContainerShape_185());
                shapes->Append(ContainerShape_186());
                return result;
            }

            // 'LaptopBottom'.AncestorTransformFrom_LaptopNull
            //   'LaptopBottom'.Contents
            // Group: Group 5
            CompositionContainerShape^ ContainerShape_184()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 200.25F, 6.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_116());
                return result;
            }

            // 'LaptopBottom'.AncestorTransformFrom_LaptopNull
            //   'LaptopBottom'.Contents
            // Group: Group 4
            CompositionContainerShape^ ContainerShape_185()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 200.25F, 14.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_117());
                return result;
            }

            // 'LaptopBottom'.AncestorTransformFrom_LaptopNull
            //   'LaptopBottom'.Contents
            // Group: Group 3
            CompositionContainerShape^ ContainerShape_186()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 200.25F, 2.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_118());
                return result;
            }

            // 'PhonePic01'.AncestorTransformFrom_LaptopNull
            //   'PhonePic01'.Transforms
            //     'PhonePic01'.Contents
            //       'Flash'.Transforms
            // 'PurpleBG'.Transforms
            CompositionContainerShape^ ContainerShape_187()
            {
                auto result = _c->CreateContainerShape();
                result->CenterPoint = { 39.25F, 43.25F };
                result->Offset = { -0.25F, -0.25F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_188());
                return result;
            }

            // 'PhonePic01'.AncestorTransformFrom_LaptopNull
            //   'PhonePic01'.Transforms
            //     'PhonePic01'.Contents
            //       'Flash'.Transforms
            //         'PurpleBG'.Transforms
            // 'PurpleBG'.Contents
            CompositionContainerShape^ ContainerShape_188()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_189());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "(_.Progress < 0.00162866444) ? Matrix3x2(0,0,0,0,0,0) : Matrix3x2(1,0,0,1,0,0)";
                _reusableExpressionAnimation->SetReferenceParameter("_", _root);
                result->StartAnimation("TransformMatrix", _reusableExpressionAnimation);
                return result;
            }

            // 'PhonePic01'.AncestorTransformFrom_LaptopNull
            //   'PhonePic01'.Transforms
            //     'PhonePic01'.Contents
            //       'Flash'.Transforms
            //         'PurpleBG'.Transforms
            //           'PurpleBG'.Contents
            // Group: Group 11
            CompositionContainerShape^ ContainerShape_189()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 34.25F, 34.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_119());
                return result;
            }

            // 'Cat'.Transforms
            CompositionContainerShape^ ContainerShape_190()
            {
                auto result = _c->CreateContainerShape();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 39.25F, 43.25F });
                propertySet->InsertVector2("Position", { 39.625F, 37.75F });
                result->CenterPoint = { 39.25F, 43.25F };
                result->Scale = { 0.751999974F, 0.751999974F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_191());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position", Vector2Animation_026());
                auto controller = result->TryGetAnimationController("Position");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Scale", _vector2Animation_022);
                controller = result->TryGetAnimationController("Scale");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'Cat'.Transforms
            // 'Cat'.Contents
            CompositionContainerShape^ ContainerShape_191()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_192());
                shapes->Append(ContainerShape_193());
                shapes->Append(ContainerShape_194());
                shapes->Append(ContainerShape_195());
                shapes->Append(ContainerShape_196());
                shapes->Append(ContainerShape_197());
                shapes->Append(ContainerShape_198());
                shapes->Append(ContainerShape_199());
                shapes->Append(ContainerShape_200());
                shapes->Append(ContainerShape_201());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "(_.Progress < 0.00162866444) ? Matrix3x2(0,0,0,0,0,0) : Matrix3x2(1,0,0,1,0,0)";
                _reusableExpressionAnimation->SetReferenceParameter("_", _root);
                result->StartAnimation("TransformMatrix", _reusableExpressionAnimation);
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            // Group: Group 10
            CompositionContainerShape^ ContainerShape_192()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 29.3239994F, 24.1590004F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_120());
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            // Group: Group 9
            CompositionContainerShape^ ContainerShape_193()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 39.5289993F, 24.1590004F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_121());
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            // Group: Group 8
            CompositionContainerShape^ ContainerShape_194()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 40.8320007F, 43.5419998F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_122());
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            // Group: EyeLeft
            CompositionContainerShape^ ContainerShape_195()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 25.4220009F, 30.4619999F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_123());
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            // Group: EyeRight
            CompositionContainerShape^ ContainerShape_196()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 44.0320015F, 30.4619999F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_124());
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            // Group: Group 5
            CompositionContainerShape^ ContainerShape_197()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 34.7270012F, 46.6699982F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_125());
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            // Group: Group 4
            CompositionContainerShape^ ContainerShape_198()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 28.7240009F, 40.6679993F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_126());
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            // Group: Group 3
            CompositionContainerShape^ ContainerShape_199()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 40.7299995F, 40.6679993F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_127());
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            // Group: Group 2
            CompositionContainerShape^ ContainerShape_200()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 34.7270012F, 38.2659988F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_128());
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            // Group: Group 1
            CompositionContainerShape^ ContainerShape_201()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 35.6269989F, 64.6439972F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_129());
                return result;
            }

            // 'PhonePic01'.AncestorTransformFrom_LaptopNull
            //   'PhonePic01'.Transforms
            //     'PhonePic01'.Contents
            //       'Flash'.Transforms
            // 'Flash'.Transforms
            CompositionContainerShape^ ContainerShape_202()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 34, 34 };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_203());
                return result;
            }

            // 'PhonePic01'.AncestorTransformFrom_LaptopNull
            //   'PhonePic01'.Transforms
            //     'PhonePic01'.Contents
            //       'Flash'.Transforms
            //         'Flash'.Transforms
            // 'Flash'.Contents
            CompositionContainerShape^ ContainerShape_203()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_204());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "(_.Progress < 0.00162866444) ? Matrix3x2(0,0,0,0,0,0) : Matrix3x2(1,0,0,1,0,0)";
                _reusableExpressionAnimation->SetReferenceParameter("_", _root);
                result->StartAnimation("TransformMatrix", _reusableExpressionAnimation);
                return result;
            }

            // 'PhonePic01'.AncestorTransformFrom_LaptopNull
            //   'PhonePic01'.Transforms
            //     'PhonePic01'.Contents
            //       'Flash'.Transforms
            //         'Flash'.Transforms
            //           'Flash'.Contents
            // Group: Rectangle 1
            CompositionContainerShape^ ContainerShape_204()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_130());
                return result;
            }

            // 'PicShadow'.AncestorTransformFrom_PhonePic01
            // 'FlashCircle'.AncestorTransformFrom_PhoneShell Outlines
            CompositionContainerShape^ ContainerShape_205()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 213, 106.5F };
                result->Scale = { 0.5F, 0.5F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_206());
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            CompositionContainerShape^ ContainerShape_206()
            {
                auto result = _c->CreateContainerShape();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 46.25F, 86.25F });
                propertySet->InsertVector2("Position", { 0, -0.063000001F });
                result->CenterPoint = { 46.25F, 86.25F };
                result->Scale = { 1.75999999F, 1.75999999F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_207());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position", Vector2Animation_031());
                auto controller = result->TryGetAnimationController("Position");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Scale", Vector2Animation_032());
                controller = result->TryGetAnimationController("Scale");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            // 'FlashCircle'.Transforms
            CompositionContainerShape^ ContainerShape_207()
            {
                auto result = _c->CreateContainerShape();
                result->CenterPoint = { 60, -132 };
                result->Offset = { 21.4769974F, 142.149002F };
                result->RotationAngleInDegrees = 45;
                result->Scale = { 0.568180025F, 0.568180025F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_208());
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'FlashCircle'.Transforms
            // 'FlashCircle'.Contents
            CompositionContainerShape^ ContainerShape_208()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_209());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "(_.Progress < 0.102605864) ? Matrix3x2(0,0,0,0,0,0) : ((_.Progress < 0.144951135) ? Matrix3x2(1,0,0,1,0,0) : Matrix3x2(0,0,0,0,0,0))";
                _reusableExpressionAnimation->SetReferenceParameter("_", _root);
                result->StartAnimation("TransformMatrix", _reusableExpressionAnimation);
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'FlashCircle'.Transforms
            //     'FlashCircle'.Contents
            // Group: Ellipse 1
            CompositionContainerShape^ ContainerShape_209()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 60, -132 };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_131());
                return result;
            }

            // 'PicShadow'.AncestorTransformFrom_PhonePic01
            // 'FlashLine01'.AncestorTransformFrom_PhoneShell Outlines
            CompositionContainerShape^ ContainerShape_210()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 213, 106.5F };
                result->Scale = { 0.5F, 0.5F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_211());
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            CompositionContainerShape^ ContainerShape_211()
            {
                auto result = _c->CreateContainerShape();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 46.25F, 86.25F });
                propertySet->InsertVector2("Position", { 0, -0.063000001F });
                result->CenterPoint = { 46.25F, 86.25F };
                result->Scale = { 1.75999999F, 1.75999999F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_212());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position", Vector2Animation_033());
                auto controller = result->TryGetAnimationController("Position");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Scale", _vector2Animation_032);
                controller = result->TryGetAnimationController("Scale");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            // 'FlashLine01'.Transforms
            CompositionContainerShape^ ContainerShape_212()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 81.4769974F, 10.1490002F };
                result->RotationAngleInDegrees = 45;
                result->Scale = { 0.568180025F, 0.568180025F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_213());
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'FlashLine01'.Transforms
            // 'FlashLine01'.Contents
            CompositionContainerShape^ ContainerShape_213()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_214());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "(_.Progress < 0.102605864) ? Matrix3x2(0,0,0,0,0,0) : ((_.Progress < 0.144951135) ? Matrix3x2(1,0,0,1,0,0) : Matrix3x2(0,0,0,0,0,0))";
                _reusableExpressionAnimation->SetReferenceParameter("_", _root);
                result->StartAnimation("TransformMatrix", _reusableExpressionAnimation);
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'FlashLine01'.Transforms
            //     'FlashLine01'.Contents
            // Group: Rectangle 1
            CompositionContainerShape^ ContainerShape_214()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_132());
                return result;
            }

            // 'PicShadow'.AncestorTransformFrom_PhonePic01
            // 'FlashLine02'.AncestorTransformFrom_PhoneShell Outlines
            CompositionContainerShape^ ContainerShape_215()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 213, 106.5F };
                result->Scale = { 0.5F, 0.5F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_216());
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            CompositionContainerShape^ ContainerShape_216()
            {
                auto result = _c->CreateContainerShape();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 46.25F, 86.25F });
                propertySet->InsertVector2("Position", { 0, -0.063000001F });
                result->CenterPoint = { 46.25F, 86.25F };
                result->Scale = { 1.75999999F, 1.75999999F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_217());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position", Vector2Animation_034());
                auto controller = result->TryGetAnimationController("Position");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Scale", _vector2Animation_032);
                controller = result->TryGetAnimationController("Scale");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            // 'FlashLine02'.Transforms
            CompositionContainerShape^ ContainerShape_217()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 81.4769974F, 10.1490002F };
                result->Scale = { 0.568180025F, 0.568180025F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_218());
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'FlashLine02'.Transforms
            // 'FlashLine02'.Contents
            CompositionContainerShape^ ContainerShape_218()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_219());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "(_.Progress < 0.102605864) ? Matrix3x2(0,0,0,0,0,0) : ((_.Progress < 0.144951135) ? Matrix3x2(1,0,0,1,0,0) : Matrix3x2(0,0,0,0,0,0))";
                _reusableExpressionAnimation->SetReferenceParameter("_", _root);
                result->StartAnimation("TransformMatrix", _reusableExpressionAnimation);
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'FlashLine02'.Transforms
            //     'FlashLine02'.Contents
            // Group: Rectangle 1
            CompositionContainerShape^ ContainerShape_219()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_133());
                return result;
            }

            // 'PicShadow'.AncestorTransformFrom_PhonePic01
            // 'FlashLine04'.AncestorTransformFrom_PhoneShell Outlines
            CompositionContainerShape^ ContainerShape_220()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 213, 106.5F };
                result->Scale = { 0.5F, 0.5F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_221());
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            CompositionContainerShape^ ContainerShape_221()
            {
                auto result = _c->CreateContainerShape();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 46.25F, 86.25F });
                propertySet->InsertVector2("Position", { 0, -0.063000001F });
                result->CenterPoint = { 46.25F, 86.25F };
                result->Scale = { 1.75999999F, 1.75999999F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_222());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position", Vector2Animation_035());
                auto controller = result->TryGetAnimationController("Position");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Scale", _vector2Animation_032);
                controller = result->TryGetAnimationController("Scale");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            // 'FlashLine04'.Transforms
            CompositionContainerShape^ ContainerShape_222()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 81.4769974F, 10.1490002F };
                result->RotationAngleInDegrees = -45;
                result->Scale = { 0.568180025F, 0.568180025F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_223());
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'FlashLine04'.Transforms
            // 'FlashLine04'.Contents
            CompositionContainerShape^ ContainerShape_223()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_224());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "(_.Progress < 0.102605864) ? Matrix3x2(0,0,0,0,0,0) : ((_.Progress < 0.144951135) ? Matrix3x2(1,0,0,1,0,0) : Matrix3x2(0,0,0,0,0,0))";
                _reusableExpressionAnimation->SetReferenceParameter("_", _root);
                result->StartAnimation("TransformMatrix", _reusableExpressionAnimation);
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'FlashLine04'.Transforms
            //     'FlashLine04'.Contents
            // Group: Rectangle 1
            CompositionContainerShape^ ContainerShape_224()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_134());
                return result;
            }

            // 'PicShadow'.AncestorTransformFrom_PhonePic01
            // 'FlashLine03'.AncestorTransformFrom_PhoneShell Outlines
            CompositionContainerShape^ ContainerShape_225()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 213, 106.5F };
                result->Scale = { 0.5F, 0.5F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_226());
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            CompositionContainerShape^ ContainerShape_226()
            {
                auto result = _c->CreateContainerShape();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 46.25F, 86.25F });
                propertySet->InsertVector2("Position", { 0, -0.063000001F });
                result->CenterPoint = { 46.25F, 86.25F };
                result->Scale = { 1.75999999F, 1.75999999F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_227());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position", Vector2Animation_036());
                auto controller = result->TryGetAnimationController("Position");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Scale", _vector2Animation_032);
                controller = result->TryGetAnimationController("Scale");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            // 'FlashLine03'.Transforms
            CompositionContainerShape^ ContainerShape_227()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 81.4769974F, 10.1490002F };
                result->RotationAngleInDegrees = -90;
                result->Scale = { 0.568180025F, 0.568180025F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_228());
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'FlashLine03'.Transforms
            // 'FlashLine03'.Contents
            CompositionContainerShape^ ContainerShape_228()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_229());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "(_.Progress < 0.102605864) ? Matrix3x2(0,0,0,0,0,0) : ((_.Progress < 0.144951135) ? Matrix3x2(1,0,0,1,0,0) : Matrix3x2(0,0,0,0,0,0))";
                _reusableExpressionAnimation->SetReferenceParameter("_", _root);
                result->StartAnimation("TransformMatrix", _reusableExpressionAnimation);
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'FlashLine03'.Transforms
            //     'FlashLine03'.Contents
            // Group: Rectangle 1
            CompositionContainerShape^ ContainerShape_229()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_135());
                return result;
            }

            // 'PicShadow'.AncestorTransformFrom_PhonePic01
            // 'FlashLine05'.AncestorTransformFrom_PhoneShell Outlines
            CompositionContainerShape^ ContainerShape_230()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 213, 106.5F };
                result->Scale = { 0.5F, 0.5F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_231());
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            CompositionContainerShape^ ContainerShape_231()
            {
                auto result = _c->CreateContainerShape();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 46.25F, 86.25F });
                propertySet->InsertVector2("Position", { 0, -0.063000001F });
                result->CenterPoint = { 46.25F, 86.25F };
                result->Scale = { 1.75999999F, 1.75999999F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_232());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position", Vector2Animation_037());
                auto controller = result->TryGetAnimationController("Position");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Scale", _vector2Animation_032);
                controller = result->TryGetAnimationController("Scale");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            // 'FlashLine05'.Transforms
            CompositionContainerShape^ ContainerShape_232()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 81.4769974F, 10.1490002F };
                result->RotationAngleInDegrees = -135;
                result->Scale = { 0.568180025F, 0.568180025F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_233());
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'FlashLine05'.Transforms
            // 'FlashLine05'.Contents
            CompositionContainerShape^ ContainerShape_233()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_234());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "(_.Progress < 0.102605864) ? Matrix3x2(0,0,0,0,0,0) : ((_.Progress < 0.144951135) ? Matrix3x2(1,0,0,1,0,0) : Matrix3x2(0,0,0,0,0,0))";
                _reusableExpressionAnimation->SetReferenceParameter("_", _root);
                result->StartAnimation("TransformMatrix", _reusableExpressionAnimation);
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'FlashLine05'.Transforms
            //     'FlashLine05'.Contents
            // Group: Rectangle 1
            CompositionContainerShape^ ContainerShape_234()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_136());
                return result;
            }

            // 'PicShadow'.AncestorTransformFrom_PhonePic01
            // 'PicShadow'.AncestorTransformFrom_PhonePic01
            CompositionContainerShape^ ContainerShape_235()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 213, 106.5F };
                result->Scale = { 0.5F, 0.5F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_236());
                return result;
            }

            // 'Laptop Null Null'.Transforms
            CompositionContainerShape^ ContainerShape_236()
            {
                auto result = _c->CreateContainerShape();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 0, 0 });
                propertySet->InsertVector2("Position", { 0.125F, 0 });
                result->Scale = { 1.15900004F, 1.15900004F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_237());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position.X", _scalarAnimation_0p125_to_m143p875);
                auto controller = result->TryGetAnimationController("Position.X");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Position.Y", _scalarAnimation_0_to_m7p3);
                controller = result->TryGetAnimationController("Position.Y");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Scale", _vector2Animation_010);
                controller = result->TryGetAnimationController("Scale");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'LaptopNull'.Transforms
            CompositionContainerShape^ ContainerShape_237()
            {
                auto result = _c->CreateContainerShape();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 0, 0 });
                propertySet->InsertVector2("Position", { 47.3470001F, 0 });
                result->Scale = { 0.862810016F, 0.862810016F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_238());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position", Vector2Animation_043());
                auto controller = result->TryGetAnimationController("Position");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Scale", _vector2Animation_009);
                controller = result->TryGetAnimationController("Scale");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'CursorPic Null'.Transforms
            CompositionContainerShape^ ContainerShape_238()
            {
                auto result = _c->CreateContainerShape();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 0, 0 });
                propertySet->InsertVector2("Position", { -0.108000003F, 0 });
                result->Scale = { 0.862810016F, 0.862810016F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_239());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position", Vector2Animation_042());
                auto controller = result->TryGetAnimationController("Position");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'PhonePic01 Null'.Transforms
            CompositionContainerShape^ ContainerShape_239()
            {
                auto result = _c->CreateContainerShape();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 0, 0 });
                propertySet->InsertVector2("Position", { 3.5F, -23 });
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_240());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position", Vector2Animation_040());
                auto controller = result->TryGetAnimationController("Position");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Scale", Vector2Animation_041());
                controller = result->TryGetAnimationController("Scale");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'PhonePic01'.Transforms
            CompositionContainerShape^ ContainerShape_240()
            {
                auto result = _c->CreateContainerShape();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 34, 34 });
                propertySet->InsertVector2("Position", { -92.6179962F, -32.632F });
                result->CenterPoint = { 34, 34 };
                result->Scale = { 1.76168001F, 1.76168001F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_241());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position.X", ScalarAnimation_m92p618_to_m19p593());
                auto controller = result->TryGetAnimationController("Position.X");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Position.Y", ScalarAnimation_m32p632_to_m19p883());
                controller = result->TryGetAnimationController("Position.Y");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Scale", Vector2Animation_039());
                controller = result->TryGetAnimationController("Scale");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'PicShadow'.Transforms
            CompositionContainerShape^ ContainerShape_241()
            {
                auto result = _c->CreateContainerShape();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { -15.25F, -41.25F });
                propertySet->InsertVector2("Position", { 33.8499985F, 33.8849983F });
                result->CenterPoint = { -15.25F, -41.25F };
                result->Scale = { 0.701759994F, 0.701759994F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_242());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position", Vector2Animation_038());
                auto controller = result->TryGetAnimationController("Position");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'PicShadow'.Transforms
            // 'PicShadow'.Contents
            CompositionContainerShape^ ContainerShape_242()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_243());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "(_.Progress < 0.640065134) ? Matrix3x2(0,0,0,0,0,0) : ((_.Progress < 0.780130267) ? Matrix3x2(1,0,0,1,0,0) : Matrix3x2(0,0,0,0,0,0))";
                _reusableExpressionAnimation->SetReferenceParameter("_", _root);
                result->StartAnimation("TransformMatrix", _reusableExpressionAnimation);
                return result;
            }

            // 'PicShadow'.Transforms
            //   'PicShadow'.Contents
            // Group: Rectangle 1
            CompositionContainerShape^ ContainerShape_243()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { -15.25F, -41.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_137());
                return result;
            }

            // 'PhonePic01'.Transforms
            //   'PhonePic01'.Contents
            //     'Flash'.Transforms
            // 'PurpleBG'.Transforms
            CompositionContainerShape^ ContainerShape_244()
            {
                auto result = _c->CreateContainerShape();
                result->CenterPoint = { 39.25F, 43.25F };
                result->Offset = { -0.25F, -0.25F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_245());
                return result;
            }

            // 'PhonePic01'.Transforms
            //   'PhonePic01'.Contents
            //     'Flash'.Transforms
            //       'PurpleBG'.Transforms
            // 'PurpleBG'.Contents
            CompositionContainerShape^ ContainerShape_245()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_246());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "(_.Progress < 0.00162866444) ? Matrix3x2(0,0,0,0,0,0) : Matrix3x2(1,0,0,1,0,0)";
                _reusableExpressionAnimation->SetReferenceParameter("_", _root);
                result->StartAnimation("TransformMatrix", _reusableExpressionAnimation);
                return result;
            }

            // 'PhonePic01'.Transforms
            //   'PhonePic01'.Contents
            //     'Flash'.Transforms
            //       'PurpleBG'.Transforms
            //         'PurpleBG'.Contents
            // Group: Group 11
            CompositionContainerShape^ ContainerShape_246()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 34.25F, 34.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_138());
                return result;
            }

            // 'Cat'.Transforms
            CompositionContainerShape^ ContainerShape_247()
            {
                auto result = _c->CreateContainerShape();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 39.25F, 43.25F });
                propertySet->InsertVector2("Position", { 39.625F, 37.75F });
                result->CenterPoint = { 39.25F, 43.25F };
                result->Scale = { 0.751999974F, 0.751999974F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_248());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position", Vector2Animation_044());
                auto controller = result->TryGetAnimationController("Position");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Scale", _vector2Animation_022);
                controller = result->TryGetAnimationController("Scale");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'Cat'.Transforms
            // 'Cat'.Contents
            CompositionContainerShape^ ContainerShape_248()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_249());
                shapes->Append(ContainerShape_250());
                shapes->Append(ContainerShape_251());
                shapes->Append(ContainerShape_252());
                shapes->Append(ContainerShape_253());
                shapes->Append(ContainerShape_254());
                shapes->Append(ContainerShape_255());
                shapes->Append(ContainerShape_256());
                shapes->Append(ContainerShape_257());
                shapes->Append(ContainerShape_258());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "(_.Progress < 0.00162866444) ? Matrix3x2(0,0,0,0,0,0) : Matrix3x2(1,0,0,1,0,0)";
                _reusableExpressionAnimation->SetReferenceParameter("_", _root);
                result->StartAnimation("TransformMatrix", _reusableExpressionAnimation);
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            // Group: Group 10
            CompositionContainerShape^ ContainerShape_249()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 29.3239994F, 24.1590004F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_139());
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            // Group: Group 9
            CompositionContainerShape^ ContainerShape_250()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 39.5289993F, 24.1590004F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_140());
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            // Group: Group 8
            CompositionContainerShape^ ContainerShape_251()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 40.8320007F, 43.5419998F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_141());
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            // Group: EyeLeft
            CompositionContainerShape^ ContainerShape_252()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 25.4220009F, 30.4619999F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_142());
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            // Group: EyeRight
            CompositionContainerShape^ ContainerShape_253()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 44.0320015F, 30.4619999F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_143());
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            // Group: Group 5
            CompositionContainerShape^ ContainerShape_254()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 34.7270012F, 46.6699982F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_144());
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            // Group: Group 4
            CompositionContainerShape^ ContainerShape_255()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 28.7240009F, 40.6679993F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_145());
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            // Group: Group 3
            CompositionContainerShape^ ContainerShape_256()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 40.7299995F, 40.6679993F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_146());
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            // Group: Group 2
            CompositionContainerShape^ ContainerShape_257()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 34.7270012F, 38.2659988F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_147());
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            // Group: Group 1
            CompositionContainerShape^ ContainerShape_258()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 35.6269989F, 64.6439972F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_148());
                return result;
            }

            // 'PhonePic01'.Transforms
            //   'PhonePic01'.Contents
            //     'Flash'.Transforms
            // 'Flash'.Transforms
            CompositionContainerShape^ ContainerShape_259()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 34, 34 };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_260());
                return result;
            }

            // 'PhonePic01'.Transforms
            //   'PhonePic01'.Contents
            //     'Flash'.Transforms
            //       'Flash'.Transforms
            // 'Flash'.Contents
            CompositionContainerShape^ ContainerShape_260()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_261());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "(_.Progress < 0.00162866444) ? Matrix3x2(0,0,0,0,0,0) : Matrix3x2(1,0,0,1,0,0)";
                _reusableExpressionAnimation->SetReferenceParameter("_", _root);
                result->StartAnimation("TransformMatrix", _reusableExpressionAnimation);
                return result;
            }

            // 'PhonePic01'.Transforms
            //   'PhonePic01'.Contents
            //     'Flash'.Transforms
            //       'Flash'.Transforms
            //         'Flash'.Contents
            // Group: Rectangle 1
            CompositionContainerShape^ ContainerShape_261()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_149());
                return result;
            }

            // 'PhoneShell Outlines 3'.AncestorTransformFrom_PhoneShell Outlines 2
            // 'Cursor 3'.AncestorTransformFrom_Cursor 2
            CompositionContainerShape^ ContainerShape_262()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 213, 106.5F };
                result->Scale = { 0.5F, 0.5F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_263());
                return result;
            }

            // 'Laptop Null Null'.Transforms
            CompositionContainerShape^ ContainerShape_263()
            {
                auto result = _c->CreateContainerShape();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 0, 0 });
                propertySet->InsertVector2("Position", { 0.125F, 0 });
                result->Scale = { 1.15900004F, 1.15900004F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_264());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position.X", _scalarAnimation_0p125_to_m143p875);
                auto controller = result->TryGetAnimationController("Position.X");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Position.Y", _scalarAnimation_0_to_m7p3);
                controller = result->TryGetAnimationController("Position.Y");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Scale", _vector2Animation_010);
                controller = result->TryGetAnimationController("Scale");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'LaptopNull'.Transforms
            CompositionContainerShape^ ContainerShape_264()
            {
                auto result = _c->CreateContainerShape();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 0, 0 });
                propertySet->InsertVector2("Position", { 47.3470001F, 0 });
                result->Scale = { 0.862810016F, 0.862810016F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_265());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position", Vector2Animation_050());
                auto controller = result->TryGetAnimationController("Position");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Scale", _vector2Animation_009);
                controller = result->TryGetAnimationController("Scale");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'CursorPic Null'.Transforms
            CompositionContainerShape^ ContainerShape_265()
            {
                auto result = _c->CreateContainerShape();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 0, 0 });
                propertySet->InsertVector2("Position", { -0.108000003F, 0 });
                result->Scale = { 0.862810016F, 0.862810016F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_266());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position", Vector2Animation_049());
                auto controller = result->TryGetAnimationController("Position");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'Cursor 2'.Transforms
            CompositionContainerShape^ ContainerShape_266()
            {
                auto result = _c->CreateContainerShape();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { -19.7380009F, -43.25F });
                propertySet->InsertVector2("Position", { 133.261993F, -87.25F });
                result->CenterPoint = { -19.7380009F, -43.25F };
                result->RotationAngleInDegrees = 120.099998F;
                result->Scale = { 0.439999998F, 0.439999998F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_267());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position", Vector2Animation_048());
                auto controller = result->TryGetAnimationController("Position");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Scale", _vector2Animation_006);
                controller = result->TryGetAnimationController("Scale");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("RotationAngleInDegrees", _scalarAnimation_120p1_to_360);
                controller = result->TryGetAnimationController("RotationAngleInDegrees");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'Cursor 2'.Transforms
            // 'Cursor 3'.Transforms
            CompositionContainerShape^ ContainerShape_267()
            {
                auto result = _c->CreateContainerShape();
                result->CenterPoint = { -19.7380009F, -43.25F };
                result->RotationAngleInDegrees = 360;
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_268());
                return result;
            }

            // 'Cursor 2'.Transforms
            //   'Cursor 3'.Transforms
            // 'Cursor 3'.Contents
            CompositionContainerShape^ ContainerShape_268()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_269());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "(_.Progress < 0.540716588) ? Matrix3x2(0,0,0,0,0,0) : ((_.Progress < 0.804560244) ? Matrix3x2(1,0,0,1,0,0) : Matrix3x2(0,0,0,0,0,0))";
                _reusableExpressionAnimation->SetReferenceParameter("_", _root);
                result->StartAnimation("TransformMatrix", _reusableExpressionAnimation);
                return result;
            }

            // 'Cursor 2'.Transforms
            //   'Cursor 3'.Transforms
            //     'Cursor 3'.Contents
            // Group: Shape 1
            CompositionContainerShape^ ContainerShape_269()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_150());
                return result;
            }

            // 'PhoneShell Outlines 3'.AncestorTransformFrom_PhoneShell Outlines 2
            // 'Cursor 4'.AncestorTransformFrom_Master Null
            CompositionContainerShape^ ContainerShape_270()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 213, 106.5F };
                result->Scale = { 0.5F, 0.5F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_271());
                return result;
            }

            // 'PhoneShell Outlines 3'.AncestorTransformFrom_PhoneShell Outlines 2
            //   'Cursor 4'.AncestorTransformFrom_Master Null
            // 'Cursor 4'.Transforms
            CompositionContainerShape^ ContainerShape_271()
            {
                auto result = _c->CreateContainerShape();
                result->CenterPoint = { -19.7380009F, -43.25F };
                result->Offset = { 155, 12 };
                result->RotationAngleInDegrees = 360;
                result->Scale = { 0.600000024F, 0.600000024F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_272());
                return result;
            }

            // 'PhoneShell Outlines 3'.AncestorTransformFrom_PhoneShell Outlines 2
            //   'Cursor 4'.AncestorTransformFrom_Master Null
            //     'Cursor 4'.Transforms
            // 'Cursor 4'.Contents
            CompositionContainerShape^ ContainerShape_272()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_273());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "(_.Progress < 0.804560244) ? Matrix3x2(0,0,0,0,0,0) : ((_.Progress < 0.936482072) ? Matrix3x2(1,0,0,1,0,0) : Matrix3x2(0,0,0,0,0,0))";
                _reusableExpressionAnimation->SetReferenceParameter("_", _root);
                result->StartAnimation("TransformMatrix", _reusableExpressionAnimation);
                return result;
            }

            // 'PhoneShell Outlines 3'.AncestorTransformFrom_PhoneShell Outlines 2
            //   'Cursor 4'.AncestorTransformFrom_Master Null
            //     'Cursor 4'.Transforms
            //       'Cursor 4'.Contents
            // Group: Shape 1
            CompositionContainerShape^ ContainerShape_273()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_151());
                return result;
            }

            // 'PhoneShell Outlines 3'.AncestorTransformFrom_PhoneShell Outlines 2
            // 'PhoneShell Outlines 3'.AncestorTransformFrom_PhoneShell Outlines 2
            CompositionContainerShape^ ContainerShape_274()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 213, 106.5F };
                result->Scale = { 0.5F, 0.5F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_275());
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            CompositionContainerShape^ ContainerShape_275()
            {
                auto result = _c->CreateContainerShape();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 46.25F, 86.25F });
                propertySet->InsertVector2("Position", { -239, 15 });
                result->CenterPoint = { 46.25F, 86.25F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_276());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position.X", _scalarAnimation_m239_to_0);
                auto controller = result->TryGetAnimationController("Position.X");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Position.Y", _scalarAnimation_15_to_m0p063);
                controller = result->TryGetAnimationController("Position.Y");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Scale", _vector2Animation_000);
                controller = result->TryGetAnimationController("Scale");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            // 'PhoneShell Outlines 3'.Transforms
            CompositionContainerShape^ ContainerShape_276()
            {
                auto result = _c->CreateContainerShape();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 46.25F, 86.25F });
                propertySet->InsertVector2("Position", { 46.25F, 86.25F });
                result->CenterPoint = { 46.25F, 86.25F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_277());
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneShell Outlines 3'.Transforms
            // 'PhoneShell Outlines 3'.Contents
            CompositionContainerShape^ ContainerShape_277()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_278());
                shapes->Append(ContainerShape_279());
                shapes->Append(ContainerShape_280());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "(_.Progress < 0.908794761) ? Matrix3x2(0,0,0,0,0,0) : Matrix3x2(1,0,0,1,0,0)";
                _reusableExpressionAnimation->SetReferenceParameter("_", _root);
                result->StartAnimation("TransformMatrix", _reusableExpressionAnimation);
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneShell Outlines 3'.Transforms
            //     'PhoneShell Outlines 3'.Contents
            // Group: Group 3
            CompositionContainerShape^ ContainerShape_278()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 46.25F, 86.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_152());
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneShell Outlines 3'.Transforms
            //     'PhoneShell Outlines 3'.Contents
            // Group: Group 2
            CompositionContainerShape^ ContainerShape_279()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 46.25F, 86.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_153());
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneShell Outlines 3'.Transforms
            //     'PhoneShell Outlines 3'.Contents
            // Group: Group 1
            CompositionContainerShape^ ContainerShape_280()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 46.25F, 10.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_154());
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneShell Outlines 3'.Transforms
            //     'PhoneScreen'.Transforms
            //       'PhoneScreen'.Contents
            //         'PhoneScreen Outlines 2'.Contents
            // 'PhoneScreen Outlines 2'.Contents
            CompositionContainerShape^ ContainerShape_281()
            {
                auto result = _c->CreateContainerShape();
                result->CenterPoint = { 38.25F, 70.25F };
                result->Offset = { -0.25F, -0.25F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_282());
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneShell Outlines 3'.Transforms
            //     'PhoneScreen'.Transforms
            //       'PhoneScreen'.Contents
            //         'PhoneScreen Outlines 2'.Contents
            //           'PhoneScreen Outlines 2'.Contents
            // Group: Group 1
            CompositionContainerShape^ ContainerShape_282()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 38.25F, 70.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_155());
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            // 'PhonePic03 Outlines 2'.Contents
            CompositionContainerShape^ ContainerShape_283()
            {
                auto result = _c->CreateContainerShape();
                result->CenterPoint = { 34.25F, 34.25F };
                result->Offset = { -0.25F, -0.25F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_284());
                shapes->Append(ContainerShape_285());
                shapes->Append(ContainerShape_286());
                shapes->Append(ContainerShape_287());
                shapes->Append(ContainerShape_288());
                shapes->Append(ContainerShape_289());
                shapes->Append(ContainerShape_290());
                shapes->Append(ContainerShape_291());
                shapes->Append(ContainerShape_292());
                shapes->Append(ContainerShape_293());
                shapes->Append(ContainerShape_294());
                shapes->Append(ContainerShape_295());
                shapes->Append(ContainerShape_296());
                shapes->Append(ContainerShape_297());
                shapes->Append(ContainerShape_298());
                shapes->Append(ContainerShape_299());
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            // Group: Group 16
            CompositionContainerShape^ ContainerShape_284()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 34.25F, 34.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_156());
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            // Group: Group 15
            CompositionContainerShape^ ContainerShape_285()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 34.25F, 34.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_157());
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            // Group: Group 14
            CompositionContainerShape^ ContainerShape_286()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 34.25F, 28.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_158());
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            // Group: Group 13
            CompositionContainerShape^ ContainerShape_287()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 34.25F, 43.6790009F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_159());
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            // Group: Group 12
            CompositionContainerShape^ ContainerShape_288()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 41.9640007F, 35.9650002F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_160());
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            // Group: Group 11
            CompositionContainerShape^ ContainerShape_289()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 26.5359993F, 35.9640007F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_161());
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            // Group: Group 10
            CompositionContainerShape^ ContainerShape_290()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 34.25F, 23.9640007F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_162());
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            // Group: Group 9
            CompositionContainerShape^ ContainerShape_291()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 34.25F, 47.9620018F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_163());
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            // Group: Group 8
            CompositionContainerShape^ ContainerShape_292()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 46.2490005F, 35.9650002F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_164());
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            // Group: Group 7
            CompositionContainerShape^ ContainerShape_293()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 44.5349998F, 27.3929996F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_165());
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            // Group: Group 6
            CompositionContainerShape^ ContainerShape_294()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 22.2509995F, 35.9640007F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_166());
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            // Group: Group 5
            CompositionContainerShape^ ContainerShape_295()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 23.9650002F, 27.3929996F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_167());
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            // Group: Group 4
            CompositionContainerShape^ ContainerShape_296()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 23.9650002F, 44.5349998F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_168());
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            // Group: Group 3
            CompositionContainerShape^ ContainerShape_297()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 44.5349998F, 44.5349998F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_169());
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            // Group: Group 2
            CompositionContainerShape^ ContainerShape_298()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 34.25F, 35.9640007F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_170());
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            // Group: Group 1
            CompositionContainerShape^ ContainerShape_299()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 34.25F, 35.9640007F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_171());
                return result;
            }

            // 'PhonePic02'.AncestorTransformFrom_PicMover
            //   'PhonePic02'.Contents
            //     'PicMountains'.Contents
            // 'PicMountains'.Contents
            CompositionContainerShape^ ContainerShape_300()
            {
                auto result = _c->CreateContainerShape();
                result->CenterPoint = { 168.25F, 42.25F };
                result->Offset = { -134.25F, -8.31700134F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_301());
                shapes->Append(ContainerShape_302());
                shapes->Append(ContainerShape_303());
                shapes->Append(ContainerShape_304());
                shapes->Append(ContainerShape_305());
                shapes->Append(ContainerShape_306());
                return result;
            }

            // 'PhonePic02'.AncestorTransformFrom_PicMover
            //   'PhonePic02'.Contents
            //     'PicMountains'.Contents
            //       'PicMountains'.Contents
            // Group: Sky
            CompositionContainerShape^ ContainerShape_301()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 168.25F, 42.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_172());
                return result;
            }

            // 'PhonePic02'.AncestorTransformFrom_PicMover
            //   'PhonePic02'.Contents
            //     'PicMountains'.Contents
            //       'PicMountains'.Contents
            // Group: MountianRight
            CompositionContainerShape^ ContainerShape_302()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 183.25F, 58.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_173());
                return result;
            }

            // 'PhonePic02'.AncestorTransformFrom_PicMover
            //   'PhonePic02'.Contents
            //     'PicMountains'.Contents
            //       'PicMountains'.Contents
            // Group: MountianRightSnow
            CompositionContainerShape^ ContainerShape_303()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 183.25F, 58.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_174());
                return result;
            }

            // 'PhonePic02'.AncestorTransformFrom_PicMover
            //   'PhonePic02'.Contents
            //     'PicMountains'.Contents
            //       'PicMountains'.Contents
            // Group: MountainLeft
            CompositionContainerShape^ ContainerShape_304()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 168.25F, 52.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_175());
                return result;
            }

            // 'PhonePic02'.AncestorTransformFrom_PicMover
            //   'PhonePic02'.Contents
            //     'PicMountains'.Contents
            //       'PicMountains'.Contents
            // Group: MountainLeftSnow
            CompositionContainerShape^ ContainerShape_305()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 168.25F, 52.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_176());
                return result;
            }

            // 'PhonePic02'.AncestorTransformFrom_PicMover
            //   'PhonePic02'.Contents
            //     'PicMountains'.Contents
            //       'PicMountains'.Contents
            // Group: Sun
            CompositionContainerShape^ ContainerShape_306()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 182.25F, 18.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_177());
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneShell Outlines 3'.Transforms
            //     'PhoneScreen'.Transforms
            //       'PhoneScreen'.Contents
            //         'BlackBG'.Contents
            // 'BlackBG'.Contents
            CompositionContainerShape^ ContainerShape_307()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 38, 70 };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_308());
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneShell Outlines 3'.Transforms
            //     'PhoneScreen'.Transforms
            //       'PhoneScreen'.Contents
            //         'BlackBG'.Contents
            //           'BlackBG'.Contents
            // Group: Rectangle 1
            CompositionContainerShape^ ContainerShape_308()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_178());
                return result;
            }

            // 'PhonePic01'.Contents
            //   'Flash'.Contents
            // 'PurpleBG'.Contents
            CompositionContainerShape^ ContainerShape_309()
            {
                auto result = _c->CreateContainerShape();
                result->CenterPoint = { 39.25F, 43.25F };
                result->Offset = { -0.25F, -0.25F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_310());
                return result;
            }

            // 'PhonePic01'.Contents
            //   'Flash'.Contents
            //     'PurpleBG'.Contents
            // Group: Group 11
            CompositionContainerShape^ ContainerShape_310()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 34.25F, 34.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_179());
                return result;
            }

            // 'Cat'.Contents
            CompositionContainerShape^ ContainerShape_311()
            {
                auto result = _c->CreateContainerShape();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 39.25F, 43.25F });
                propertySet->InsertVector2("Position", { 39.625F, 37.75F });
                result->CenterPoint = { 39.25F, 43.25F };
                result->Scale = { 0.751999974F, 0.751999974F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_312());
                shapes->Append(ContainerShape_313());
                shapes->Append(ContainerShape_314());
                shapes->Append(ContainerShape_315());
                shapes->Append(ContainerShape_316());
                shapes->Append(ContainerShape_317());
                shapes->Append(ContainerShape_318());
                shapes->Append(ContainerShape_319());
                shapes->Append(ContainerShape_320());
                shapes->Append(ContainerShape_321());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position", Vector2Animation_051());
                auto controller = result->TryGetAnimationController("Position");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Scale", _vector2Animation_002);
                controller = result->TryGetAnimationController("Scale");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'Cat'.Contents
            // Group: Group 10
            CompositionContainerShape^ ContainerShape_312()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 29.3239994F, 24.1590004F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_180());
                return result;
            }

            // 'Cat'.Contents
            // Group: Group 9
            CompositionContainerShape^ ContainerShape_313()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 39.5289993F, 24.1590004F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_181());
                return result;
            }

            // 'Cat'.Contents
            // Group: Group 8
            CompositionContainerShape^ ContainerShape_314()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 40.8320007F, 43.5419998F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_182());
                return result;
            }

            // 'Cat'.Contents
            // Group: EyeLeft
            CompositionContainerShape^ ContainerShape_315()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 25.4220009F, 30.4619999F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_183());
                return result;
            }

            // 'Cat'.Contents
            // Group: EyeRight
            CompositionContainerShape^ ContainerShape_316()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 44.0320015F, 30.4619999F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_184());
                return result;
            }

            // 'Cat'.Contents
            // Group: Group 5
            CompositionContainerShape^ ContainerShape_317()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 34.7270012F, 46.6699982F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_185());
                return result;
            }

            // 'Cat'.Contents
            // Group: Group 4
            CompositionContainerShape^ ContainerShape_318()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 28.7240009F, 40.6679993F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_186());
                return result;
            }

            // 'Cat'.Contents
            // Group: Group 3
            CompositionContainerShape^ ContainerShape_319()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 40.7299995F, 40.6679993F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_187());
                return result;
            }

            // 'Cat'.Contents
            // Group: Group 2
            CompositionContainerShape^ ContainerShape_320()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 34.7270012F, 38.2659988F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_188());
                return result;
            }

            // 'Cat'.Contents
            // Group: Group 1
            CompositionContainerShape^ ContainerShape_321()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 35.6269989F, 64.6439972F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_189());
                return result;
            }

            // 'PhonePic01'.Contents
            //   'Flash'.Contents
            // 'Flash'.Contents
            CompositionContainerShape^ ContainerShape_322()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 34, 34 };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_323());
                return result;
            }

            // 'PhonePic01'.Contents
            //   'Flash'.Contents
            //     'Flash'.Contents
            // Group: Rectangle 1
            CompositionContainerShape^ ContainerShape_323()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_190());
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneShell Outlines 3'.Transforms
            //     'PhoneScreen'.Transforms
            //       'PhoneScreen'.Contents
            //         'BlackBG 2'.Transforms
            // 'BlackBG 2'.Transforms
            CompositionContainerShape^ ContainerShape_324()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 38, 70 };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_325());
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneShell Outlines 3'.Transforms
            //     'PhoneScreen'.Transforms
            //       'PhoneScreen'.Contents
            //         'BlackBG 2'.Transforms
            //           'BlackBG 2'.Transforms
            // 'BlackBG 2'.Contents
            CompositionContainerShape^ ContainerShape_325()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_326());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "(_.Progress < 0.85830617) ? Matrix3x2(0,0,0,0,0,0) : Matrix3x2(1,0,0,1,0,0)";
                _reusableExpressionAnimation->SetReferenceParameter("_", _root);
                result->StartAnimation("TransformMatrix", _reusableExpressionAnimation);
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneShell Outlines 3'.Transforms
            //     'PhoneScreen'.Transforms
            //       'PhoneScreen'.Contents
            //         'BlackBG 2'.Transforms
            //           'BlackBG 2'.Transforms
            //             'BlackBG 2'.Contents
            // Group: Rectangle 1
            CompositionContainerShape^ ContainerShape_326()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_191());
                return result;
            }

            // 'PhonePic01_Ending'.Transforms
            //   'PhonePic01_Ending'.Contents
            //     'Flash'.Transforms
            // 'PurpleBG'.Transforms
            CompositionContainerShape^ ContainerShape_327()
            {
                auto result = _c->CreateContainerShape();
                result->CenterPoint = { 39.25F, 43.25F };
                result->Offset = { -0.25F, -0.25F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_328());
                return result;
            }

            // 'PhonePic01_Ending'.Transforms
            //   'PhonePic01_Ending'.Contents
            //     'Flash'.Transforms
            //       'PurpleBG'.Transforms
            // 'PurpleBG'.Contents
            CompositionContainerShape^ ContainerShape_328()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_329());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "(_.Progress < 0.817589581) ? Matrix3x2(0,0,0,0,0,0) : Matrix3x2(1,0,0,1,0,0)";
                _reusableExpressionAnimation->SetReferenceParameter("_", _root);
                result->StartAnimation("TransformMatrix", _reusableExpressionAnimation);
                return result;
            }

            // 'PhonePic01_Ending'.Transforms
            //   'PhonePic01_Ending'.Contents
            //     'Flash'.Transforms
            //       'PurpleBG'.Transforms
            //         'PurpleBG'.Contents
            // Group: Group 11
            CompositionContainerShape^ ContainerShape_329()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 34.25F, 34.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_192());
                return result;
            }

            // 'Cat'.Transforms
            CompositionContainerShape^ ContainerShape_330()
            {
                auto result = _c->CreateContainerShape();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 39.25F, 43.25F });
                propertySet->InsertVector2("Position", { 39.625F, 37.75F });
                result->CenterPoint = { 39.25F, 43.25F };
                result->Scale = { 0.751999974F, 0.751999974F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_331());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position", Vector2Animation_053());
                auto controller = result->TryGetAnimationController("Position");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'Cat'.Transforms
            // 'Cat'.Contents
            CompositionContainerShape^ ContainerShape_331()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_332());
                shapes->Append(ContainerShape_333());
                shapes->Append(ContainerShape_334());
                shapes->Append(ContainerShape_335());
                shapes->Append(ContainerShape_336());
                shapes->Append(ContainerShape_337());
                shapes->Append(ContainerShape_338());
                shapes->Append(ContainerShape_339());
                shapes->Append(ContainerShape_340());
                shapes->Append(ContainerShape_341());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "(_.Progress < 0.817589581) ? Matrix3x2(0,0,0,0,0,0) : Matrix3x2(1,0,0,1,0,0)";
                _reusableExpressionAnimation->SetReferenceParameter("_", _root);
                result->StartAnimation("TransformMatrix", _reusableExpressionAnimation);
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            // Group: Group 10
            CompositionContainerShape^ ContainerShape_332()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 29.3239994F, 24.1590004F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_193());
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            // Group: Group 9
            CompositionContainerShape^ ContainerShape_333()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 39.5289993F, 24.1590004F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_194());
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            // Group: Group 8
            CompositionContainerShape^ ContainerShape_334()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 40.8320007F, 43.5419998F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_195());
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            // Group: EyeLeft
            CompositionContainerShape^ ContainerShape_335()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 25.4220009F, 30.4619999F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_196());
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            // Group: EyeRight
            CompositionContainerShape^ ContainerShape_336()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 44.0320015F, 30.4619999F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_197());
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            // Group: Group 5
            CompositionContainerShape^ ContainerShape_337()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 34.7270012F, 46.6699982F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_198());
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            // Group: Group 4
            CompositionContainerShape^ ContainerShape_338()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 28.7240009F, 40.6679993F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_199());
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            // Group: Group 3
            CompositionContainerShape^ ContainerShape_339()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 40.7299995F, 40.6679993F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_200());
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            // Group: Group 2
            CompositionContainerShape^ ContainerShape_340()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 34.7270012F, 38.2659988F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_201());
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            // Group: Group 1
            CompositionContainerShape^ ContainerShape_341()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 35.6269989F, 64.6439972F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_202());
                return result;
            }

            // 'PhonePic01_Ending'.Transforms
            //   'PhonePic01_Ending'.Contents
            //     'Flash'.Transforms
            // 'Flash'.Transforms
            CompositionContainerShape^ ContainerShape_342()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 34, 34 };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_343());
                return result;
            }

            // 'PhonePic01_Ending'.Transforms
            //   'PhonePic01_Ending'.Contents
            //     'Flash'.Transforms
            //       'Flash'.Transforms
            // 'Flash'.Contents
            CompositionContainerShape^ ContainerShape_343()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_344());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "(_.Progress < 0.817589581) ? Matrix3x2(0,0,0,0,0,0) : Matrix3x2(1,0,0,1,0,0)";
                _reusableExpressionAnimation->SetReferenceParameter("_", _root);
                result->StartAnimation("TransformMatrix", _reusableExpressionAnimation);
                return result;
            }

            // 'PhonePic01_Ending'.Transforms
            //   'PhonePic01_Ending'.Contents
            //     'Flash'.Transforms
            //       'Flash'.Transforms
            //         'Flash'.Contents
            // Group: Rectangle 1
            CompositionContainerShape^ ContainerShape_344()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_203());
                return result;
            }

            // 'PhoneShell Outlines'.AncestorTransformFrom_Master Null
            // 'ScreenOutlineCoverup 3'.AncestorTransformFrom_PhoneShell Outlines 3
            CompositionContainerShape^ ContainerShape_345()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 213, 106.5F };
                result->Scale = { 0.5F, 0.5F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_346());
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            CompositionContainerShape^ ContainerShape_346()
            {
                auto result = _c->CreateContainerShape();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 46.25F, 86.25F });
                propertySet->InsertVector2("Position", { -239, 15 });
                result->CenterPoint = { 46.25F, 86.25F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_347());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position.X", _scalarAnimation_m239_to_0);
                auto controller = result->TryGetAnimationController("Position.X");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Position.Y", _scalarAnimation_15_to_m0p063);
                controller = result->TryGetAnimationController("Position.Y");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Scale", _vector2Animation_000);
                controller = result->TryGetAnimationController("Scale");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            // 'PhoneShell Outlines 3'.Transforms
            CompositionContainerShape^ ContainerShape_347()
            {
                auto result = _c->CreateContainerShape();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 46.25F, 86.25F });
                propertySet->InsertVector2("Position", { 46.25F, 86.25F });
                result->CenterPoint = { 46.25F, 86.25F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_348());
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneShell Outlines 3'.Transforms
            // 'ScreenOutlineCoverup 3'.Transforms
            CompositionContainerShape^ ContainerShape_348()
            {
                auto result = _c->CreateContainerShape();
                result->CenterPoint = { -0.375F, -0.125F };
                result->Offset = { 46.4830017F, 86.4110031F };
                result->Scale = { 1.13636005F, 1.13636005F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_349());
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneShell Outlines 3'.Transforms
            //     'ScreenOutlineCoverup 3'.Transforms
            // 'ScreenOutlineCoverup 3'.Contents
            CompositionContainerShape^ ContainerShape_349()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_350());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "(_.Progress < 0.908794761) ? Matrix3x2(0,0,0,0,0,0) : Matrix3x2(1,0,0,1,0,0)";
                _reusableExpressionAnimation->SetReferenceParameter("_", _root);
                result->StartAnimation("TransformMatrix", _reusableExpressionAnimation);
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneShell Outlines 3'.Transforms
            //     'ScreenOutlineCoverup 3'.Transforms
            //       'ScreenOutlineCoverup 3'.Contents
            // Group: Rectangle 1
            CompositionContainerShape^ ContainerShape_350()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { -0.375F, -0.125F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_204());
                return result;
            }

            // 'PhoneShell Outlines'.AncestorTransformFrom_Master Null
            // 'CamButtonFill 3'.AncestorTransformFrom_PhoneShell Outlines 3
            CompositionContainerShape^ ContainerShape_351()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 213, 106.5F };
                result->Scale = { 0.5F, 0.5F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_352());
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            CompositionContainerShape^ ContainerShape_352()
            {
                auto result = _c->CreateContainerShape();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 46.25F, 86.25F });
                propertySet->InsertVector2("Position", { -239, 15 });
                result->CenterPoint = { 46.25F, 86.25F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_353());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position.X", _scalarAnimation_m239_to_0);
                auto controller = result->TryGetAnimationController("Position.X");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Position.Y", _scalarAnimation_15_to_m0p063);
                controller = result->TryGetAnimationController("Position.Y");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Scale", _vector2Animation_000);
                controller = result->TryGetAnimationController("Scale");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            // 'PhoneShell Outlines 3'.Transforms
            CompositionContainerShape^ ContainerShape_353()
            {
                auto result = _c->CreateContainerShape();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 46.25F, 86.25F });
                propertySet->InsertVector2("Position", { 46.25F, 86.25F });
                result->CenterPoint = { 46.25F, 86.25F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_354());
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneShell Outlines 3'.Transforms
            // 'CamButtonFill 3'.Transforms
            CompositionContainerShape^ ContainerShape_354()
            {
                auto result = _c->CreateContainerShape();
                result->CenterPoint = { 0, 58 };
                result->Offset = { 46.25F, 88.5130005F };
                result->Scale = { 0.971589983F, 0.971589983F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_355());
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneShell Outlines 3'.Transforms
            //     'CamButtonFill 3'.Transforms
            // 'CamButtonFill 3'.Contents
            CompositionContainerShape^ ContainerShape_355()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_356());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "(_.Progress < 0.908794761) ? Matrix3x2(0,0,0,0,0,0) : Matrix3x2(1,0,0,1,0,0)";
                _reusableExpressionAnimation->SetReferenceParameter("_", _root);
                result->StartAnimation("TransformMatrix", _reusableExpressionAnimation);
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneShell Outlines 3'.Transforms
            //     'CamButtonFill 3'.Transforms
            //       'CamButtonFill 3'.Contents
            // Group: Ellipse 1
            CompositionContainerShape^ ContainerShape_356()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 0, 58 };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_205());
                return result;
            }

            // 'PhoneShell Outlines'.AncestorTransformFrom_Master Null
            // 'PhoneShell Outlines'.AncestorTransformFrom_Master Null
            CompositionContainerShape^ ContainerShape_357()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 213, 106.5F };
                result->Scale = { 0.5F, 0.5F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_358());
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            CompositionContainerShape^ ContainerShape_358()
            {
                auto result = _c->CreateContainerShape();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 46.25F, 86.25F });
                propertySet->InsertVector2("Position", { 0, -0.063000001F });
                result->CenterPoint = { 46.25F, 86.25F };
                result->Scale = { 1.75999999F, 1.75999999F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_359());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position", Vector2Animation_054());
                auto controller = result->TryGetAnimationController("Position");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Scale", _vector2Animation_032);
                controller = result->TryGetAnimationController("Scale");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            // 'PhoneShell Outlines'.Contents
            CompositionContainerShape^ ContainerShape_359()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_360());
                shapes->Append(ContainerShape_361());
                shapes->Append(ContainerShape_362());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "(_.Progress < 0.451140076) ? Matrix3x2(1,0,0,1,0,0) : Matrix3x2(0,0,0,0,0,0)";
                _reusableExpressionAnimation->SetReferenceParameter("_", _root);
                result->StartAnimation("TransformMatrix", _reusableExpressionAnimation);
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'PhoneShell Outlines'.Contents
            // Group: Group 3
            CompositionContainerShape^ ContainerShape_360()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 46.25F, 86.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_206());
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'PhoneShell Outlines'.Contents
            // Group: Group 2
            CompositionContainerShape^ ContainerShape_361()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 46.25F, 86.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_207());
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'PhoneShell Outlines'.Contents
            // Group: Group 1
            CompositionContainerShape^ ContainerShape_362()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 46.25F, 10.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_208());
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'PhoneScreen'.Transforms
            //     'PhoneScreen'.Contents
            //       'PhoneScreen Outlines 2'.Contents
            // 'PhoneScreen Outlines 2'.Contents
            CompositionContainerShape^ ContainerShape_363()
            {
                auto result = _c->CreateContainerShape();
                result->CenterPoint = { 38.25F, 70.25F };
                result->Offset = { -0.25F, -0.25F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_364());
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'PhoneScreen'.Transforms
            //     'PhoneScreen'.Contents
            //       'PhoneScreen Outlines 2'.Contents
            //         'PhoneScreen Outlines 2'.Contents
            // Group: Group 1
            CompositionContainerShape^ ContainerShape_364()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 38.25F, 70.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_209());
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            // 'PhonePic03 Outlines 2'.Contents
            CompositionContainerShape^ ContainerShape_365()
            {
                auto result = _c->CreateContainerShape();
                result->CenterPoint = { 34.25F, 34.25F };
                result->Offset = { -0.25F, -0.25F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_366());
                shapes->Append(ContainerShape_367());
                shapes->Append(ContainerShape_368());
                shapes->Append(ContainerShape_369());
                shapes->Append(ContainerShape_370());
                shapes->Append(ContainerShape_371());
                shapes->Append(ContainerShape_372());
                shapes->Append(ContainerShape_373());
                shapes->Append(ContainerShape_374());
                shapes->Append(ContainerShape_375());
                shapes->Append(ContainerShape_376());
                shapes->Append(ContainerShape_377());
                shapes->Append(ContainerShape_378());
                shapes->Append(ContainerShape_379());
                shapes->Append(ContainerShape_380());
                shapes->Append(ContainerShape_381());
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            // Group: Group 16
            CompositionContainerShape^ ContainerShape_366()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 34.25F, 34.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_210());
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            // Group: Group 15
            CompositionContainerShape^ ContainerShape_367()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 34.25F, 34.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_211());
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            // Group: Group 14
            CompositionContainerShape^ ContainerShape_368()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 34.25F, 28.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_212());
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            // Group: Group 13
            CompositionContainerShape^ ContainerShape_369()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 34.25F, 43.6790009F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_213());
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            // Group: Group 12
            CompositionContainerShape^ ContainerShape_370()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 41.9640007F, 35.9650002F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_214());
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            // Group: Group 11
            CompositionContainerShape^ ContainerShape_371()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 26.5359993F, 35.9640007F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_215());
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            // Group: Group 10
            CompositionContainerShape^ ContainerShape_372()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 34.25F, 23.9640007F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_216());
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            // Group: Group 9
            CompositionContainerShape^ ContainerShape_373()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 34.25F, 47.9620018F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_217());
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            // Group: Group 8
            CompositionContainerShape^ ContainerShape_374()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 46.2490005F, 35.9650002F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_218());
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            // Group: Group 7
            CompositionContainerShape^ ContainerShape_375()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 44.5349998F, 27.3929996F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_219());
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            // Group: Group 6
            CompositionContainerShape^ ContainerShape_376()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 22.2509995F, 35.9640007F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_220());
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            // Group: Group 5
            CompositionContainerShape^ ContainerShape_377()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 23.9650002F, 27.3929996F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_221());
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            // Group: Group 4
            CompositionContainerShape^ ContainerShape_378()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 23.9650002F, 44.5349998F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_222());
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            // Group: Group 3
            CompositionContainerShape^ ContainerShape_379()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 44.5349998F, 44.5349998F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_223());
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            // Group: Group 2
            CompositionContainerShape^ ContainerShape_380()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 34.25F, 35.9640007F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_224());
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            // Group: Group 1
            CompositionContainerShape^ ContainerShape_381()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 34.25F, 35.9640007F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_225());
                return result;
            }

            // 'PhonePic02'.AncestorTransformFrom_PicMover
            //   'PhonePic02'.Contents
            //     'PicMountains'.Contents
            // 'PicMountains'.Contents
            CompositionContainerShape^ ContainerShape_382()
            {
                auto result = _c->CreateContainerShape();
                result->CenterPoint = { 168.25F, 42.25F };
                result->Offset = { -134.25F, -8.31700134F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_383());
                shapes->Append(ContainerShape_384());
                shapes->Append(ContainerShape_385());
                shapes->Append(ContainerShape_386());
                shapes->Append(ContainerShape_387());
                shapes->Append(ContainerShape_388());
                return result;
            }

            // 'PhonePic02'.AncestorTransformFrom_PicMover
            //   'PhonePic02'.Contents
            //     'PicMountains'.Contents
            //       'PicMountains'.Contents
            // Group: Sky
            CompositionContainerShape^ ContainerShape_383()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 168.25F, 42.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_226());
                return result;
            }

            // 'PhonePic02'.AncestorTransformFrom_PicMover
            //   'PhonePic02'.Contents
            //     'PicMountains'.Contents
            //       'PicMountains'.Contents
            // Group: MountianRight
            CompositionContainerShape^ ContainerShape_384()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 183.25F, 58.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_227());
                return result;
            }

            // 'PhonePic02'.AncestorTransformFrom_PicMover
            //   'PhonePic02'.Contents
            //     'PicMountains'.Contents
            //       'PicMountains'.Contents
            // Group: MountianRightSnow
            CompositionContainerShape^ ContainerShape_385()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 183.25F, 58.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_228());
                return result;
            }

            // 'PhonePic02'.AncestorTransformFrom_PicMover
            //   'PhonePic02'.Contents
            //     'PicMountains'.Contents
            //       'PicMountains'.Contents
            // Group: MountainLeft
            CompositionContainerShape^ ContainerShape_386()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 168.25F, 52.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_229());
                return result;
            }

            // 'PhonePic02'.AncestorTransformFrom_PicMover
            //   'PhonePic02'.Contents
            //     'PicMountains'.Contents
            //       'PicMountains'.Contents
            // Group: MountainLeftSnow
            CompositionContainerShape^ ContainerShape_387()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 168.25F, 52.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_230());
                return result;
            }

            // 'PhonePic02'.AncestorTransformFrom_PicMover
            //   'PhonePic02'.Contents
            //     'PicMountains'.Contents
            //       'PicMountains'.Contents
            // Group: Sun
            CompositionContainerShape^ ContainerShape_388()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 182.25F, 18.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_231());
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'PhoneScreen'.Transforms
            //     'PhoneScreen'.Contents
            //       'BlackBG'.Contents
            // 'BlackBG'.Contents
            CompositionContainerShape^ ContainerShape_389()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 38, 70 };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_390());
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'PhoneScreen'.Transforms
            //     'PhoneScreen'.Contents
            //       'BlackBG'.Contents
            //         'BlackBG'.Contents
            // Group: Rectangle 1
            CompositionContainerShape^ ContainerShape_390()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_232());
                return result;
            }

            // 'PhonePic01'.Contents
            //   'Flash'.Contents
            // 'PurpleBG'.Contents
            CompositionContainerShape^ ContainerShape_391()
            {
                auto result = _c->CreateContainerShape();
                result->CenterPoint = { 39.25F, 43.25F };
                result->Offset = { -0.25F, -0.25F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_392());
                return result;
            }

            // 'PhonePic01'.Contents
            //   'Flash'.Contents
            //     'PurpleBG'.Contents
            // Group: Group 11
            CompositionContainerShape^ ContainerShape_392()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 34.25F, 34.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_233());
                return result;
            }

            // 'Cat'.Contents
            CompositionContainerShape^ ContainerShape_393()
            {
                auto result = _c->CreateContainerShape();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 39.25F, 43.25F });
                propertySet->InsertVector2("Position", { 39.625F, 37.75F });
                result->CenterPoint = { 39.25F, 43.25F };
                result->Scale = { 0.751999974F, 0.751999974F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_394());
                shapes->Append(ContainerShape_395());
                shapes->Append(ContainerShape_396());
                shapes->Append(ContainerShape_397());
                shapes->Append(ContainerShape_398());
                shapes->Append(ContainerShape_399());
                shapes->Append(ContainerShape_400());
                shapes->Append(ContainerShape_401());
                shapes->Append(ContainerShape_402());
                shapes->Append(ContainerShape_403());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position", Vector2Animation_055());
                auto controller = result->TryGetAnimationController("Position");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Scale", _vector2Animation_002);
                controller = result->TryGetAnimationController("Scale");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'Cat'.Contents
            // Group: Group 10
            CompositionContainerShape^ ContainerShape_394()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 29.3239994F, 24.1590004F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_234());
                return result;
            }

            // 'Cat'.Contents
            // Group: Group 9
            CompositionContainerShape^ ContainerShape_395()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 39.5289993F, 24.1590004F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_235());
                return result;
            }

            // 'Cat'.Contents
            // Group: Group 8
            CompositionContainerShape^ ContainerShape_396()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 40.8320007F, 43.5419998F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_236());
                return result;
            }

            // 'Cat'.Contents
            // Group: EyeLeft
            CompositionContainerShape^ ContainerShape_397()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 25.4220009F, 30.4619999F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_237());
                return result;
            }

            // 'Cat'.Contents
            // Group: EyeRight
            CompositionContainerShape^ ContainerShape_398()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 44.0320015F, 30.4619999F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_238());
                return result;
            }

            // 'Cat'.Contents
            // Group: Group 5
            CompositionContainerShape^ ContainerShape_399()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 34.7270012F, 46.6699982F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_239());
                return result;
            }

            // 'Cat'.Contents
            // Group: Group 4
            CompositionContainerShape^ ContainerShape_400()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 28.7240009F, 40.6679993F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_240());
                return result;
            }

            // 'Cat'.Contents
            // Group: Group 3
            CompositionContainerShape^ ContainerShape_401()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 40.7299995F, 40.6679993F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_241());
                return result;
            }

            // 'Cat'.Contents
            // Group: Group 2
            CompositionContainerShape^ ContainerShape_402()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 34.7270012F, 38.2659988F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_242());
                return result;
            }

            // 'Cat'.Contents
            // Group: Group 1
            CompositionContainerShape^ ContainerShape_403()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 35.6269989F, 64.6439972F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_243());
                return result;
            }

            // 'PhonePic01'.Contents
            //   'Flash'.Contents
            // 'Flash'.Contents
            CompositionContainerShape^ ContainerShape_404()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 34, 34 };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_405());
                return result;
            }

            // 'PhonePic01'.Contents
            //   'Flash'.Contents
            //     'Flash'.Contents
            // Group: Rectangle 1
            CompositionContainerShape^ ContainerShape_405()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_244());
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'PhoneScreen'.Transforms
            //     'PhoneScreen'.Contents
            //       'BlackBG 2'.Transforms
            // 'BlackBG 2'.Transforms
            CompositionContainerShape^ ContainerShape_406()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 38, 70 };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_407());
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'PhoneScreen'.Transforms
            //     'PhoneScreen'.Contents
            //       'BlackBG 2'.Transforms
            //         'BlackBG 2'.Transforms
            // 'BlackBG 2'.Contents
            CompositionContainerShape^ ContainerShape_407()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_408());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "(_.Progress < 0.85830617) ? Matrix3x2(0,0,0,0,0,0) : Matrix3x2(1,0,0,1,0,0)";
                _reusableExpressionAnimation->SetReferenceParameter("_", _root);
                result->StartAnimation("TransformMatrix", _reusableExpressionAnimation);
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'PhoneScreen'.Transforms
            //     'PhoneScreen'.Contents
            //       'BlackBG 2'.Transforms
            //         'BlackBG 2'.Transforms
            //           'BlackBG 2'.Contents
            // Group: Rectangle 1
            CompositionContainerShape^ ContainerShape_408()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_245());
                return result;
            }

            // 'PhonePic01_Ending'.Transforms
            //   'PhonePic01_Ending'.Contents
            //     'Flash'.Transforms
            // 'PurpleBG'.Transforms
            CompositionContainerShape^ ContainerShape_409()
            {
                auto result = _c->CreateContainerShape();
                result->CenterPoint = { 39.25F, 43.25F };
                result->Offset = { -0.25F, -0.25F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_410());
                return result;
            }

            // 'PhonePic01_Ending'.Transforms
            //   'PhonePic01_Ending'.Contents
            //     'Flash'.Transforms
            //       'PurpleBG'.Transforms
            // 'PurpleBG'.Contents
            CompositionContainerShape^ ContainerShape_410()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_411());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "(_.Progress < 0.817589581) ? Matrix3x2(0,0,0,0,0,0) : Matrix3x2(1,0,0,1,0,0)";
                _reusableExpressionAnimation->SetReferenceParameter("_", _root);
                result->StartAnimation("TransformMatrix", _reusableExpressionAnimation);
                return result;
            }

            // 'PhonePic01_Ending'.Transforms
            //   'PhonePic01_Ending'.Contents
            //     'Flash'.Transforms
            //       'PurpleBG'.Transforms
            //         'PurpleBG'.Contents
            // Group: Group 11
            CompositionContainerShape^ ContainerShape_411()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 34.25F, 34.25F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_246());
                return result;
            }

            // 'Cat'.Transforms
            CompositionContainerShape^ ContainerShape_412()
            {
                auto result = _c->CreateContainerShape();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 39.25F, 43.25F });
                propertySet->InsertVector2("Position", { 39.625F, 37.75F });
                result->CenterPoint = { 39.25F, 43.25F };
                result->Scale = { 0.751999974F, 0.751999974F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_413());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position", Vector2Animation_057());
                auto controller = result->TryGetAnimationController("Position");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'Cat'.Transforms
            // 'Cat'.Contents
            CompositionContainerShape^ ContainerShape_413()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_414());
                shapes->Append(ContainerShape_415());
                shapes->Append(ContainerShape_416());
                shapes->Append(ContainerShape_417());
                shapes->Append(ContainerShape_418());
                shapes->Append(ContainerShape_419());
                shapes->Append(ContainerShape_420());
                shapes->Append(ContainerShape_421());
                shapes->Append(ContainerShape_422());
                shapes->Append(ContainerShape_423());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "(_.Progress < 0.817589581) ? Matrix3x2(0,0,0,0,0,0) : Matrix3x2(1,0,0,1,0,0)";
                _reusableExpressionAnimation->SetReferenceParameter("_", _root);
                result->StartAnimation("TransformMatrix", _reusableExpressionAnimation);
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            // Group: Group 10
            CompositionContainerShape^ ContainerShape_414()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 29.3239994F, 24.1590004F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_247());
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            // Group: Group 9
            CompositionContainerShape^ ContainerShape_415()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 39.5289993F, 24.1590004F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_248());
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            // Group: Group 8
            CompositionContainerShape^ ContainerShape_416()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 40.8320007F, 43.5419998F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_249());
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            // Group: EyeLeft
            CompositionContainerShape^ ContainerShape_417()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 25.4220009F, 30.4619999F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_250());
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            // Group: EyeRight
            CompositionContainerShape^ ContainerShape_418()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 44.0320015F, 30.4619999F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_251());
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            // Group: Group 5
            CompositionContainerShape^ ContainerShape_419()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 34.7270012F, 46.6699982F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_252());
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            // Group: Group 4
            CompositionContainerShape^ ContainerShape_420()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 28.7240009F, 40.6679993F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_253());
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            // Group: Group 3
            CompositionContainerShape^ ContainerShape_421()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 40.7299995F, 40.6679993F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_254());
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            // Group: Group 2
            CompositionContainerShape^ ContainerShape_422()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 34.7270012F, 38.2659988F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_255());
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            // Group: Group 1
            CompositionContainerShape^ ContainerShape_423()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 35.6269989F, 64.6439972F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_256());
                return result;
            }

            // 'PhonePic01_Ending'.Transforms
            //   'PhonePic01_Ending'.Contents
            //     'Flash'.Transforms
            // 'Flash'.Transforms
            CompositionContainerShape^ ContainerShape_424()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 34, 34 };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_425());
                return result;
            }

            // 'PhonePic01_Ending'.Transforms
            //   'PhonePic01_Ending'.Contents
            //     'Flash'.Transforms
            //       'Flash'.Transforms
            // 'Flash'.Contents
            CompositionContainerShape^ ContainerShape_425()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_426());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "(_.Progress < 0.817589581) ? Matrix3x2(0,0,0,0,0,0) : Matrix3x2(1,0,0,1,0,0)";
                _reusableExpressionAnimation->SetReferenceParameter("_", _root);
                result->StartAnimation("TransformMatrix", _reusableExpressionAnimation);
                return result;
            }

            // 'PhonePic01_Ending'.Transforms
            //   'PhonePic01_Ending'.Contents
            //     'Flash'.Transforms
            //       'Flash'.Transforms
            //         'Flash'.Contents
            // Group: Rectangle 1
            CompositionContainerShape^ ContainerShape_426()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_257());
                return result;
            }

            // 'CamButtonStroke'.AncestorTransformFrom_PhoneShell Outlines
            // 'ScreenOutlineCoverup'.AncestorTransformFrom_PhoneShell Outlines
            CompositionContainerShape^ ContainerShape_427()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 213, 106.5F };
                result->Scale = { 0.5F, 0.5F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_428());
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            CompositionContainerShape^ ContainerShape_428()
            {
                auto result = _c->CreateContainerShape();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 46.25F, 86.25F });
                propertySet->InsertVector2("Position", { 0, -0.063000001F });
                result->CenterPoint = { 46.25F, 86.25F };
                result->Scale = { 1.75999999F, 1.75999999F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_429());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position", Vector2Animation_059());
                auto controller = result->TryGetAnimationController("Position");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Scale", _vector2Animation_032);
                controller = result->TryGetAnimationController("Scale");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            // 'ScreenOutlineCoverup'.Transforms
            CompositionContainerShape^ ContainerShape_429()
            {
                auto result = _c->CreateContainerShape();
                result->CenterPoint = { -0.375F, -0.125F };
                result->Offset = { 46.4830017F, 86.4110031F };
                result->Scale = { 1.13636005F, 1.13636005F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_430());
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'ScreenOutlineCoverup'.Transforms
            // 'ScreenOutlineCoverup'.Contents
            CompositionContainerShape^ ContainerShape_430()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_431());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "(_.Progress < 0.451140076) ? Matrix3x2(1,0,0,1,0,0) : Matrix3x2(0,0,0,0,0,0)";
                _reusableExpressionAnimation->SetReferenceParameter("_", _root);
                result->StartAnimation("TransformMatrix", _reusableExpressionAnimation);
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'ScreenOutlineCoverup'.Transforms
            //     'ScreenOutlineCoverup'.Contents
            // Group: Rectangle 1
            CompositionContainerShape^ ContainerShape_431()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { -0.375F, -0.125F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_258());
                return result;
            }

            // 'CamButtonStroke'.AncestorTransformFrom_PhoneShell Outlines
            // 'CamButtonFill'.AncestorTransformFrom_PhoneShell Outlines
            CompositionContainerShape^ ContainerShape_432()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 213, 106.5F };
                result->Scale = { 0.5F, 0.5F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_433());
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            CompositionContainerShape^ ContainerShape_433()
            {
                auto result = _c->CreateContainerShape();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 46.25F, 86.25F });
                propertySet->InsertVector2("Position", { 0, -0.063000001F });
                result->CenterPoint = { 46.25F, 86.25F };
                result->Scale = { 1.75999999F, 1.75999999F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_434());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position", Vector2Animation_061());
                auto controller = result->TryGetAnimationController("Position");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Scale", _vector2Animation_032);
                controller = result->TryGetAnimationController("Scale");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            // 'CamButtonFill'.Transforms
            CompositionContainerShape^ ContainerShape_434()
            {
                auto result = _c->CreateContainerShape();
                result->CenterPoint = { 0, 58 };
                result->Offset = { 46.25F, 88.5130005F };
                result->Scale = { 0.971589983F, 0.971589983F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_435());
                result->StartAnimation("Scale", Vector2Animation_060());
                auto controller = result->TryGetAnimationController("Scale");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'CamButtonFill'.Transforms
            // 'CamButtonFill'.Contents
            CompositionContainerShape^ ContainerShape_435()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_436());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "(_.Progress < 0.197068408) ? Matrix3x2(1,0,0,1,0,0) : Matrix3x2(0,0,0,0,0,0)";
                _reusableExpressionAnimation->SetReferenceParameter("_", _root);
                result->StartAnimation("TransformMatrix", _reusableExpressionAnimation);
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'CamButtonFill'.Transforms
            //     'CamButtonFill'.Contents
            // Group: Ellipse 1
            CompositionContainerShape^ ContainerShape_436()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 0, 58 };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_259());
                return result;
            }

            // 'CamButtonStroke'.AncestorTransformFrom_PhoneShell Outlines
            // 'CamButtonStroke'.AncestorTransformFrom_PhoneShell Outlines
            CompositionContainerShape^ ContainerShape_437()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 213, 106.5F };
                result->Scale = { 0.5F, 0.5F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_438());
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            CompositionContainerShape^ ContainerShape_438()
            {
                auto result = _c->CreateContainerShape();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 46.25F, 86.25F });
                propertySet->InsertVector2("Position", { 0, -0.063000001F });
                result->CenterPoint = { 46.25F, 86.25F };
                result->Scale = { 1.75999999F, 1.75999999F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_439());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "my.Position - my.Anchor";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position", Vector2Animation_063());
                auto controller = result->TryGetAnimationController("Position");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Scale", _vector2Animation_032);
                controller = result->TryGetAnimationController("Scale");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            // 'CamButtonStroke'.Transforms
            CompositionContainerShape^ ContainerShape_439()
            {
                auto result = _c->CreateContainerShape();
                result->CenterPoint = { 0, 58 };
                result->Offset = { 46.25F, 88.5130005F };
                result->Scale = { 0.765910029F, 0.765910029F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_440());
                result->StartAnimation("Scale", Vector2Animation_062());
                auto controller = result->TryGetAnimationController("Scale");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'CamButtonStroke'.Transforms
            // 'CamButtonStroke'.Contents
            CompositionContainerShape^ ContainerShape_440()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_441());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "(_.Progress < 0.0912052095) ? Matrix3x2(0,0,0,0,0,0) : ((_.Progress < 0.140065148) ? Matrix3x2(1,0,0,1,0,0) : Matrix3x2(0,0,0,0,0,0))";
                _reusableExpressionAnimation->SetReferenceParameter("_", _root);
                result->StartAnimation("TransformMatrix", _reusableExpressionAnimation);
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'CamButtonStroke'.Transforms
            //     'CamButtonStroke'.Contents
            // Group: Ellipse 1
            CompositionContainerShape^ ContainerShape_441()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 0, 58 };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_260());
                return result;
            }

            ContainerVisual^ ContainerVisual_001()
            {
                auto result = _c->CreateContainerVisual();
                result->Clip = InsetClip();
                result->Size = { 426, 213 };
                auto children = result->Children;
                children->InsertAtTop(ContainerVisual_002());
                return result;
            }

            // 'PhoneScreen'.AncestorTransformFrom_PhoneShell Outlines 2
            ContainerVisual^ ContainerVisual_002()
            {
                auto result = _c->CreateContainerVisual();
                result->Offset = { 213, 106.5F, 0 };
                result->Scale = { 0.5F, 0.5F, 1 };
                auto children = result->Children;
                children->InsertAtTop(ContainerVisual_003());
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            ContainerVisual^ ContainerVisual_003()
            {
                auto result = _c->CreateContainerVisual();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 46.25F, 86.25F });
                propertySet->InsertVector2("Position", { -239, 15 });
                result->CenterPoint = { 46.25F, 86.25F, 0 };
                auto children = result->Children;
                children->InsertAtTop(ContainerVisual_004());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "Vector3((my.Position.X - my.Anchor.X),(my.Position.Y - my.Anchor.Y),0)";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position.X", _scalarAnimation_m239_to_0);
                auto controller = result->TryGetAnimationController("Position.X");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Position.Y", _scalarAnimation_15_to_m0p063);
                controller = result->TryGetAnimationController("Position.Y");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Scale", Vector3KeyFrameAnimation_001());
                controller = result->TryGetAnimationController("Scale");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            // 'PhoneScreen'.Transforms
            ContainerVisual^ ContainerVisual_004()
            {
                auto result = _c->CreateContainerVisual();
                result->CenterPoint = { 38, 70, 0 };
                result->Offset = { 8.25F, 16.25F, 0 };
                auto children = result->Children;
                children->InsertAtTop(ContainerVisual_005());
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneScreen'.Transforms
            // 'PhoneScreen'.Contents
            ContainerVisual^ ContainerVisual_005()
            {
                auto result = _c->CreateContainerVisual();
                auto children = result->Children;
                children->InsertAtTop(ShapeVisual_001());
                children->InsertAtTop(ContainerVisual_006());
                children->InsertAtTop(ContainerVisual_009());
                children->InsertAtTop(ShapeVisual_004());
                children->InsertAtTop(ContainerVisual_012());
                children->InsertAtTop(ShapeVisual_006());
                children->InsertAtTop(ContainerVisual_014());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "(_.Progress < 0.451140076) ? 0 : ((_.Progress < 0.908794761) ? 1 : 0)";
                _reusableExpressionAnimation->SetReferenceParameter("_", _root);
                result->StartAnimation("Opacity", _reusableExpressionAnimation);
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneScreen'.Transforms
            //     'PhoneScreen'.Contents
            ContainerVisual^ ContainerVisual_006()
            {
                auto result = _c->CreateContainerVisual();
                result->Clip = _insetClip;
                result->Size = { 76, 140 };
                auto children = result->Children;
                children->InsertAtTop(ContainerVisual_007());
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            ContainerVisual^ ContainerVisual_007()
            {
                auto result = _c->CreateContainerVisual();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 0, 0 });
                propertySet->InsertVector2("Position", { 38, 70 });
                result->Offset = { 38, 70, 0 };
                auto children = result->Children;
                children->InsertAtTop(ContainerVisual_008());
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            // 'PhonePic03'.Contents
            ContainerVisual^ ContainerVisual_008()
            {
                auto result = _c->CreateContainerVisual();
                result->CenterPoint = { 34, 34, 0 };
                result->Offset = { -34, 78, 0 };
                auto children = result->Children;
                children->InsertAtTop(ShapeVisual_002());
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneScreen'.Transforms
            //     'PhoneScreen'.Contents
            ContainerVisual^ ContainerVisual_009()
            {
                auto result = _c->CreateContainerVisual();
                result->Clip = _insetClip;
                result->Size = { 76, 140 };
                auto children = result->Children;
                children->InsertAtTop(ContainerVisual_010());
                return result;
            }

            // 'PhonePic02'.AncestorTransformFrom_PicMover
            ContainerVisual^ ContainerVisual_010()
            {
                auto result = _c->CreateContainerVisual();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 0, 0 });
                propertySet->InsertVector2("Position", { 38, 70 });
                result->Offset = { 38, 70, 0 };
                auto children = result->Children;
                children->InsertAtTop(ContainerVisual_011());
                return result;
            }

            // 'PhonePic02'.AncestorTransformFrom_PicMover
            // 'PhonePic02'.Contents
            ContainerVisual^ ContainerVisual_011()
            {
                auto result = _c->CreateContainerVisual();
                result->CenterPoint = { 34, 34, 0 };
                result->Offset = { -34, 6, 0 };
                auto children = result->Children;
                children->InsertAtTop(ShapeVisual_003());
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneScreen'.Transforms
            //     'PhoneScreen'.Contents
            ContainerVisual^ ContainerVisual_012()
            {
                auto result = _c->CreateContainerVisual();
                result->Clip = _insetClip;
                result->Size = { 76, 140 };
                auto children = result->Children;
                children->InsertAtTop(ContainerVisual_013());
                return result;
            }

            // 'PhonePic01'.Contents
            ContainerVisual^ ContainerVisual_013()
            {
                auto result = _c->CreateContainerVisual();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 34, 34 });
                propertySet->InsertVector2("Position", { 36.7999992F, 60.0999985F });
                result->CenterPoint = { 34, 34, 0 };
                result->Scale = { 1.77999997F, 1.77999997F, 1 };
                auto children = result->Children;
                children->InsertAtTop(ShapeVisual_005());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "Vector3((my.Position.X - my.Anchor.X),(my.Position.Y - my.Anchor.Y),0)";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position", Vector2Animation_003());
                auto controller = result->TryGetAnimationController("Position");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Scale", Vector3KeyFrameAnimation_000());
                controller = result->TryGetAnimationController("Scale");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneScreen'.Transforms
            //     'PhoneScreen'.Contents
            ContainerVisual^ ContainerVisual_014()
            {
                auto result = _c->CreateContainerVisual();
                result->Clip = _insetClip;
                result->Size = { 76, 140 };
                auto children = result->Children;
                children->InsertAtTop(ContainerVisual_015());
                return result;
            }

            // 'PhonePic01_Ending'.Transforms
            ContainerVisual^ ContainerVisual_015()
            {
                auto result = _c->CreateContainerVisual();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 34, 34 });
                propertySet->InsertVector2("Position", { 36.7999992F, 60.0999985F });
                result->CenterPoint = { 34, 34, 0 };
                result->Scale = { 1.77999997F, 1.77999997F, 1 };
                auto children = result->Children;
                children->InsertAtTop(ContainerVisual_016());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "Vector3((my.Position.X - my.Anchor.X),(my.Position.Y - my.Anchor.Y),0)";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                return result;
            }

            // 'PhonePic01_Ending'.Transforms
            // 'PhonePic01_Ending'.Contents
            ContainerVisual^ ContainerVisual_016()
            {
                auto result = _c->CreateContainerVisual();
                auto children = result->Children;
                children->InsertAtTop(ShapeVisual_007());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "(_.Progress < 0.85830617) ? 0 : 1";
                _reusableExpressionAnimation->SetReferenceParameter("_", _root);
                result->StartAnimation("Opacity", _reusableExpressionAnimation);
                return result;
            }

            ContainerVisual^ ContainerVisual_017()
            {
                auto result = _c->CreateContainerVisual();
                result->Clip = _insetClip;
                result->Size = { 426, 213 };
                auto children = result->Children;
                children->InsertAtTop(ContainerVisual_018());
                return result;
            }

            // 'Laptop'.AncestorTransformFrom_LaptopNull
            ContainerVisual^ ContainerVisual_018()
            {
                auto result = _c->CreateContainerVisual();
                result->Offset = { 213, 106.5F, 0 };
                result->Scale = { 0.5F, 0.5F, 1 };
                auto children = result->Children;
                children->InsertAtTop(ContainerVisual_019());
                return result;
            }

            // 'Laptop Null Null'.Transforms
            ContainerVisual^ ContainerVisual_019()
            {
                auto result = _c->CreateContainerVisual();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 0, 0 });
                propertySet->InsertVector2("Position", { 0.125F, 0 });
                result->Scale = { 1.15900004F, 1.15900004F, 1 };
                auto children = result->Children;
                children->InsertAtTop(ContainerVisual_020());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "Vector3((my.Position.X - my.Anchor.X),(my.Position.Y - my.Anchor.Y),0)";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position.X", _scalarAnimation_0p125_to_m143p875);
                auto controller = result->TryGetAnimationController("Position.X");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Position.Y", _scalarAnimation_0_to_m7p3);
                controller = result->TryGetAnimationController("Position.Y");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Scale", Vector3KeyFrameAnimation_004());
                controller = result->TryGetAnimationController("Scale");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'LaptopNull'.Transforms
            ContainerVisual^ ContainerVisual_020()
            {
                auto result = _c->CreateContainerVisual();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 0, 0 });
                propertySet->InsertVector2("Position", { 47.3470001F, 0 });
                result->Scale = { 0.862810016F, 0.862810016F, 1 };
                auto children = result->Children;
                children->InsertAtTop(ContainerVisual_021());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "Vector3((my.Position.X - my.Anchor.X),(my.Position.Y - my.Anchor.Y),0)";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position", Vector2Animation_029());
                auto controller = result->TryGetAnimationController("Position");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Scale", Vector3KeyFrameAnimation_003());
                controller = result->TryGetAnimationController("Scale");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'Laptop'.Transforms
            ContainerVisual^ ContainerVisual_021()
            {
                auto result = _c->CreateContainerVisual();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 243.5F, 130 });
                propertySet->InsertVector2("Position", { 79.5F, -6 });
                result->CenterPoint = { 243.5F, 130, 0 };
                auto children = result->Children;
                children->InsertAtTop(ContainerVisual_022());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "Vector3((my.Position.X - my.Anchor.X),(my.Position.Y - my.Anchor.Y),0)";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position", Vector2Animation_028());
                auto controller = result->TryGetAnimationController("Position");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'Laptop'.Transforms
            // 'Laptop'.Contents
            ContainerVisual^ ContainerVisual_022()
            {
                auto result = _c->CreateContainerVisual();
                auto children = result->Children;
                children->InsertAtTop(ShapeVisual_009());
                children->InsertAtTop(ContainerVisual_023());
                children->InsertAtTop(ShapeVisual_011());
                children->InsertAtTop(ContainerVisual_029());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "(_.Progress < 0.208469048) ? 0 : 1";
                _reusableExpressionAnimation->SetReferenceParameter("_", _root);
                result->StartAnimation("Opacity", _reusableExpressionAnimation);
                return result;
            }

            // 'Laptop'.Transforms
            //   'Laptop'.Contents
            ContainerVisual^ ContainerVisual_023()
            {
                auto result = _c->CreateContainerVisual();
                result->Clip = _insetClip;
                result->Size = { 487, 260 };
                auto children = result->Children;
                children->InsertAtTop(ContainerVisual_024());
                return result;
            }

            // 'PhonePic01 InApp'.AncestorTransformFrom_GoldenGate
            ContainerVisual^ ContainerVisual_024()
            {
                auto result = _c->CreateContainerVisual();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 0, 0 });
                propertySet->InsertVector2("Position", { -134.5F, 154 });
                result->Scale = { 0.629999995F, 0.629999995F, 1 };
                auto children = result->Children;
                children->InsertAtTop(ContainerVisual_025());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "Vector3((my.Position.X - my.Anchor.X),(my.Position.Y - my.Anchor.Y),0)";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position", Vector2Animation_023());
                auto controller = result->TryGetAnimationController("Position");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Scale", Vector3KeyFrameAnimation_002());
                controller = result->TryGetAnimationController("Scale");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'PhonePic01 InApp'.AncestorTransformFrom_GoldenGate
            // 'LaptopTop'.Transforms
            ContainerVisual^ ContainerVisual_025()
            {
                auto result = _c->CreateContainerVisual();
                result->CenterPoint = { 164.25F, 98.25F, 0 };
                result->Offset = { -163.75F, -100.25F, 0 };
                auto children = result->Children;
                children->InsertAtTop(ContainerVisual_026());
                return result;
            }

            // 'GoldenGate'.Transforms
            ContainerVisual^ ContainerVisual_026()
            {
                auto result = _c->CreateContainerVisual();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 106.25F, 89.25F });
                propertySet->InsertVector2("Position", { 164.25F, 121.25F });
                result->CenterPoint = { 106.25F, 89.25F, 0 };
                auto children = result->Children;
                children->InsertAtTop(ContainerVisual_027());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "Vector3((my.Position.X - my.Anchor.X),(my.Position.Y - my.Anchor.Y),0)";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position", _vector2Animation_014);
                auto controller = result->TryGetAnimationController("Position");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'GoldenGate'.Transforms
            // 'PhonePic01 InApp'.Transforms
            ContainerVisual^ ContainerVisual_027()
            {
                auto result = _c->CreateContainerVisual();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 34, 34 });
                propertySet->InsertVector2("Position", { 92.2570038F, 42.25F });
                result->CenterPoint = { 34, 34, 0 };
                result->Offset = { 58.2570038F, 8.25F, 0 };
                auto children = result->Children;
                children->InsertAtTop(ContainerVisual_028());
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PhonePic01 InApp'.Transforms
            // 'PhonePic01 InApp'.Contents
            ContainerVisual^ ContainerVisual_028()
            {
                auto result = _c->CreateContainerVisual();
                auto children = result->Children;
                children->InsertAtTop(ShapeVisual_010());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "(_.Progress < 0.640065134) ? 0 : 1";
                _reusableExpressionAnimation->SetReferenceParameter("_", _root);
                result->StartAnimation("Opacity", _reusableExpressionAnimation);
                return result;
            }

            // 'Laptop'.Transforms
            //   'Laptop'.Contents
            ContainerVisual^ ContainerVisual_029()
            {
                auto result = _c->CreateContainerVisual();
                result->Clip = _insetClip;
                result->Size = { 487, 260 };
                auto children = result->Children;
                children->InsertAtTop(ContainerVisual_030());
                return result;
            }

            // 'PhonePic01'.AncestorTransformFrom_LaptopNull
            ContainerVisual^ ContainerVisual_030()
            {
                auto result = _c->CreateContainerVisual();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 0, 0 });
                propertySet->InsertVector2("Position", { -134.5F, 154 });
                result->Scale = { 0.629999995F, 0.629999995F, 1 };
                auto children = result->Children;
                children->InsertAtTop(ContainerVisual_031());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "Vector3((my.Position.X - my.Anchor.X),(my.Position.Y - my.Anchor.Y),0)";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position", Vector2Animation_027());
                auto controller = result->TryGetAnimationController("Position");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Scale", _vector3KeyFrameAnimation_002);
                controller = result->TryGetAnimationController("Scale");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'PhonePic01'.AncestorTransformFrom_LaptopNull
            // 'PhonePic01'.Transforms
            ContainerVisual^ ContainerVisual_031()
            {
                auto result = _c->CreateContainerVisual();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 34, 34 });
                propertySet->InsertVector2("Position", { 113.814003F, -36.6360016F });
                result->CenterPoint = { 34, 34, 0 };
                result->Offset = { 79.814003F, -70.6360016F, 0 };
                result->Scale = { 0.689999998F, 0.689999998F, 1 };
                auto children = result->Children;
                children->InsertAtTop(ContainerVisual_032());
                return result;
            }

            // 'PhonePic01'.AncestorTransformFrom_LaptopNull
            //   'PhonePic01'.Transforms
            // 'PhonePic01'.Contents
            ContainerVisual^ ContainerVisual_032()
            {
                auto result = _c->CreateContainerVisual();
                auto children = result->Children;
                children->InsertAtTop(ShapeVisual_012());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "(_.Progress < 0.780130267) ? 0 : 1";
                _reusableExpressionAnimation->SetReferenceParameter("_", _root);
                result->StartAnimation("Opacity", _reusableExpressionAnimation);
                return result;
            }

            ContainerVisual^ ContainerVisual_033()
            {
                auto result = _c->CreateContainerVisual();
                result->Clip = _insetClip;
                result->Size = { 426, 213 };
                auto children = result->Children;
                children->InsertAtTop(ContainerVisual_034());
                return result;
            }

            // 'PhonePic01'.AncestorTransformFrom_PhonePic01 Null
            ContainerVisual^ ContainerVisual_034()
            {
                auto result = _c->CreateContainerVisual();
                result->Offset = { 213, 106.5F, 0 };
                result->Scale = { 0.5F, 0.5F, 1 };
                auto children = result->Children;
                children->InsertAtTop(ContainerVisual_035());
                return result;
            }

            // 'Laptop Null Null'.Transforms
            ContainerVisual^ ContainerVisual_035()
            {
                auto result = _c->CreateContainerVisual();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 0, 0 });
                propertySet->InsertVector2("Position", { 0.125F, 0 });
                result->Scale = { 1.15900004F, 1.15900004F, 1 };
                auto children = result->Children;
                children->InsertAtTop(ContainerVisual_036());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "Vector3((my.Position.X - my.Anchor.X),(my.Position.Y - my.Anchor.Y),0)";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position.X", _scalarAnimation_0p125_to_m143p875);
                auto controller = result->TryGetAnimationController("Position.X");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Position.Y", _scalarAnimation_0_to_m7p3);
                controller = result->TryGetAnimationController("Position.Y");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Scale", _vector3KeyFrameAnimation_004);
                controller = result->TryGetAnimationController("Scale");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'LaptopNull'.Transforms
            ContainerVisual^ ContainerVisual_036()
            {
                auto result = _c->CreateContainerVisual();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 0, 0 });
                propertySet->InsertVector2("Position", { 47.3470001F, 0 });
                result->Scale = { 0.862810016F, 0.862810016F, 1 };
                auto children = result->Children;
                children->InsertAtTop(ContainerVisual_037());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "Vector3((my.Position.X - my.Anchor.X),(my.Position.Y - my.Anchor.Y),0)";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position", Vector2Animation_047());
                auto controller = result->TryGetAnimationController("Position");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Scale", _vector3KeyFrameAnimation_003);
                controller = result->TryGetAnimationController("Scale");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'CursorPic Null'.Transforms
            ContainerVisual^ ContainerVisual_037()
            {
                auto result = _c->CreateContainerVisual();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 0, 0 });
                propertySet->InsertVector2("Position", { -0.108000003F, 0 });
                result->Scale = { 0.862810016F, 0.862810016F, 1 };
                auto children = result->Children;
                children->InsertAtTop(ContainerVisual_038());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "Vector3((my.Position.X - my.Anchor.X),(my.Position.Y - my.Anchor.Y),0)";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position", Vector2Animation_046());
                auto controller = result->TryGetAnimationController("Position");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'PhonePic01 Null'.Transforms
            ContainerVisual^ ContainerVisual_038()
            {
                auto result = _c->CreateContainerVisual();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 0, 0 });
                propertySet->InsertVector2("Position", { 3.5F, -23 });
                auto children = result->Children;
                children->InsertAtTop(ContainerVisual_039());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "Vector3((my.Position.X - my.Anchor.X),(my.Position.Y - my.Anchor.Y),0)";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position", Vector2Animation_045());
                auto controller = result->TryGetAnimationController("Position");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Scale", Vector3KeyFrameAnimation_006());
                controller = result->TryGetAnimationController("Scale");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'PhonePic01'.Transforms
            ContainerVisual^ ContainerVisual_039()
            {
                auto result = _c->CreateContainerVisual();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 34, 34 });
                propertySet->InsertVector2("Position", { -92.6179962F, -32.632F });
                result->CenterPoint = { 34, 34, 0 };
                result->Scale = { 1.76168001F, 1.76168001F, 1 };
                auto children = result->Children;
                children->InsertAtTop(ContainerVisual_040());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "Vector3((my.Position.X - my.Anchor.X),(my.Position.Y - my.Anchor.Y),0)";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position.X", _scalarAnimation_m92p618_to_m19p593);
                auto controller = result->TryGetAnimationController("Position.X");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Position.Y", _scalarAnimation_m32p632_to_m19p883);
                controller = result->TryGetAnimationController("Position.Y");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Scale", Vector3KeyFrameAnimation_005());
                controller = result->TryGetAnimationController("Scale");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'PhonePic01'.Transforms
            // 'PhonePic01'.Contents
            ContainerVisual^ ContainerVisual_040()
            {
                auto result = _c->CreateContainerVisual();
                auto children = result->Children;
                children->InsertAtTop(ShapeVisual_014());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "(_.Progress < 0.185667753) ? 0 : ((_.Progress < 0.780130267) ? 1 : 0)";
                _reusableExpressionAnimation->SetReferenceParameter("_", _root);
                result->StartAnimation("Opacity", _reusableExpressionAnimation);
                return result;
            }

            ContainerVisual^ ContainerVisual_041()
            {
                auto result = _c->CreateContainerVisual();
                result->Clip = _insetClip;
                result->Size = { 426, 213 };
                auto children = result->Children;
                children->InsertAtTop(ContainerVisual_042());
                return result;
            }

            // 'PhoneScreen'.AncestorTransformFrom_PhoneShell Outlines 3
            ContainerVisual^ ContainerVisual_042()
            {
                auto result = _c->CreateContainerVisual();
                result->Offset = { 213, 106.5F, 0 };
                result->Scale = { 0.5F, 0.5F, 1 };
                auto children = result->Children;
                children->InsertAtTop(ContainerVisual_043());
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            ContainerVisual^ ContainerVisual_043()
            {
                auto result = _c->CreateContainerVisual();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 46.25F, 86.25F });
                propertySet->InsertVector2("Position", { -239, 15 });
                result->CenterPoint = { 46.25F, 86.25F, 0 };
                auto children = result->Children;
                children->InsertAtTop(ContainerVisual_044());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "Vector3((my.Position.X - my.Anchor.X),(my.Position.Y - my.Anchor.Y),0)";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position.X", _scalarAnimation_m239_to_0);
                auto controller = result->TryGetAnimationController("Position.X");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Position.Y", _scalarAnimation_15_to_m0p063);
                controller = result->TryGetAnimationController("Position.Y");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Scale", _vector3KeyFrameAnimation_001);
                controller = result->TryGetAnimationController("Scale");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            // 'PhoneShell Outlines 3'.Transforms
            ContainerVisual^ ContainerVisual_044()
            {
                auto result = _c->CreateContainerVisual();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 46.25F, 86.25F });
                propertySet->InsertVector2("Position", { 46.25F, 86.25F });
                result->CenterPoint = { 46.25F, 86.25F, 0 };
                auto children = result->Children;
                children->InsertAtTop(ContainerVisual_045());
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneShell Outlines 3'.Transforms
            // 'PhoneScreen'.Transforms
            ContainerVisual^ ContainerVisual_045()
            {
                auto result = _c->CreateContainerVisual();
                result->CenterPoint = { 38, 70, 0 };
                result->Offset = { 8.25F, 16.25F, 0 };
                auto children = result->Children;
                children->InsertAtTop(ContainerVisual_046());
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneShell Outlines 3'.Transforms
            //     'PhoneScreen'.Transforms
            // 'PhoneScreen'.Contents
            ContainerVisual^ ContainerVisual_046()
            {
                auto result = _c->CreateContainerVisual();
                auto children = result->Children;
                children->InsertAtTop(ShapeVisual_016());
                children->InsertAtTop(ContainerVisual_047());
                children->InsertAtTop(ContainerVisual_050());
                children->InsertAtTop(ShapeVisual_019());
                children->InsertAtTop(ContainerVisual_053());
                children->InsertAtTop(ShapeVisual_021());
                children->InsertAtTop(ContainerVisual_055());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "(_.Progress < 0.908794761) ? 0 : 1";
                _reusableExpressionAnimation->SetReferenceParameter("_", _root);
                result->StartAnimation("Opacity", _reusableExpressionAnimation);
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneShell Outlines 3'.Transforms
            //     'PhoneScreen'.Transforms
            //       'PhoneScreen'.Contents
            ContainerVisual^ ContainerVisual_047()
            {
                auto result = _c->CreateContainerVisual();
                result->Clip = _insetClip;
                result->Size = { 76, 140 };
                auto children = result->Children;
                children->InsertAtTop(ContainerVisual_048());
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            ContainerVisual^ ContainerVisual_048()
            {
                auto result = _c->CreateContainerVisual();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 0, 0 });
                propertySet->InsertVector2("Position", { 38, 70 });
                result->Offset = { 38, 70, 0 };
                auto children = result->Children;
                children->InsertAtTop(ContainerVisual_049());
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            // 'PhonePic03'.Contents
            ContainerVisual^ ContainerVisual_049()
            {
                auto result = _c->CreateContainerVisual();
                result->CenterPoint = { 34, 34, 0 };
                result->Offset = { -34, 78, 0 };
                auto children = result->Children;
                children->InsertAtTop(ShapeVisual_017());
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneShell Outlines 3'.Transforms
            //     'PhoneScreen'.Transforms
            //       'PhoneScreen'.Contents
            ContainerVisual^ ContainerVisual_050()
            {
                auto result = _c->CreateContainerVisual();
                result->Clip = _insetClip;
                result->Size = { 76, 140 };
                auto children = result->Children;
                children->InsertAtTop(ContainerVisual_051());
                return result;
            }

            // 'PhonePic02'.AncestorTransformFrom_PicMover
            ContainerVisual^ ContainerVisual_051()
            {
                auto result = _c->CreateContainerVisual();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 0, 0 });
                propertySet->InsertVector2("Position", { 38, 70 });
                result->Offset = { 38, 70, 0 };
                auto children = result->Children;
                children->InsertAtTop(ContainerVisual_052());
                return result;
            }

            // 'PhonePic02'.AncestorTransformFrom_PicMover
            // 'PhonePic02'.Contents
            ContainerVisual^ ContainerVisual_052()
            {
                auto result = _c->CreateContainerVisual();
                result->CenterPoint = { 34, 34, 0 };
                result->Offset = { -34, 6, 0 };
                auto children = result->Children;
                children->InsertAtTop(ShapeVisual_018());
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneShell Outlines 3'.Transforms
            //     'PhoneScreen'.Transforms
            //       'PhoneScreen'.Contents
            ContainerVisual^ ContainerVisual_053()
            {
                auto result = _c->CreateContainerVisual();
                result->Clip = _insetClip;
                result->Size = { 76, 140 };
                auto children = result->Children;
                children->InsertAtTop(ContainerVisual_054());
                return result;
            }

            // 'PhonePic01'.Contents
            ContainerVisual^ ContainerVisual_054()
            {
                auto result = _c->CreateContainerVisual();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 34, 34 });
                propertySet->InsertVector2("Position", { 36.7999992F, 60.0999985F });
                result->CenterPoint = { 34, 34, 0 };
                result->Scale = { 1.77999997F, 1.77999997F, 1 };
                auto children = result->Children;
                children->InsertAtTop(ShapeVisual_020());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "Vector3((my.Position.X - my.Anchor.X),(my.Position.Y - my.Anchor.Y),0)";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position", Vector2Animation_052());
                auto controller = result->TryGetAnimationController("Position");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Scale", _vector3KeyFrameAnimation_000);
                controller = result->TryGetAnimationController("Scale");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneShell Outlines 3'.Transforms
            //     'PhoneScreen'.Transforms
            //       'PhoneScreen'.Contents
            ContainerVisual^ ContainerVisual_055()
            {
                auto result = _c->CreateContainerVisual();
                result->Clip = _insetClip;
                result->Size = { 76, 140 };
                auto children = result->Children;
                children->InsertAtTop(ContainerVisual_056());
                return result;
            }

            // 'PhonePic01_Ending'.Transforms
            ContainerVisual^ ContainerVisual_056()
            {
                auto result = _c->CreateContainerVisual();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 34, 34 });
                propertySet->InsertVector2("Position", { 36.7999992F, 60.0999985F });
                result->CenterPoint = { 34, 34, 0 };
                result->Scale = { 1.77999997F, 1.77999997F, 1 };
                auto children = result->Children;
                children->InsertAtTop(ContainerVisual_057());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "Vector3((my.Position.X - my.Anchor.X),(my.Position.Y - my.Anchor.Y),0)";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                return result;
            }

            // 'PhonePic01_Ending'.Transforms
            // 'PhonePic01_Ending'.Contents
            ContainerVisual^ ContainerVisual_057()
            {
                auto result = _c->CreateContainerVisual();
                auto children = result->Children;
                children->InsertAtTop(ShapeVisual_022());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "(_.Progress < 0.85830617) ? 0 : 1";
                _reusableExpressionAnimation->SetReferenceParameter("_", _root);
                result->StartAnimation("Opacity", _reusableExpressionAnimation);
                return result;
            }

            ContainerVisual^ ContainerVisual_058()
            {
                auto result = _c->CreateContainerVisual();
                result->Clip = _insetClip;
                result->Size = { 426, 213 };
                auto children = result->Children;
                children->InsertAtTop(ContainerVisual_059());
                return result;
            }

            // 'PhoneScreen'.AncestorTransformFrom_PhoneShell Outlines
            ContainerVisual^ ContainerVisual_059()
            {
                auto result = _c->CreateContainerVisual();
                result->Offset = { 213, 106.5F, 0 };
                result->Scale = { 0.5F, 0.5F, 1 };
                auto children = result->Children;
                children->InsertAtTop(ContainerVisual_060());
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            ContainerVisual^ ContainerVisual_060()
            {
                auto result = _c->CreateContainerVisual();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 46.25F, 86.25F });
                propertySet->InsertVector2("Position", { 0, -0.063000001F });
                result->CenterPoint = { 46.25F, 86.25F, 0 };
                result->Scale = { 1.75999999F, 1.75999999F, 1 };
                auto children = result->Children;
                children->InsertAtTop(ContainerVisual_061());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "Vector3((my.Position.X - my.Anchor.X),(my.Position.Y - my.Anchor.Y),0)";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position", Vector2Animation_058());
                auto controller = result->TryGetAnimationController("Position");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Scale", Vector3KeyFrameAnimation_007());
                controller = result->TryGetAnimationController("Scale");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            // 'PhoneScreen'.Transforms
            ContainerVisual^ ContainerVisual_061()
            {
                auto result = _c->CreateContainerVisual();
                result->CenterPoint = { 38, 70, 0 };
                result->Offset = { 8.25F, 16.25F, 0 };
                auto children = result->Children;
                children->InsertAtTop(ContainerVisual_062());
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'PhoneScreen'.Transforms
            // 'PhoneScreen'.Contents
            ContainerVisual^ ContainerVisual_062()
            {
                auto result = _c->CreateContainerVisual();
                auto children = result->Children;
                children->InsertAtTop(ShapeVisual_024());
                children->InsertAtTop(ContainerVisual_063());
                children->InsertAtTop(ContainerVisual_066());
                children->InsertAtTop(ShapeVisual_027());
                children->InsertAtTop(ContainerVisual_069());
                children->InsertAtTop(ShapeVisual_029());
                children->InsertAtTop(ContainerVisual_071());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "(_.Progress < 0.451140076) ? 1 : 0";
                _reusableExpressionAnimation->SetReferenceParameter("_", _root);
                result->StartAnimation("Opacity", _reusableExpressionAnimation);
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'PhoneScreen'.Transforms
            //     'PhoneScreen'.Contents
            ContainerVisual^ ContainerVisual_063()
            {
                auto result = _c->CreateContainerVisual();
                result->Clip = _insetClip;
                result->Size = { 76, 140 };
                auto children = result->Children;
                children->InsertAtTop(ContainerVisual_064());
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            ContainerVisual^ ContainerVisual_064()
            {
                auto result = _c->CreateContainerVisual();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 0, 0 });
                propertySet->InsertVector2("Position", { 38, 70 });
                result->Offset = { 38, 70, 0 };
                auto children = result->Children;
                children->InsertAtTop(ContainerVisual_065());
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            // 'PhonePic03'.Contents
            ContainerVisual^ ContainerVisual_065()
            {
                auto result = _c->CreateContainerVisual();
                result->CenterPoint = { 34, 34, 0 };
                result->Offset = { -34, 78, 0 };
                auto children = result->Children;
                children->InsertAtTop(ShapeVisual_025());
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'PhoneScreen'.Transforms
            //     'PhoneScreen'.Contents
            ContainerVisual^ ContainerVisual_066()
            {
                auto result = _c->CreateContainerVisual();
                result->Clip = _insetClip;
                result->Size = { 76, 140 };
                auto children = result->Children;
                children->InsertAtTop(ContainerVisual_067());
                return result;
            }

            // 'PhonePic02'.AncestorTransformFrom_PicMover
            ContainerVisual^ ContainerVisual_067()
            {
                auto result = _c->CreateContainerVisual();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 0, 0 });
                propertySet->InsertVector2("Position", { 38, 70 });
                result->Offset = { 38, 70, 0 };
                auto children = result->Children;
                children->InsertAtTop(ContainerVisual_068());
                return result;
            }

            // 'PhonePic02'.AncestorTransformFrom_PicMover
            // 'PhonePic02'.Contents
            ContainerVisual^ ContainerVisual_068()
            {
                auto result = _c->CreateContainerVisual();
                result->CenterPoint = { 34, 34, 0 };
                result->Offset = { -34, 6, 0 };
                auto children = result->Children;
                children->InsertAtTop(ShapeVisual_026());
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'PhoneScreen'.Transforms
            //     'PhoneScreen'.Contents
            ContainerVisual^ ContainerVisual_069()
            {
                auto result = _c->CreateContainerVisual();
                result->Clip = _insetClip;
                result->Size = { 76, 140 };
                auto children = result->Children;
                children->InsertAtTop(ContainerVisual_070());
                return result;
            }

            // 'PhonePic01'.Contents
            ContainerVisual^ ContainerVisual_070()
            {
                auto result = _c->CreateContainerVisual();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 34, 34 });
                propertySet->InsertVector2("Position", { 36.7999992F, 60.0999985F });
                result->CenterPoint = { 34, 34, 0 };
                result->Scale = { 1.77999997F, 1.77999997F, 1 };
                auto children = result->Children;
                children->InsertAtTop(ShapeVisual_028());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "Vector3((my.Position.X - my.Anchor.X),(my.Position.Y - my.Anchor.Y),0)";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                result->StartAnimation("Position", Vector2Animation_056());
                auto controller = result->TryGetAnimationController("Position");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("Scale", _vector3KeyFrameAnimation_000);
                controller = result->TryGetAnimationController("Scale");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'PhoneScreen'.Transforms
            //     'PhoneScreen'.Contents
            ContainerVisual^ ContainerVisual_071()
            {
                auto result = _c->CreateContainerVisual();
                result->Clip = _insetClip;
                result->Size = { 76, 140 };
                auto children = result->Children;
                children->InsertAtTop(ContainerVisual_072());
                return result;
            }

            // 'PhonePic01_Ending'.Transforms
            ContainerVisual^ ContainerVisual_072()
            {
                auto result = _c->CreateContainerVisual();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Anchor", { 34, 34 });
                propertySet->InsertVector2("Position", { 36.7999992F, 60.0999985F });
                result->CenterPoint = { 34, 34, 0 };
                result->Scale = { 1.77999997F, 1.77999997F, 1 };
                auto children = result->Children;
                children->InsertAtTop(ContainerVisual_073());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "Vector3((my.Position.X - my.Anchor.X),(my.Position.Y - my.Anchor.Y),0)";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                return result;
            }

            // 'PhonePic01_Ending'.Transforms
            // 'PhonePic01_Ending'.Contents
            ContainerVisual^ ContainerVisual_073()
            {
                auto result = _c->CreateContainerVisual();
                auto children = result->Children;
                children->InsertAtTop(ShapeVisual_030());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "(_.Progress < 0.85830617) ? 0 : 1";
                _reusableExpressionAnimation->SetReferenceParameter("_", _root);
                result->StartAnimation("Opacity", _reusableExpressionAnimation);
                return result;
            }

            CubicBezierEasingFunction^ CubicBezierEasingFunction_000()
            {
                return _c->CreateCubicBezierEasingFunction({ 0.629999995F, 0 }, { 0.833000004F, 0.833000004F });
            }

            CubicBezierEasingFunction^ CubicBezierEasingFunction_001()
            {
                return _c->CreateCubicBezierEasingFunction({ 0.166999996F, 0.166999996F }, { 0.280000001F, 1 });
            }

            CubicBezierEasingFunction^ CubicBezierEasingFunction_002()
            {
                return _cubicBezierEasingFunction_002 = _c->CreateCubicBezierEasingFunction({ 0.370000005F, 0 }, { 0.230000004F, 1 });
            }

            CubicBezierEasingFunction^ CubicBezierEasingFunction_003()
            {
                return _cubicBezierEasingFunction_003 = _c->CreateCubicBezierEasingFunction({ 0.333000004F, 0 }, { 0.666999996F, 1 });
            }

            CubicBezierEasingFunction^ CubicBezierEasingFunction_004()
            {
                return _cubicBezierEasingFunction_004 = _c->CreateCubicBezierEasingFunction({ 0.166999996F, 0 }, { 0.833000004F, 1 });
            }

            CubicBezierEasingFunction^ CubicBezierEasingFunction_005()
            {
                return _cubicBezierEasingFunction_005 = _c->CreateCubicBezierEasingFunction({ 0.333000004F, 0 }, { 0.25F, 1 });
            }

            CubicBezierEasingFunction^ CubicBezierEasingFunction_006()
            {
                return _cubicBezierEasingFunction_006 = _c->CreateCubicBezierEasingFunction({ 0.333000004F, 0 }, { 0, 1 });
            }

            CubicBezierEasingFunction^ CubicBezierEasingFunction_007()
            {
                return _cubicBezierEasingFunction_007 = _c->CreateCubicBezierEasingFunction({ 0.166999996F, 0.166999996F }, { 0.833000004F, 0.833000004F });
            }

            CubicBezierEasingFunction^ CubicBezierEasingFunction_008()
            {
                return _cubicBezierEasingFunction_008 = _c->CreateCubicBezierEasingFunction({ 0.166999996F, 0.166999996F }, { 0, 1 });
            }

            CubicBezierEasingFunction^ CubicBezierEasingFunction_009()
            {
                return _cubicBezierEasingFunction_009 = _c->CreateCubicBezierEasingFunction({ 0.333000004F, 0.333000004F }, { 0.833000004F, 0.833000004F });
            }

            CubicBezierEasingFunction^ CubicBezierEasingFunction_010()
            {
                return _c->CreateCubicBezierEasingFunction({ 0.186000004F, 0.0379999988F }, { 0.703000009F, 1 });
            }

            CubicBezierEasingFunction^ CubicBezierEasingFunction_011()
            {
                return _cubicBezierEasingFunction_011 = _c->CreateCubicBezierEasingFunction({ 0.166999996F, 0.166999996F }, { 0.319999993F, 1 });
            }

            CubicBezierEasingFunction^ CubicBezierEasingFunction_012()
            {
                return _cubicBezierEasingFunction_012 = _c->CreateCubicBezierEasingFunction({ 0.166999996F, 0.166999996F }, { 0.270000011F, 0.270000011F });
            }

            CubicBezierEasingFunction^ CubicBezierEasingFunction_013()
            {
                return _cubicBezierEasingFunction_013 = _c->CreateCubicBezierEasingFunction({ 0.349999994F, 0 }, { 0.270000011F, 1 });
            }

            CubicBezierEasingFunction^ CubicBezierEasingFunction_014()
            {
                return _cubicBezierEasingFunction_014 = _c->CreateCubicBezierEasingFunction({ 0.333000004F, 0 }, { 0.239999995F, 1 });
            }

            CubicBezierEasingFunction^ CubicBezierEasingFunction_015()
            {
                return _c->CreateCubicBezierEasingFunction({ 0.333000004F, 0 }, { 0.280000001F, 1 });
            }

            CubicBezierEasingFunction^ CubicBezierEasingFunction_016()
            {
                return _cubicBezierEasingFunction_016 = _c->CreateCubicBezierEasingFunction({ 0.333000004F, 0 }, { 0.230000004F, 1 });
            }

            CubicBezierEasingFunction^ CubicBezierEasingFunction_017()
            {
                return _c->CreateCubicBezierEasingFunction({ 0.300000012F, 0 }, { 0.25F, 1 });
            }

            CubicBezierEasingFunction^ CubicBezierEasingFunction_018()
            {
                return _cubicBezierEasingFunction_018 = _c->CreateCubicBezierEasingFunction({ 0.333000004F, 0 }, { 0.150000006F, 1 });
            }

            CubicBezierEasingFunction^ CubicBezierEasingFunction_019()
            {
                return _c->CreateCubicBezierEasingFunction({ 0.166999996F, 0.166999996F }, { 0.5F, 1 });
            }

            CubicBezierEasingFunction^ CubicBezierEasingFunction_020()
            {
                return _c->CreateCubicBezierEasingFunction({ 0.166999996F, 0.166999996F }, { 0, 0 });
            }

            CubicBezierEasingFunction^ CubicBezierEasingFunction_021()
            {
                return _c->CreateCubicBezierEasingFunction({ 0.0130000003F, 0.00800000038F }, { 0.989000022F, 1 });
            }

            CubicBezierEasingFunction^ CubicBezierEasingFunction_022()
            {
                return _c->CreateCubicBezierEasingFunction({ 0.0869999975F, 0.467000008F }, { 0.340999991F, 1 });
            }

            CubicBezierEasingFunction^ CubicBezierEasingFunction_023()
            {
                return _c->CreateCubicBezierEasingFunction({ 0.547999978F, 0 }, { 0.924000025F, 0.589999974F });
            }

            CubicBezierEasingFunction^ CubicBezierEasingFunction_024()
            {
                return _cubicBezierEasingFunction_024 = _c->CreateCubicBezierEasingFunction({ 0.155000001F, 0.437000006F }, { 0.363000005F, 1 });
            }

            CubicBezierEasingFunction^ CubicBezierEasingFunction_025()
            {
                return _cubicBezierEasingFunction_025 = _c->CreateCubicBezierEasingFunction({ 0.398999989F, 0 }, { 0.859000027F, 0.722000003F });
            }

            // 'PhoneShell Outlines'.Transforms
            //   'FlashCircle'.Transforms
            //     'FlashCircle'.Contents
            //       Group: Ellipse 1
            //         Ellipse Path 1
            // Ellipse Path 1.EllipseGeometry
            CompositionEllipseGeometry^ Ellipse_2()
            {
                auto result = _c->CreateEllipseGeometry();
                result->Radius = { 2, 2 };
                result->StartAnimation("Radius", Vector2Animation_030());
                auto controller = result->TryGetAnimationController("Radius");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // Ellipse Path 1.EllipseGeometry
            CompositionEllipseGeometry^ Ellipse_6p5()
            {
                auto result = _ellipse_6p5 = _c->CreateEllipseGeometry();
                result->Radius = { 6.5F, 6.5F };
                return result;
            }

            CanvasGeometry Geometry_000()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_001()->GetGeometry(geoA);
                Geometry_004()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_001()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_002()->GetGeometry(geoA);
                Geometry_003()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 2
            CanvasGeometry Geometry_002()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -400, -449 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -400, -449 },{ 878, -449 },{ 878, -449 } });
                sink->AddBezier({ { 878, -449 },{ 878, 419 },{ 878, 419 } });
                sink->AddBezier({ { 878, 419 },{ -400, 419 },{ -400, 419 } });
                sink->AddBezier({ { -400, 419 },{ -400, -449 },{ -400, -449 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_002 = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_003()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -400, 419 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -400, 419 },{ 878, 419 },{ 878, 419 } });
                sink->AddBezier({ { 878, 419 },{ 878, -449 },{ 878, -449 } });
                sink->AddBezier({ { 878, -449 },{ -400, -449 },{ -400, -449 } });
                sink->AddBezier({ { -400, -449 },{ -400, 419 },{ -400, 419 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_003 = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_004()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ 38, -86 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { 38, -86 },{ -38, -86 },{ -38, -86 } });
                sink->AddBezier({ { -42.4179993F, -86 },{ -46, -82.4179993F },{ -46, -78 } });
                sink->AddBezier({ { -46, -78 },{ -46, 78 },{ -46, 78 } });
                sink->AddBezier({ { -46, 82.4179993F },{ -42.4179993F, 86 },{ -38, 86 } });
                sink->AddBezier({ { -38, 86 },{ 38, 86 },{ 38, 86 } });
                sink->AddBezier({ { 42.4179993F, 86 },{ 46, 82.4179993F },{ 46, 78 } });
                sink->AddBezier({ { 46, 78 },{ 46, -78 },{ 46, -78 } });
                sink->AddBezier({ { 46, -82.4179993F },{ 42.4179993F, -86 },{ 38, -86 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_004 = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_005()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_006()->GetGeometry(geoA);
                Geometry_007()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_006()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_002()->GetGeometry(geoA);
                Geometry_003()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_007()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ 38, 82 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { 38, 82 },{ -38, 82 },{ -38, 82 } });
                sink->AddBezier({ { -40.2089996F, 82 },{ -42, 80.2089996F },{ -42, 78 } });
                sink->AddBezier({ { -42, 78 },{ -42, -78 },{ -42, -78 } });
                sink->AddBezier({ { -42, -80.2089996F },{ -40.2089996F, -82 },{ -38, -82 } });
                sink->AddBezier({ { -38, -82 },{ 38, -82 },{ 38, -82 } });
                sink->AddBezier({ { 40.2089996F, -82 },{ 42, -80.2089996F },{ 42, -78 } });
                sink->AddBezier({ { 42, -78 },{ 42, 78 },{ 42, 78 } });
                sink->AddBezier({ { 42, 80.2089996F },{ 40.2089996F, 82 },{ 38, 82 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_007 = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_008()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_009()->GetGeometry(geoA);
                Geometry_012()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_009()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_010()->GetGeometry(geoA);
                Geometry_011()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 2
            CanvasGeometry Geometry_010()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -400, -373 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -400, -373 },{ 878, -373 },{ 878, -373 } });
                sink->AddBezier({ { 878, -373 },{ 878, 495 },{ 878, 495 } });
                sink->AddBezier({ { 878, 495 },{ -400, 495 },{ -400, 495 } });
                sink->AddBezier({ { -400, 495 },{ -400, -373 },{ -400, -373 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_010 = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_011()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -400, 495 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -400, 495 },{ 878, 495 },{ 878, 495 } });
                sink->AddBezier({ { 878, 495 },{ 878, -373 },{ 878, -373 } });
                sink->AddBezier({ { 878, -373 },{ -400, -373 },{ -400, -373 } });
                sink->AddBezier({ { -400, -373 },{ -400, 495 },{ -400, 495 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_011 = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_012()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ 6, 2 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { 6, 2 },{ -6, 2 },{ -6, 2 } });
                sink->AddBezier({ { -7.10400009F, 2 },{ -8, 1.10399997F },{ -8, 0 } });
                sink->AddBezier({ { -8, -1.10399997F },{ -7.10400009F, -2 },{ -6, -2 } });
                sink->AddBezier({ { -6, -2 },{ 6, -2 },{ 6, -2 } });
                sink->AddBezier({ { 7.10400009F, -2 },{ 8, -1.10399997F },{ 8, 0 } });
                sink->AddBezier({ { 8, 1.10399997F },{ 7.10400009F, 2 },{ 6, 2 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_012 = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_013()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ 38, 70 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { 38, 70 },{ -38, 70 },{ -38, 70 } });
                sink->AddBezier({ { -38, 70 },{ -38, -70 },{ -38, -70 } });
                sink->AddBezier({ { -38, -70 },{ 38, -70 },{ 38, -70 } });
                sink->AddBezier({ { 38, -70 },{ 38, 70 },{ 38, 70 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_013 = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_014()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ 34, 34 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { 34, 34 },{ -34, 34 },{ -34, 34 } });
                sink->AddBezier({ { -34, 34 },{ -34, -34 },{ -34, -34 } });
                sink->AddBezier({ { -34, -34 },{ 34, -34 },{ 34, -34 } });
                sink->AddBezier({ { 34, -34 },{ 34, 34 },{ 34, 34 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_014 = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_015()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_016()->GetGeometry(geoA);
                Geometry_019()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_016()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_017()->GetGeometry(geoA);
                Geometry_018()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 2
            CanvasGeometry Geometry_017()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -400, -521 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -400, -521 },{ 878, -521 },{ 878, -521 } });
                sink->AddBezier({ { 878, -521 },{ 878, 347 },{ 878, 347 } });
                sink->AddBezier({ { 878, 347 },{ -400, 347 },{ -400, 347 } });
                sink->AddBezier({ { -400, 347 },{ -400, -521 },{ -400, -521 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_017 = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_018()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -400, 347 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -400, 347 },{ 878, 347 },{ 878, 347 } });
                sink->AddBezier({ { 878, 347 },{ 878, -521 },{ 878, -521 } });
                sink->AddBezier({ { 878, -521 },{ -400, -521 },{ -400, -521 } });
                sink->AddBezier({ { -400, -521 },{ -400, 347 },{ -400, 347 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_018 = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_019()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ 18.8570004F, -5.14300013F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { 18.8570004F, -5.14300013F },{ 20.5680008F, -10.276F },{ 20.5680008F, -10.276F } });
                sink->AddBezier({ { 18.3939991F, -11.9069996F },{ 15.4870005F, -12.4860001F },{ 12.7150002F, -11.5620003F } });
                sink->AddBezier({ { 12.7150002F, -11.5620003F },{ 8.56799984F, -10.1789999F },{ 8.56799984F, -10.1789999F } });
                sink->AddBezier({ { 8.56799984F, -10.1789999F },{ 8.56799984F, -17.1429996F },{ 8.56799984F, -17.1429996F } });
                sink->AddBezier({ { 8.56799984F, -20.3939991F },{ 6.85699987F, -22.2870007F },{ 3.4289999F, -24 } });
                sink->AddBezier({ { 3.4289999F, -24 },{ 0, -18.8579998F },{ 0, -18.8579998F } });
                sink->AddBezier({ { 0, -18.8579998F },{ -3.4289999F, -24 },{ -3.4289999F, -24 } });
                sink->AddBezier({ { -6.85699987F, -22.2870007F },{ -8.57499981F, -20.3980007F },{ -8.57499981F, -17.1429996F } });
                sink->AddBezier({ { -8.57499981F, -17.1429996F },{ -8.57499981F, -10.1789999F },{ -8.57499981F, -10.1789999F } });
                sink->AddBezier({ { -8.57499981F, -10.1789999F },{ -12.7220001F, -11.5620003F },{ -12.7220001F, -11.5620003F } });
                sink->AddBezier({ { -15.4919996F, -12.4860001F },{ -18.3950005F, -11.9069996F },{ -20.5699997F, -10.2799997F } });
                sink->AddBezier({ { -20.5699997F, -10.2799997F },{ -18.8570004F, -5.14300013F },{ -18.8570004F, -5.14300013F } });
                sink->AddBezier({ { -18.8570004F, -5.14300013F },{ -24, -5.14300013F },{ -24, -5.14300013F } });
                sink->AddBezier({ { -24, -1.71399999F },{ -22.3040009F, 3.31399989F },{ -18.1420002F, 4.70200014F } });
                sink->AddBezier({ { -18.1420002F, 4.70200014F },{ -13.9960003F, 6.08400011F },{ -13.9960003F, 6.08400011F } });
                sink->AddBezier({ { -13.9960003F, 6.08400011F },{ -17.1459999F, 10.2860003F },{ -17.1459999F, 10.2860003F } });
                sink->AddBezier({ { -19.066F, 12.8459997F },{ -18.8570004F, 15.4280005F },{ -18.8570004F, 18.8570004F } });
                sink->AddBezier({ { -18.8570004F, 18.8570004F },{ -13.7139997F, 18.8570004F },{ -13.7139997F, 18.8570004F } });
                sink->AddBezier({ { -13.7139997F, 18.8570004F },{ -13.7139997F, 24 },{ -13.7139997F, 24 } });
                sink->AddBezier({ { -13.7139997F, 24 },{ -10.2959995F, 24 },{ -10.2959995F, 24 } });
                sink->AddBezier({ { -7.69099998F, 24 },{ -5.11600018F, 22.8139992F },{ -3.43199992F, 20.5709991F } });
                sink->AddBezier({ { -3.43199992F, 20.5709991F },{ -0.00300000003F, 15.9989996F },{ -0.00300000003F, 15.9989996F } });
                sink->AddBezier({ { -0.00300000003F, 15.9989996F },{ 3.42499995F, 20.5709991F },{ 3.42499995F, 20.5709991F } });
                sink->AddBezier({ { 5.10900021F, 22.8139992F },{ 7.68300009F, 24 },{ 10.2889996F, 24 } });
                sink->AddBezier({ { 10.2889996F, 24 },{ 13.7139997F, 24 },{ 13.7139997F, 24 } });
                sink->AddBezier({ { 13.7139997F, 24 },{ 13.7139997F, 18.8570004F },{ 13.7139997F, 18.8570004F } });
                sink->AddBezier({ { 13.7139997F, 18.8570004F },{ 18.8570004F, 18.8570004F },{ 18.8570004F, 18.8570004F } });
                sink->AddBezier({ { 18.8570004F, 15.4280005F },{ 19.0599995F, 12.8459997F },{ 17.1399994F, 10.2860003F } });
                sink->AddBezier({ { 17.1399994F, 10.2860003F },{ 13.9890003F, 6.08400011F },{ 13.9890003F, 6.08400011F } });
                sink->AddBezier({ { 13.9890003F, 6.08400011F },{ 18.1359997F, 4.70200014F },{ 18.1359997F, 4.70200014F } });
                sink->AddBezier({ { 22.2970009F, 3.31399989F },{ 24, -1.71399999F },{ 24, -5.14300013F } });
                sink->AddBezier({ { 24, -5.14300013F },{ 18.8570004F, -5.14300013F },{ 18.8570004F, -5.14300013F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_019 = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_020()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_021()->GetGeometry(geoA);
                Geometry_024()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_021()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_022()->GetGeometry(geoA);
                Geometry_023()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 2
            CanvasGeometry Geometry_022()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -400, -515 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -400, -515 },{ 878, -515 },{ 878, -515 } });
                sink->AddBezier({ { 878, -515 },{ 878, 353 },{ 878, 353 } });
                sink->AddBezier({ { 878, 353 },{ -400, 353 },{ -400, 353 } });
                sink->AddBezier({ { -400, 353 },{ -400, -515 },{ -400, -515 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_022 = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_023()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -400, 353 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -400, 353 },{ 878, 353 },{ 878, 353 } });
                sink->AddBezier({ { 878, 353 },{ 878, -515 },{ 878, -515 } });
                sink->AddBezier({ { 878, -515 },{ -400, -515 },{ -400, -515 } });
                sink->AddBezier({ { -400, -515 },{ -400, 353 },{ -400, 353 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_023 = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_024()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ 0, 6 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { 0.947000027F, 6 },{ 1.71399999F, 5.2329998F },{ 1.71399999F, 4.28599977F } });
                sink->AddBezier({ { 1.71399999F, 4.28599977F },{ 1.71399999F, -4.28599977F },{ 1.71399999F, -4.28599977F } });
                sink->AddBezier({ { 1.71399999F, -5.2329998F },{ 0.947000027F, -6 },{ 0, -6 } });
                sink->AddBezier({ { -0.947000027F, -6 },{ -1.71399999F, -5.2329998F },{ -1.71399999F, -4.28599977F } });
                sink->AddBezier({ { -1.71399999F, -4.28599977F },{ -1.71399999F, 4.28599977F },{ -1.71399999F, 4.28599977F } });
                sink->AddBezier({ { -1.71399999F, 5.2329998F },{ -0.947000027F, 6 },{ 0, 6 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_024 = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_025()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_026()->GetGeometry(geoA);
                Geometry_029()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_026()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_027()->GetGeometry(geoA);
                Geometry_028()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 2
            CanvasGeometry Geometry_027()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -400, -530.429016F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -400, -530.429016F },{ 878, -530.429016F },{ 878, -530.429016F } });
                sink->AddBezier({ { 878, -530.429016F },{ 878, 337.571014F },{ 878, 337.571014F } });
                sink->AddBezier({ { 878, 337.571014F },{ -400, 337.571014F },{ -400, 337.571014F } });
                sink->AddBezier({ { -400, 337.571014F },{ -400, -530.429016F },{ -400, -530.429016F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_027 = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_028()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -400, 337.571014F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -400, 337.571014F },{ 878, 337.571014F },{ 878, 337.571014F } });
                sink->AddBezier({ { 878, 337.571014F },{ 878, -530.429016F },{ 878, -530.429016F } });
                sink->AddBezier({ { 878, -530.429016F },{ -400, -530.429016F },{ -400, -530.429016F } });
                sink->AddBezier({ { -400, -530.429016F },{ -400, 337.571014F },{ -400, 337.571014F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_028 = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_029()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ 0, -6 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -0.947000027F, -6 },{ -1.71399999F, -5.2329998F },{ -1.71399999F, -4.28599977F } });
                sink->AddBezier({ { -1.71399999F, -4.28599977F },{ -1.71399999F, 4.28499985F },{ -1.71399999F, 4.28499985F } });
                sink->AddBezier({ { -1.71399999F, 5.2329998F },{ -0.947000027F, 6 },{ 0, 6 } });
                sink->AddBezier({ { 0.947000027F, 6 },{ 1.71399999F, 5.2329998F },{ 1.71399999F, 4.28499985F } });
                sink->AddBezier({ { 1.71399999F, 4.28499985F },{ 1.71399999F, -4.28599977F },{ 1.71399999F, -4.28599977F } });
                sink->AddBezier({ { 1.71399999F, -5.2329998F },{ 0.947000027F, -6 },{ 0, -6 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_029 = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_030()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_031()->GetGeometry(geoA);
                Geometry_034()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_031()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_032()->GetGeometry(geoA);
                Geometry_033()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 2
            CanvasGeometry Geometry_032()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -407.713989F, -522.715027F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -407.713989F, -522.715027F },{ 870.286011F, -522.715027F },{ 870.286011F, -522.715027F } });
                sink->AddBezier({ { 870.286011F, -522.715027F },{ 870.286011F, 345.285004F },{ 870.286011F, 345.285004F } });
                sink->AddBezier({ { 870.286011F, 345.285004F },{ -407.713989F, 345.285004F },{ -407.713989F, 345.285004F } });
                sink->AddBezier({ { -407.713989F, 345.285004F },{ -407.713989F, -522.715027F },{ -407.713989F, -522.715027F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_032 = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_033()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -407.713989F, 345.285004F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -407.713989F, 345.285004F },{ 870.286011F, 345.285004F },{ 870.286011F, 345.285004F } });
                sink->AddBezier({ { 870.286011F, 345.285004F },{ 870.286011F, -522.715027F },{ 870.286011F, -522.715027F } });
                sink->AddBezier({ { 870.286011F, -522.715027F },{ -407.713989F, -522.715027F },{ -407.713989F, -522.715027F } });
                sink->AddBezier({ { -407.713989F, -522.715027F },{ -407.713989F, 345.285004F },{ -407.713989F, 345.285004F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_033 = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_034()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ 4.28599977F, -1.71500003F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { 4.28599977F, -1.71500003F },{ -1.86099994F, -1.71500003F },{ -1.86099994F, -1.71500003F } });
                sink->AddBezier({ { -1.86099994F, -1.71500003F },{ 3.78399992F, -7.36100006F },{ 3.78399992F, -7.36100006F } });
                sink->AddBezier({ { 4.45300007F, -8.02900028F },{ 4.45300007F, -9.11400032F },{ 3.78399992F, -9.7840004F } });
                sink->AddBezier({ { 3.11400008F, -10.4540005F },{ 2.02900004F, -10.4540005F },{ 1.36000001F, -9.7840004F } });
                sink->AddBezier({ { 1.36000001F, -9.7840004F },{ -4.70100021F, -3.72300005F },{ -4.70100021F, -3.72300005F } });
                sink->AddBezier({ { -5.28299999F, -3.14100003F },{ -5.32800007F, -2.25600004F },{ -4.89499998F, -1.59000003F } });
                sink->AddBezier({ { -5.53900003F, -1.34399998F },{ -6, -0.73299998F },{ -6, -0.00100000005F } });
                sink->AddBezier({ { -6, 0.731000006F },{ -5.53900003F, 1.34399998F },{ -4.89499998F, 1.59000003F } });
                sink->AddBezier({ { -5.32800007F, 2.25600004F },{ -5.28299999F, 3.13899994F },{ -4.70100021F, 3.72199988F } });
                sink->AddBezier({ { -4.70100021F, 3.72199988F },{ 1.36000001F, 9.78299999F },{ 1.36000001F, 9.78299999F } });
                sink->AddBezier({ { 2.02900004F, 10.4530001F },{ 3.11400008F, 10.4530001F },{ 3.78399992F, 9.78299999F } });
                sink->AddBezier({ { 4.45300007F, 9.11299992F },{ 4.45300007F, 8.02900028F },{ 3.78399992F, 7.35900021F } });
                sink->AddBezier({ { 3.78399992F, 7.35900021F },{ -1.86099994F, 1.71399999F },{ -1.86099994F, 1.71399999F } });
                sink->AddBezier({ { -1.86099994F, 1.71399999F },{ 4.28599977F, 1.71399999F },{ 4.28599977F, 1.71399999F } });
                sink->AddBezier({ { 5.2329998F, 1.71399999F },{ 6, 0.947000027F },{ 6, -0.00100000005F } });
                sink->AddBezier({ { 6, -0.948000014F },{ 5.2329998F, -1.71500003F },{ 4.28599977F, -1.71500003F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_034 = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_035()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_036()->GetGeometry(geoA);
                Geometry_039()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_036()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_037()->GetGeometry(geoA);
                Geometry_038()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 2
            CanvasGeometry Geometry_037()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -392.286011F, -522.713989F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -392.286011F, -522.713989F },{ 885.713989F, -522.713989F },{ 885.713989F, -522.713989F } });
                sink->AddBezier({ { 885.713989F, -522.713989F },{ 885.713989F, 345.286011F },{ 885.713989F, 345.286011F } });
                sink->AddBezier({ { 885.713989F, 345.286011F },{ -392.286011F, 345.286011F },{ -392.286011F, 345.286011F } });
                sink->AddBezier({ { -392.286011F, 345.286011F },{ -392.286011F, -522.713989F },{ -392.286011F, -522.713989F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_037 = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_038()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -392.286011F, 345.286011F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -392.286011F, 345.286011F },{ 885.713989F, 345.286011F },{ 885.713989F, 345.286011F } });
                sink->AddBezier({ { 885.713989F, 345.286011F },{ 885.713989F, -522.713989F },{ 885.713989F, -522.713989F } });
                sink->AddBezier({ { 885.713989F, -522.713989F },{ -392.286011F, -522.713989F },{ -392.286011F, -522.713989F } });
                sink->AddBezier({ { -392.286011F, -522.713989F },{ -392.286011F, 345.286011F },{ -392.286011F, 345.286011F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_038 = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_039()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ 6, -0.00100000005F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { 6, -0.731999993F },{ 5.53999996F, -1.347F },{ 4.89499998F, -1.59099996F } });
                sink->AddBezier({ { 5.329F, -2.25699997F },{ 5.28399992F, -3.14199996F },{ 4.70100021F, -3.72399998F } });
                sink->AddBezier({ { 4.70100021F, -3.72399998F },{ -1.35899997F, -9.7840004F },{ -1.35899997F, -9.7840004F } });
                sink->AddBezier({ { -2.02900004F, -10.4540005F },{ -3.11400008F, -10.4540005F },{ -3.78299999F, -9.7840004F } });
                sink->AddBezier({ { -4.45300007F, -9.11400032F },{ -4.45300007F, -8.02799988F },{ -3.78299999F, -7.35900021F } });
                sink->AddBezier({ { -3.78299999F, -7.35900021F },{ 1.86199999F, -1.71500003F },{ 1.86199999F, -1.71500003F } });
                sink->AddBezier({ { 1.86199999F, -1.71500003F },{ -4.28599977F, -1.71500003F },{ -4.28599977F, -1.71500003F } });
                sink->AddBezier({ { -5.2329998F, -1.71500003F },{ -6, -0.948000014F },{ -6, -0.00100000005F } });
                sink->AddBezier({ { -6, 0.947000027F },{ -5.2329998F, 1.71500003F },{ -4.28599977F, 1.71500003F } });
                sink->AddBezier({ { -4.28599977F, 1.71500003F },{ 1.86199999F, 1.71500003F },{ 1.86199999F, 1.71500003F } });
                sink->AddBezier({ { 1.86199999F, 1.71500003F },{ -3.78299999F, 7.3579998F },{ -3.78299999F, 7.3579998F } });
                sink->AddBezier({ { -4.45300007F, 8.02799988F },{ -4.45300007F, 9.11400032F },{ -3.78299999F, 9.7840004F } });
                sink->AddBezier({ { -3.11400008F, 10.4540005F },{ -2.02900004F, 10.4540005F },{ -1.35899997F, 9.7840004F } });
                sink->AddBezier({ { -1.35899997F, 9.7840004F },{ 4.70100021F, 3.72399998F },{ 4.70100021F, 3.72399998F } });
                sink->AddBezier({ { 5.28399992F, 3.14100003F },{ 5.329F, 2.25600004F },{ 4.89499998F, 1.59000003F } });
                sink->AddBezier({ { 5.53999996F, 1.34399998F },{ 6, 0.731000006F },{ 6, -0.00100000005F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_039 = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_040()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_041()->GetGeometry(geoA);
                Geometry_044()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_041()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_042()->GetGeometry(geoA);
                Geometry_043()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 2
            CanvasGeometry Geometry_042()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -400, -510.713989F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -400, -510.713989F },{ 878, -510.713989F },{ 878, -510.713989F } });
                sink->AddBezier({ { 878, -510.713989F },{ 878, 357.286011F },{ 878, 357.286011F } });
                sink->AddBezier({ { 878, 357.286011F },{ -400, 357.286011F },{ -400, 357.286011F } });
                sink->AddBezier({ { -400, 357.286011F },{ -400, -510.713989F },{ -400, -510.713989F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_042 = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_043()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -400, 357.286011F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -400, 357.286011F },{ 878, 357.286011F },{ 878, 357.286011F } });
                sink->AddBezier({ { 878, 357.286011F },{ 878, -510.713989F },{ 878, -510.713989F } });
                sink->AddBezier({ { 878, -510.713989F },{ -400, -510.713989F },{ -400, -510.713989F } });
                sink->AddBezier({ { -400, -510.713989F },{ -400, 357.286011F },{ -400, 357.286011F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_043 = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_044()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ 0, 1.71399999F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { 0.94599998F, 1.71399999F },{ 1.71399999F, 0.947000027F },{ 1.71399999F, -0.00100000005F } });
                sink->AddBezier({ { 1.71399999F, -0.948000014F },{ 0.94599998F, -1.71399999F },{ 0, -1.71399999F } });
                sink->AddBezier({ { -0.947000027F, -1.71399999F },{ -1.71399999F, -0.948000014F },{ -1.71399999F, -0.00100000005F } });
                sink->AddBezier({ { -1.71399999F, 0.947000027F },{ -0.947000027F, 1.71399999F },{ 0, 1.71399999F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_044 = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_045()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_046()->GetGeometry(geoA);
                Geometry_049()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_046()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_047()->GetGeometry(geoA);
                Geometry_048()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 2
            CanvasGeometry Geometry_047()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -400, -534.711975F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -400, -534.711975F },{ 878, -534.711975F },{ 878, -534.711975F } });
                sink->AddBezier({ { 878, -534.711975F },{ 878, 333.287994F },{ 878, 333.287994F } });
                sink->AddBezier({ { 878, 333.287994F },{ -400, 333.287994F },{ -400, 333.287994F } });
                sink->AddBezier({ { -400, 333.287994F },{ -400, -534.711975F },{ -400, -534.711975F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_047 = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_048()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -400, 333.287994F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -400, 333.287994F },{ 878, 333.287994F },{ 878, 333.287994F } });
                sink->AddBezier({ { 878, 333.287994F },{ 878, -534.711975F },{ 878, -534.711975F } });
                sink->AddBezier({ { 878, -534.711975F },{ -400, -534.711975F },{ -400, -534.711975F } });
                sink->AddBezier({ { -400, -534.711975F },{ -400, 333.287994F },{ -400, 333.287994F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_048 = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_049()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ 0, -1.71599996F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -0.94599998F, -1.71599996F },{ -1.71399999F, -0.947000027F },{ -1.71399999F, 0.00100000005F } });
                sink->AddBezier({ { -1.71399999F, 0.948000014F },{ -0.94599998F, 1.71599996F },{ 0, 1.71599996F } });
                sink->AddBezier({ { 0.947000027F, 1.71599996F },{ 1.71399999F, 0.948000014F },{ 1.71399999F, 0.00100000005F } });
                sink->AddBezier({ { 1.71399999F, -0.947000027F },{ 0.947000027F, -1.71599996F },{ 0, -1.71599996F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_049 = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_050()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_051()->GetGeometry(geoA);
                Geometry_054()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_051()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_052()->GetGeometry(geoA);
                Geometry_053()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 2
            CanvasGeometry Geometry_052()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -411.998993F, -522.713989F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -411.998993F, -522.713989F },{ 866.000977F, -522.713989F },{ 866.000977F, -522.713989F } });
                sink->AddBezier({ { 866.000977F, -522.713989F },{ 866.000977F, 345.286011F },{ 866.000977F, 345.286011F } });
                sink->AddBezier({ { 866.000977F, 345.286011F },{ -411.998993F, 345.286011F },{ -411.998993F, 345.286011F } });
                sink->AddBezier({ { -411.998993F, 345.286011F },{ -411.998993F, -522.713989F },{ -411.998993F, -522.713989F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_052 = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_053()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -411.998993F, 345.286011F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -411.998993F, 345.286011F },{ 866.000977F, 345.286011F },{ 866.000977F, 345.286011F } });
                sink->AddBezier({ { 866.000977F, 345.286011F },{ 866.000977F, -522.713989F },{ 866.000977F, -522.713989F } });
                sink->AddBezier({ { 866.000977F, -522.713989F },{ -411.998993F, -522.713989F },{ -411.998993F, -522.713989F } });
                sink->AddBezier({ { -411.998993F, -522.713989F },{ -411.998993F, 345.286011F },{ -411.998993F, 345.286011F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_053 = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_054()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ 0.00100000005F, -1.71500003F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -0.94599998F, -1.71500003F },{ -1.71500003F, -0.947000027F },{ -1.71500003F, 0 } });
                sink->AddBezier({ { -1.71500003F, 0.944000006F },{ -0.94599998F, 1.71500003F },{ 0.00100000005F, 1.71500003F } });
                sink->AddBezier({ { 0.948000014F, 1.71500003F },{ 1.71500003F, 0.944000006F },{ 1.71500003F, 0 } });
                sink->AddBezier({ { 1.71500003F, -0.947000027F },{ 0.948000014F, -1.71500003F },{ 0.00100000005F, -1.71500003F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_054 = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_055()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_056()->GetGeometry(geoA);
                Geometry_059()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_056()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_057()->GetGeometry(geoA);
                Geometry_058()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 2
            CanvasGeometry Geometry_057()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -410.285004F, -514.143005F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -410.285004F, -514.143005F },{ 867.715027F, -514.143005F },{ 867.715027F, -514.143005F } });
                sink->AddBezier({ { 867.715027F, -514.143005F },{ 867.715027F, 353.856995F },{ 867.715027F, 353.856995F } });
                sink->AddBezier({ { 867.715027F, 353.856995F },{ -410.285004F, 353.856995F },{ -410.285004F, 353.856995F } });
                sink->AddBezier({ { -410.285004F, 353.856995F },{ -410.285004F, -514.143005F },{ -410.285004F, -514.143005F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_057 = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_058()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -410.285004F, 353.856995F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -410.285004F, 353.856995F },{ 867.715027F, 353.856995F },{ 867.715027F, 353.856995F } });
                sink->AddBezier({ { 867.715027F, 353.856995F },{ 867.715027F, -514.143005F },{ 867.715027F, -514.143005F } });
                sink->AddBezier({ { 867.715027F, -514.143005F },{ -410.285004F, -514.143005F },{ -410.285004F, -514.143005F } });
                sink->AddBezier({ { -410.285004F, -514.143005F },{ -410.285004F, 353.856995F },{ -410.285004F, 353.856995F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_058 = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_059()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ 1.21300006F, 1.21200001F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { 1.88300002F, 0.542999983F },{ 1.88100004F, -0.54400003F },{ 1.21300006F, -1.21200001F } });
                sink->AddBezier({ { 0.54400003F, -1.88199997F },{ -0.541999996F, -1.88199997F },{ -1.21200001F, -1.21200001F } });
                sink->AddBezier({ { -1.88199997F, -0.541999996F },{ -1.88300002F, 0.542999983F },{ -1.21399999F, 1.21200001F } });
                sink->AddBezier({ { -0.54400003F, 1.88199997F },{ 0.54400003F, 1.88199997F },{ 1.21300006F, 1.21200001F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_059 = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_060()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_061()->GetGeometry(geoA);
                Geometry_064()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_061()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_062()->GetGeometry(geoA);
                Geometry_063()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 2
            CanvasGeometry Geometry_062()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -388.001007F, -522.713989F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -388.001007F, -522.713989F },{ 889.999023F, -522.713989F },{ 889.999023F, -522.713989F } });
                sink->AddBezier({ { 889.999023F, -522.713989F },{ 889.999023F, 345.286011F },{ 889.999023F, 345.286011F } });
                sink->AddBezier({ { 889.999023F, 345.286011F },{ -388.001007F, 345.286011F },{ -388.001007F, 345.286011F } });
                sink->AddBezier({ { -388.001007F, 345.286011F },{ -388.001007F, -522.713989F },{ -388.001007F, -522.713989F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_062 = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_063()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -388.001007F, 345.286011F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -388.001007F, 345.286011F },{ 889.999023F, 345.286011F },{ 889.999023F, 345.286011F } });
                sink->AddBezier({ { 889.999023F, 345.286011F },{ 889.999023F, -522.713989F },{ 889.999023F, -522.713989F } });
                sink->AddBezier({ { 889.999023F, -522.713989F },{ -388.001007F, -522.713989F },{ -388.001007F, -522.713989F } });
                sink->AddBezier({ { -388.001007F, -522.713989F },{ -388.001007F, 345.286011F },{ -388.001007F, 345.286011F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_063 = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_064()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ 1.71500003F, -0.00100000005F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { 1.71500003F, -0.948000014F },{ 0.94599998F, -1.71500003F },{ -0.00100000005F, -1.71500003F } });
                sink->AddBezier({ { -0.948000014F, -1.71500003F },{ -1.71500003F, -0.948000014F },{ -1.71500003F, -0.00100000005F } });
                sink->AddBezier({ { -1.71500003F, 0.943000019F },{ -0.948000014F, 1.71500003F },{ -0.00100000005F, 1.71500003F } });
                sink->AddBezier({ { 0.94599998F, 1.71500003F },{ 1.71500003F, 0.943000019F },{ 1.71500003F, -0.00100000005F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_064 = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_065()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_066()->GetGeometry(geoA);
                Geometry_069()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_066()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_067()->GetGeometry(geoA);
                Geometry_068()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 2
            CanvasGeometry Geometry_067()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -389.714996F, -514.143005F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -389.714996F, -514.143005F },{ 888.284973F, -514.143005F },{ 888.284973F, -514.143005F } });
                sink->AddBezier({ { 888.284973F, -514.143005F },{ 888.284973F, 353.856995F },{ 888.284973F, 353.856995F } });
                sink->AddBezier({ { 888.284973F, 353.856995F },{ -389.714996F, 353.856995F },{ -389.714996F, 353.856995F } });
                sink->AddBezier({ { -389.714996F, 353.856995F },{ -389.714996F, -514.143005F },{ -389.714996F, -514.143005F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_067 = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_068()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -389.714996F, 353.856995F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -389.714996F, 353.856995F },{ 888.284973F, 353.856995F },{ 888.284973F, 353.856995F } });
                sink->AddBezier({ { 888.284973F, 353.856995F },{ 888.284973F, -514.143005F },{ 888.284973F, -514.143005F } });
                sink->AddBezier({ { 888.284973F, -514.143005F },{ -389.714996F, -514.143005F },{ -389.714996F, -514.143005F } });
                sink->AddBezier({ { -389.714996F, -514.143005F },{ -389.714996F, 353.856995F },{ -389.714996F, 353.856995F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_068 = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_069()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -1.21200001F, -1.21200001F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -1.88F, -0.54400003F },{ -1.88199997F, 0.542999983F },{ -1.21200001F, 1.21200001F } });
                sink->AddBezier({ { -0.542999983F, 1.88199997F },{ 0.54400003F, 1.88199997F },{ 1.21399999F, 1.21200001F } });
                sink->AddBezier({ { 1.88300002F, 0.542999983F },{ 1.88199997F, -0.541999996F },{ 1.21200001F, -1.21200001F } });
                sink->AddBezier({ { 0.541999996F, -1.88199997F },{ -0.542999983F, -1.88199997F },{ -1.21200001F, -1.21200001F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_069 = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_070()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_071()->GetGeometry(geoA);
                Geometry_074()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_071()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_072()->GetGeometry(geoA);
                Geometry_073()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 2
            CanvasGeometry Geometry_072()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -389.714996F, -531.284973F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -389.714996F, -531.284973F },{ 888.284973F, -531.284973F },{ 888.284973F, -531.284973F } });
                sink->AddBezier({ { 888.284973F, -531.284973F },{ 888.284973F, 336.714996F },{ 888.284973F, 336.714996F } });
                sink->AddBezier({ { 888.284973F, 336.714996F },{ -389.714996F, 336.714996F },{ -389.714996F, 336.714996F } });
                sink->AddBezier({ { -389.714996F, 336.714996F },{ -389.714996F, -531.284973F },{ -389.714996F, -531.284973F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_072 = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_073()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -389.714996F, 336.714996F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -389.714996F, 336.714996F },{ 888.284973F, 336.714996F },{ 888.284973F, 336.714996F } });
                sink->AddBezier({ { 888.284973F, 336.714996F },{ 888.284973F, -531.284973F },{ 888.284973F, -531.284973F } });
                sink->AddBezier({ { 888.284973F, -531.284973F },{ -389.714996F, -531.284973F },{ -389.714996F, -531.284973F } });
                sink->AddBezier({ { -389.714996F, -531.284973F },{ -389.714996F, 336.714996F },{ -389.714996F, 336.714996F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_073 = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_074()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -1.21200001F, -1.21200001F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -1.88199997F, -0.541999996F },{ -1.88F, 0.542999983F },{ -1.21200001F, 1.21300006F } });
                sink->AddBezier({ { -0.542999983F, 1.88300002F },{ 0.541999996F, 1.88300002F },{ 1.21200001F, 1.21300006F } });
                sink->AddBezier({ { 1.88199997F, 0.541000009F },{ 1.88300002F, -0.54400003F },{ 1.21399999F, -1.21300006F } });
                sink->AddBezier({ { 0.54400003F, -1.88100004F },{ -0.542999983F, -1.88300002F },{ -1.21200001F, -1.21200001F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_074 = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_075()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_076()->GetGeometry(geoA);
                Geometry_079()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_076()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_077()->GetGeometry(geoA);
                Geometry_078()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 2
            CanvasGeometry Geometry_077()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -410.285004F, -531.284973F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -410.285004F, -531.284973F },{ 867.715027F, -531.284973F },{ 867.715027F, -531.284973F } });
                sink->AddBezier({ { 867.715027F, -531.284973F },{ 867.715027F, 336.714996F },{ 867.715027F, 336.714996F } });
                sink->AddBezier({ { 867.715027F, 336.714996F },{ -410.285004F, 336.714996F },{ -410.285004F, 336.714996F } });
                sink->AddBezier({ { -410.285004F, 336.714996F },{ -410.285004F, -531.284973F },{ -410.285004F, -531.284973F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_077 = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_078()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -410.285004F, 336.714996F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -410.285004F, 336.714996F },{ 867.715027F, 336.714996F },{ 867.715027F, 336.714996F } });
                sink->AddBezier({ { 867.715027F, 336.714996F },{ 867.715027F, -531.284973F },{ 867.715027F, -531.284973F } });
                sink->AddBezier({ { 867.715027F, -531.284973F },{ -410.285004F, -531.284973F },{ -410.285004F, -531.284973F } });
                sink->AddBezier({ { -410.285004F, -531.284973F },{ -410.285004F, 336.714996F },{ -410.285004F, 336.714996F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_078 = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_079()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -1.21300006F, -1.21300006F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -1.88199997F, -0.54400003F },{ -1.88199997F, 0.541000009F },{ -1.21200001F, 1.21300006F } });
                sink->AddBezier({ { -0.542999983F, 1.88300002F },{ 0.542999983F, 1.88300002F },{ 1.21300006F, 1.21300006F } });
                sink->AddBezier({ { 1.88100004F, 0.542999983F },{ 1.88300002F, -0.541999996F },{ 1.21300006F, -1.21200001F } });
                sink->AddBezier({ { 0.542999983F, -1.88300002F },{ -0.542999983F, -1.88100004F },{ -1.21300006F, -1.21300006F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_079 = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_080()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_081()->GetGeometry(geoA);
                Geometry_084()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_081()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_082()->GetGeometry(geoA);
                Geometry_083()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 2
            CanvasGeometry Geometry_082()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -400, -522.713989F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -400, -522.713989F },{ 878, -522.713989F },{ 878, -522.713989F } });
                sink->AddBezier({ { 878, -522.713989F },{ 878, 345.286011F },{ 878, 345.286011F } });
                sink->AddBezier({ { 878, 345.286011F },{ -400, 345.286011F },{ -400, 345.286011F } });
                sink->AddBezier({ { -400, 345.286011F },{ -400, -522.713989F },{ -400, -522.713989F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_082 = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_083()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -400, 345.286011F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -400, 345.286011F },{ 878, 345.286011F },{ 878, 345.286011F } });
                sink->AddBezier({ { 878, 345.286011F },{ 878, -522.713989F },{ 878, -522.713989F } });
                sink->AddBezier({ { 878, -522.713989F },{ -400, -522.713989F },{ -400, -522.713989F } });
                sink->AddBezier({ { -400, -522.713989F },{ -400, 345.286011F },{ -400, 345.286011F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_083 = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_084()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ 0.00200000009F, -6.85699987F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -3.78500009F, -6.85699987F },{ -6.85699987F, -3.78900003F },{ -6.85699987F, -0.00100000005F } });
                sink->AddBezier({ { -6.85699987F, 3.78900003F },{ -3.78500009F, 6.85699987F },{ 0.00200000009F, 6.85699987F } });
                sink->AddBezier({ { 3.78699994F, 6.85699987F },{ 6.85699987F, 3.78900003F },{ 6.85699987F, -0.00100000005F } });
                sink->AddBezier({ { 6.85699987F, -3.78900003F },{ 3.78699994F, -6.85699987F },{ 0.00200000009F, -6.85699987F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_084 = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_085()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_086()->GetGeometry(geoA);
                Geometry_087()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_086()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_082()->GetGeometry(geoA);
                Geometry_083()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_087()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ 3.4289999F, -0.00100000005F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { 3.4289999F, 1.89499998F },{ 1.88900006F, 3.42799997F },{ -0.00100000005F, 3.42799997F } });
                sink->AddBezier({ { -1.89600003F, 3.42799997F },{ -3.4289999F, 1.89499998F },{ -3.4289999F, -0.00100000005F } });
                sink->AddBezier({ { -3.4289999F, -1.89600003F },{ -1.89600003F, -3.42799997F },{ -0.00100000005F, -3.42799997F } });
                sink->AddBezier({ { 1.88900006F, -3.42799997F },{ 3.4289999F, -1.89600003F },{ 3.4289999F, -0.00100000005F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_087 = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_088()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_089()->GetGeometry(geoA);
                Geometry_014()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_089()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_090()->GetGeometry(geoA);
                Geometry_091()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 2
            CanvasGeometry Geometry_090()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -756, -397 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -756, -397 },{ 522, -397 },{ 522, -397 } });
                sink->AddBezier({ { 522, -397 },{ 522, 471 },{ 522, 471 } });
                sink->AddBezier({ { 522, 471 },{ -756, 471 },{ -756, 471 } });
                sink->AddBezier({ { -756, 471 },{ -756, -397 },{ -756, -397 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_090 = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_091()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -756, 471 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -756, 471 },{ 522, 471 },{ 522, 471 } });
                sink->AddBezier({ { 522, 471 },{ 522, -397 },{ 522, -397 } });
                sink->AddBezier({ { 522, -397 },{ -756, -397 },{ -756, -397 } });
                sink->AddBezier({ { -756, -397 },{ -756, 471 },{ -756, 471 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_091 = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_092()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -19, 18 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -19, 18 },{ -19, 8 },{ -19, 8 } });
                sink->AddBezier({ { -19, 8 },{ 5, -18 },{ 5, -18 } });
                sink->AddBezier({ { 5, -18 },{ 19, -2 },{ 19, -2 } });
                sink->AddBezier({ { 19, -2 },{ 19, 18 },{ 19, 18 } });
                sink->AddBezier({ { 19, 18 },{ -19, 18 },{ -19, 18 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_092 = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_093()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -2.56699991F, -9.78600025F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -2.56699991F, -9.78600025F },{ 5, -18 },{ 5, -18 } });
                sink->AddBezier({ { 5, -18 },{ 12.1689997F, -9.80700016F },{ 12.1689997F, -9.80700016F } });
                sink->AddBezier({ { 12.1689997F, -9.80700016F },{ -2.56699991F, -9.78600025F },{ -2.56699991F, -9.78600025F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_093 = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_094()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -34, 24 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -34, 24 },{ -34, 2 },{ -34, 2 } });
                sink->AddBezier({ { -34, 2 },{ -10, -24 },{ -10, -24 } });
                sink->AddBezier({ { -10, -24 },{ 34, 24 },{ 34, 24 } });
                sink->AddBezier({ { 34, 24 },{ -34, 24 },{ -34, 24 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_094 = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_095()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -25.2800007F, -7.41300011F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -25.2800007F, -7.41300011F },{ -10, -24 },{ -10, -24 } });
                sink->AddBezier({ { -10, -24 },{ 5.13199997F, -7.44899988F },{ 5.13199997F, -7.44899988F } });
                sink->AddBezier({ { 5.13199997F, -7.44899988F },{ -25.2800007F, -7.41300011F },{ -25.2800007F, -7.41300011F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_095 = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_096()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_097()->GetGeometry(geoA);
                Geometry_100()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_097()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_098()->GetGeometry(geoA);
                Geometry_099()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 2
            CanvasGeometry Geometry_098()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -12, 10 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -12, 10 },{ 20, 10 },{ 20, 10 } });
                sink->AddBezier({ { 20, 10 },{ 20, -10 },{ 20, -10 } });
                sink->AddBezier({ { 20, -10 },{ -12, -10 },{ -12, -10 } });
                sink->AddBezier({ { -12, -10 },{ -12, 10 },{ -12, 10 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_098 = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_099()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -770, 495 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -770, 495 },{ 508, 495 },{ 508, 495 } });
                sink->AddBezier({ { 508, 495 },{ 508, -373 },{ 508, -373 } });
                sink->AddBezier({ { 508, -373 },{ -770, -373 },{ -770, -373 } });
                sink->AddBezier({ { -770, -373 },{ -770, 495 },{ -770, 495 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_099 = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_100()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ 12, -2 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { 12, 4.62699986F },{ 6.62699986F, 10 },{ 0, 10 } });
                sink->AddBezier({ { -6.62699986F, 10 },{ -12, 4.62699986F },{ -12, -2 } });
                sink->AddBezier({ { -12, -8.62699986F },{ -6.62699986F, -14 },{ 0, -14 } });
                sink->AddBezier({ { 6.62699986F, -14 },{ 12, -8.62699986F },{ 12, -2 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_100 = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_101()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -15.908F, -15.9090004F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -15.908F, -15.9090004F },{ -15.908F, 15.9090004F },{ -15.908F, 15.9090004F } });
                sink->AddBezier({ { -15.908F, 15.9090004F },{ 15.908F, 15.9090004F },{ 15.908F, 15.9090004F } });
                sink->AddBezier({ { 15.908F, 15.9090004F },{ -15.908F, -15.9090004F },{ -15.908F, -15.9090004F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_101 = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_102()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ 15.9090004F, -15.9090004F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { 15.9090004F, -15.9090004F },{ 15.9090004F, 15.9090004F },{ 15.9090004F, 15.9090004F } });
                sink->AddBezier({ { 15.9090004F, 15.9090004F },{ -15.9090004F, 15.9090004F },{ -15.9090004F, 15.9090004F } });
                sink->AddBezier({ { -15.9090004F, 15.9090004F },{ 15.9090004F, -15.9090004F },{ 15.9090004F, -15.9090004F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_102 = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_103()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ 14.6059999F, -2.2750001F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { 14.6059999F, -2.2750001F },{ 14.6059999F, -3.06100011F },{ 14.6059999F, -3.06100011F } });
                sink->AddBezier({ { 14.6059999F, -14.842F },{ 4.96400023F, -24.7080002F },{ -6.81500006F, -24.4829998F } });
                sink->AddBezier({ { -18.2299995F, -24.2649994F },{ -27.4169998F, -14.9429998F },{ -27.4169998F, -3.47600007F } });
                sink->AddBezier({ { -27.4169998F, -3.47600007F },{ -27.4169998F, 9.73099995F },{ -27.4169998F, 9.73099995F } });
                sink->AddBezier({ { -27.4169998F, 9.73099995F },{ -27.4169998F, 21.6959991F },{ -27.4169998F, 21.6959991F } });
                sink->AddBezier({ { -27.4169998F, 21.6959991F },{ -27.4169998F, 42.7070007F },{ -27.4169998F, 42.7070007F } });
                sink->AddBezier({ { -27.4169998F, 42.7070007F },{ 37.4179993F, 42.7070007F },{ 37.4179993F, 42.7070007F } });
                sink->AddBezier({ { 37.4179993F, 42.7070007F },{ 37.4179993F, 9.73099995F },{ 37.4179993F, 9.73099995F } });
                sink->AddBezier({ { 37.4179993F, 9.73099995F },{ 26.6119995F, 9.73099995F },{ 26.6119995F, 9.73099995F } });
                sink->AddBezier({ { 19.9810009F, 9.73099995F },{ 14.6059999F, 4.35599995F },{ 14.6059999F, -2.2750001F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_103 = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_104()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ 2.99799991F, 0.00999999978F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { 2.99799991F, 1.66799998F },{ 1.65400004F, 3.01099992F },{ -0.00300000003F, 3.01099992F } });
                sink->AddBezier({ { -1.66100001F, 3.01099992F },{ -3.00500011F, 1.66799998F },{ -3.00500011F, 0.00999999978F } });
                sink->AddBezier({ { -3.00500011F, -1.648F },{ -1.66100001F, -2.99099994F },{ -0.00300000003F, -2.99099994F } });
                sink->AddBezier({ { 1.65400004F, -2.99099994F },{ 2.99799991F, -1.648F },{ 2.99799991F, 0.00999999978F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_104 = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_105()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ 3.01099992F, 0.499000013F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { 3.55100012F, 1.31900001F },{ 1.67900002F, 2.25399995F },{ 0.0219999999F, 2.25399995F } });
                sink->AddBezier({ { -1.63600004F, 2.25399995F },{ -3.55500007F, 1.36099994F },{ -3.02200007F, 0.416000009F } });
                sink->AddBezier({ { -2.5769999F, -0.372000009F },{ -1.65699995F, 1.15499997F },{ 0.00100000005F, 1.15499997F } });
                sink->AddBezier({ { 1.65799999F, 1.15499997F },{ 2.46300006F, -0.375999987F },{ 3.01099992F, 0.499000013F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_105 = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_106()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ 3.00200009F, 0 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { 3.00200009F, 1.65799999F },{ 1.65799999F, 3.00099993F },{ 0.00100000005F, 3.00099993F } });
                sink->AddBezier({ { -1.65699995F, 3.00099993F },{ -3.00200009F, 1.65799999F },{ -3.00200009F, 0 } });
                sink->AddBezier({ { -3.00200009F, -1.65799999F },{ -1.65699995F, -3.00099993F },{ 0.00100000005F, -3.00099993F } });
                sink->AddBezier({ { 1.65799999F, -3.00099993F },{ 3.00200009F, -1.65799999F },{ 3.00200009F, 0 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_106 = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_107()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ 2.9690001F, 0.499000013F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { 3.50900006F, 1.31900001F },{ 1.63699996F, 2.25300002F },{ -0.0199999996F, 2.25300002F } });
                sink->AddBezier({ { -1.67799997F, 2.25300002F },{ -3.59699988F, 1.36099994F },{ -3.06399989F, 0.416000009F } });
                sink->AddBezier({ { -2.61899996F, -0.372000009F },{ -1.699F, 1.15499997F },{ -0.0410000011F, 1.15499997F } });
                sink->AddBezier({ { 1.61600006F, 1.15499997F },{ 2.421F, -0.375999987F },{ 2.9690001F, 0.499000013F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_107 = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_108()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_109()->GetGeometry(geoA);
                Geometry_112()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_109()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_110()->GetGeometry(geoA);
                Geometry_111()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 2
            CanvasGeometry Geometry_110()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -34.4770012F, 21.5799999F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -34.4770012F, 21.5799999F },{ 33.5219994F, 21.5799999F },{ 33.5219994F, 21.5799999F } });
                sink->AddBezier({ { 33.5219994F, 21.5799999F },{ 33.5219994F, -46.4199982F },{ 33.5219994F, -46.4199982F } });
                sink->AddBezier({ { 33.5219994F, -46.4199982F },{ -34.4770012F, -46.4199982F },{ -34.4770012F, -46.4199982F } });
                sink->AddBezier({ { -34.4770012F, -46.4199982F },{ -34.4770012F, 21.5799999F },{ -34.4770012F, 21.5799999F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_110 = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_111()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -400.47699F, 478.579987F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -400.47699F, 478.579987F },{ 877.52301F, 478.579987F },{ 877.52301F, 478.579987F } });
                sink->AddBezier({ { 877.52301F, 478.579987F },{ 877.52301F, -389.420013F },{ 877.52301F, -389.420013F } });
                sink->AddBezier({ { 877.52301F, -389.420013F },{ -400.47699F, -389.420013F },{ -400.47699F, -389.420013F } });
                sink->AddBezier({ { -400.47699F, -389.420013F },{ -400.47699F, 478.579987F },{ -400.47699F, 478.579987F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_111 = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_112()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ 6.00299978F, 0 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { 6.00299978F, -3.31500006F },{ 3.31500006F, -6.00299978F },{ 0, -6.00299978F } });
                sink->AddBezier({ { -3.31599998F, -6.00299978F },{ -6.00299978F, -3.31500006F },{ -6.00299978F, 0 } });
                sink->AddBezier({ { -6.00299978F, 3.31599998F },{ -3.31599998F, 6.00299978F },{ 0, 6.00299978F } });
                sink->AddBezier({ { 3.31500006F, 6.00299978F },{ 6.00299978F, 3.31599998F },{ 6.00299978F, 0 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_112 = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_113()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_114()->GetGeometry(geoA);
                Geometry_117()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_114()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_115()->GetGeometry(geoA);
                Geometry_116()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 2
            CanvasGeometry Geometry_115()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -28.4740009F, 27.5820007F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -28.4740009F, 27.5820007F },{ 39.5250015F, 27.5820007F },{ 39.5250015F, 27.5820007F } });
                sink->AddBezier({ { 39.5250015F, 27.5820007F },{ 39.5250015F, -40.4179993F },{ 39.5250015F, -40.4179993F } });
                sink->AddBezier({ { 39.5250015F, -40.4179993F },{ -28.4740009F, -40.4179993F },{ -28.4740009F, -40.4179993F } });
                sink->AddBezier({ { -28.4740009F, -40.4179993F },{ -28.4740009F, 27.5820007F },{ -28.4740009F, 27.5820007F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_115 = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_116()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -394.473999F, 484.582001F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -394.473999F, 484.582001F },{ 883.526001F, 484.582001F },{ 883.526001F, 484.582001F } });
                sink->AddBezier({ { 883.526001F, 484.582001F },{ 883.526001F, -383.417999F },{ 883.526001F, -383.417999F } });
                sink->AddBezier({ { 883.526001F, -383.417999F },{ -394.473999F, -383.417999F },{ -394.473999F, -383.417999F } });
                sink->AddBezier({ { -394.473999F, -383.417999F },{ -394.473999F, 484.582001F },{ -394.473999F, 484.582001F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_116 = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_117()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ 6.00299978F, 0 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { 6.00299978F, -3.31500006F },{ 3.31500006F, -6.00299978F },{ 0, -6.00299978F } });
                sink->AddBezier({ { -3.31599998F, -6.00299978F },{ -6.00299978F, -3.31500006F },{ -6.00299978F, 0 } });
                sink->AddBezier({ { -6.00299978F, 3.31500006F },{ -3.31599998F, 6.00299978F },{ 0, 6.00299978F } });
                sink->AddBezier({ { 3.31500006F, 6.00299978F },{ 6.00299978F, 3.31500006F },{ 6.00299978F, 0 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_117 = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_118()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_119()->GetGeometry(geoA);
                Geometry_122()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_119()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_120()->GetGeometry(geoA);
                Geometry_121()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 2
            CanvasGeometry Geometry_120()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -40.4799995F, 27.5820007F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -40.4799995F, 27.5820007F },{ 27.5189991F, 27.5820007F },{ 27.5189991F, 27.5820007F } });
                sink->AddBezier({ { 27.5189991F, 27.5820007F },{ 27.5189991F, -40.4179993F },{ 27.5189991F, -40.4179993F } });
                sink->AddBezier({ { 27.5189991F, -40.4179993F },{ -40.4799995F, -40.4179993F },{ -40.4799995F, -40.4179993F } });
                sink->AddBezier({ { -40.4799995F, -40.4179993F },{ -40.4799995F, 27.5820007F },{ -40.4799995F, 27.5820007F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_120 = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_121()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -406.480011F, 484.582001F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -406.480011F, 484.582001F },{ 871.52002F, 484.582001F },{ 871.52002F, 484.582001F } });
                sink->AddBezier({ { 871.52002F, 484.582001F },{ 871.52002F, -383.417999F },{ 871.52002F, -383.417999F } });
                sink->AddBezier({ { 871.52002F, -383.417999F },{ -406.480011F, -383.417999F },{ -406.480011F, -383.417999F } });
                sink->AddBezier({ { -406.480011F, -383.417999F },{ -406.480011F, 484.582001F },{ -406.480011F, 484.582001F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_121 = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_122()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ 6.00299978F, 0 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { 6.00299978F, -3.31500006F },{ 3.31500006F, -6.00299978F },{ 0, -6.00299978F } });
                sink->AddBezier({ { -3.31500006F, -6.00299978F },{ -6.00299978F, -3.31500006F },{ -6.00299978F, 0 } });
                sink->AddBezier({ { -6.00299978F, 3.31500006F },{ -3.31500006F, 6.00299978F },{ 0, 6.00299978F } });
                sink->AddBezier({ { 3.31500006F, 6.00299978F },{ 6.00299978F, 3.31500006F },{ 6.00299978F, 0 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_122 = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_123()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_124()->GetGeometry(geoA);
                Geometry_127()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_124()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_125()->GetGeometry(geoA);
                Geometry_126()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 2
            CanvasGeometry Geometry_125()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -34.4770012F, 29.9839993F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -34.4770012F, 29.9839993F },{ 33.5219994F, 29.9839993F },{ 33.5219994F, 29.9839993F } });
                sink->AddBezier({ { 33.5219994F, 29.9839993F },{ 33.5219994F, -38.0159988F },{ 33.5219994F, -38.0159988F } });
                sink->AddBezier({ { 33.5219994F, -38.0159988F },{ -34.4770012F, -38.0159988F },{ -34.4770012F, -38.0159988F } });
                sink->AddBezier({ { -34.4770012F, -38.0159988F },{ -34.4770012F, 29.9839993F },{ -34.4770012F, 29.9839993F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_125 = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_126()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -400.47699F, 486.984009F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -400.47699F, 486.984009F },{ 877.52301F, 486.984009F },{ 877.52301F, 486.984009F } });
                sink->AddBezier({ { 877.52301F, 486.984009F },{ 877.52301F, -381.015991F },{ 877.52301F, -381.015991F } });
                sink->AddBezier({ { 877.52301F, -381.015991F },{ -400.47699F, -381.015991F },{ -400.47699F, -381.015991F } });
                sink->AddBezier({ { -400.47699F, -381.015991F },{ -400.47699F, 486.984009F },{ -400.47699F, 486.984009F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_126 = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_127()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ 0, 3.602F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { 0, 3.602F },{ -6.60400009F, -3.602F },{ -6.60400009F, -3.602F } });
                sink->AddBezier({ { -6.60400009F, -3.602F },{ 6.60400009F, -3.602F },{ 6.60400009F, -3.602F } });
                sink->AddBezier({ { 6.60400009F, -3.602F },{ 0, 3.602F },{ 0, 3.602F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_127 = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_128()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ 12.6070004F, 9 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { 12.6070004F, 15.9630003F },{ 6.96199989F, 21.6070004F },{ -0.00100000005F, 21.6070004F } });
                sink->AddBezier({ { -6.96299982F, 21.6070004F },{ -12.6070004F, 15.9630003F },{ -12.6070004F, 9 } });
                sink->AddBezier({ { -12.6070004F, 2.03800011F },{ -6.96299982F, -3.60599995F },{ -0.00100000005F, -3.60599995F } });
                sink->AddBezier({ { 6.96199989F, -3.60599995F },{ 12.6070004F, 2.03800011F },{ 12.6070004F, 9 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_128 = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_129()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_130()->GetGeometry(geoA);
                Geometry_112()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_130()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_110()->GetGeometry(geoA);
                Geometry_111()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_131()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_132()->GetGeometry(geoA);
                Geometry_117()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_132()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_115()->GetGeometry(geoA);
                Geometry_116()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_133()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_134()->GetGeometry(geoA);
                Geometry_122()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_134()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_120()->GetGeometry(geoA);
                Geometry_121()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_135()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_136()->GetGeometry(geoA);
                Geometry_127()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_136()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_125()->GetGeometry(geoA);
                Geometry_126()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_137()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -20, -43.25F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -20, -43.25F },{ -20.25F, 35.75F },{ -20.25F, 35.75F } });
                sink->AddBezier({ { -20.25F, 35.75F },{ -1.5F, 17 },{ -1.5F, 17 } });
                sink->AddBezier({ { -1.5F, 17 },{ 11.75F, 42.5F },{ 11.75F, 42.5F } });
                sink->AddBezier({ { 11.75F, 42.5F },{ 23.5F, 36.5F },{ 23.5F, 36.5F } });
                sink->AddBezier({ { 23.5F, 36.5F },{ 11.6879997F, 12.75F },{ 11.6879997F, 12.75F } });
                sink->AddBezier({ { 11.6879997F, 12.75F },{ 36, 12.75F },{ 36, 12.75F } });
                sink->AddBezier({ { 36, 12.75F },{ -20, -43.25F },{ -20, -43.25F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_137 = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_138()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_139()->GetGeometry(geoA);
                Geometry_142()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_139()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_140()->GetGeometry(geoA);
                Geometry_141()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 2
            CanvasGeometry Geometry_140()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -694, -421 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -694, -421 },{ 584, -421 },{ 584, -421 } });
                sink->AddBezier({ { 584, -421 },{ 584, 447 },{ 584, 447 } });
                sink->AddBezier({ { 584, 447 },{ -694, 447 },{ -694, 447 } });
                sink->AddBezier({ { -694, 447 },{ -694, -421 },{ -694, -421 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_141()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -694, 447 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -694, 447 },{ 584, 447 },{ 584, 447 } });
                sink->AddBezier({ { 584, 447 },{ 584, -421 },{ 584, -421 } });
                sink->AddBezier({ { 584, -421 },{ -694, -421 },{ -694, -421 } });
                sink->AddBezier({ { -694, -421 },{ -694, 447 },{ -694, 447 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_142()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ 156, -98 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { 156, -98 },{ -156, -98 },{ -156, -98 } });
                sink->AddBezier({ { -160.417999F, -98 },{ -164, -94.4179993F },{ -164, -90 } });
                sink->AddBezier({ { -164, -90 },{ -164, 98 },{ -164, 98 } });
                sink->AddBezier({ { -164, 98 },{ 164, 98 },{ 164, 98 } });
                sink->AddBezier({ { 164, 98 },{ 164, -90 },{ 164, -90 } });
                sink->AddBezier({ { 164, -94.4179993F },{ 160.417999F, -98 },{ 156, -98 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_143()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_144()->GetGeometry(geoA);
                Geometry_147()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_144()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_145()->GetGeometry(geoA);
                Geometry_146()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 2
            CanvasGeometry Geometry_145()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -694, -423 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -694, -423 },{ 584, -423 },{ 584, -423 } });
                sink->AddBezier({ { 584, -423 },{ 584, 445 },{ 584, 445 } });
                sink->AddBezier({ { 584, 445 },{ -694, 445 },{ -694, 445 } });
                sink->AddBezier({ { -694, 445 },{ -694, -423 },{ -694, -423 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_146()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -694, 445 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -694, 445 },{ 584, 445 },{ 584, 445 } });
                sink->AddBezier({ { 584, 445 },{ 584, -423 },{ 584, -423 } });
                sink->AddBezier({ { 584, -423 },{ -694, -423 },{ -694, -423 } });
                sink->AddBezier({ { -694, -423 },{ -694, 445 },{ -694, 445 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_147()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ 152, 92 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { 152, 92 },{ -152, 92 },{ -152, 92 } });
                sink->AddBezier({ { -154.209F, 92 },{ -156, 90.2089996F },{ -156, 88 } });
                sink->AddBezier({ { -156, 88 },{ -156, -88 },{ -156, -88 } });
                sink->AddBezier({ { -156, -90.2089996F },{ -154.209F, -92 },{ -152, -92 } });
                sink->AddBezier({ { -152, -92 },{ 152, -92 },{ 152, -92 } });
                sink->AddBezier({ { 154.209F, -92 },{ 156, -90.2089996F },{ 156, -88 } });
                sink->AddBezier({ { 156, -88 },{ 156, 88 },{ 156, 88 } });
                sink->AddBezier({ { 156, 90.2089996F },{ 154.209F, 92 },{ 152, 92 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_148()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ 148, -83.9840012F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { 148, -83.9840012F },{ 148, 83.9840012F },{ 148, 83.9840012F } });
                sink->AddBezier({ { 148, 83.9840012F },{ -148, 83.9840012F },{ -148, 83.9840012F } });
                sink->AddBezier({ { -148, 83.9840012F },{ -148, -83.9840012F },{ -148, -83.9840012F } });
                sink->AddBezier({ { -148, -83.9840012F },{ 148, -83.9840012F },{ 148, -83.9840012F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_149()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ 148, 6 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { 148, 6 },{ -148, 6 },{ -148, 6 } });
                sink->AddBezier({ { -148, 6 },{ -148, -6 },{ -148, -6 } });
                sink->AddBezier({ { -148, -6 },{ 148, -6 },{ 148, -6 } });
                sink->AddBezier({ { 148, -6 },{ 148, 6 },{ 148, 6 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_150()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ 4, -4 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { 4, -4 },{ -4, -2.53900003F },{ -4, -2.53900003F } });
                sink->AddBezier({ { -4, -2.53900003F },{ -4, 3 },{ -4, 3 } });
                sink->AddBezier({ { -4, 3 },{ 4, 4 },{ 4, 4 } });
                sink->AddBezier({ { 4, 4 },{ 4, -4 },{ 4, -4 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_151()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ 186.938004F, 62.0009995F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { 186.938004F, 62.0009995F },{ -25, 62 },{ -25, 62 } });
                sink->AddBezier({ { -25, 62 },{ -25, -62 },{ -25, -62 } });
                sink->AddBezier({ { -25, -62 },{ 186.938004F, -61.9990005F },{ 186.938004F, -61.9990005F } });
                sink->AddBezier({ { 186.938004F, -61.9990005F },{ 186.938004F, 62.0009995F },{ 186.938004F, 62.0009995F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_152()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ 81, 62 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { 81, 62 },{ -81, 62 },{ -81, 62 } });
                sink->AddBezier({ { -81, 62 },{ -81, -62 },{ -81, -62 } });
                sink->AddBezier({ { -81, -62 },{ 81, -62 },{ 81, -62 } });
                sink->AddBezier({ { 81, -62 },{ 81, 62 },{ 81, 62 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_153()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ 14, 2 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { 14, 2 },{ -14, 2 },{ -14, 2 } });
                sink->AddBezier({ { -14, 2 },{ -14, -2 },{ -14, -2 } });
                sink->AddBezier({ { -14, -2 },{ 14, -2 },{ 14, -2 } });
                sink->AddBezier({ { 14, -2 },{ 14, 2 },{ 14, 2 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_154()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ 7.9460001F, 1 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { 7.9460001F, 1 },{ -7.9460001F, 1 },{ -7.9460001F, 1 } });
                sink->AddBezier({ { -7.9460001F, 1 },{ -7.9460001F, -1 },{ -7.9460001F, -1 } });
                sink->AddBezier({ { -7.9460001F, -1 },{ 7.9460001F, -1 },{ 7.9460001F, -1 } });
                sink->AddBezier({ { 7.9460001F, -1 },{ 7.9460001F, 1 },{ 7.9460001F, 1 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_155()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ 7.98000002F, 1 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { 7.98000002F, 1 },{ -7.98000002F, 1 },{ -7.98000002F, 1 } });
                sink->AddBezier({ { -7.98000002F, 1 },{ -7.98000002F, -1 },{ -7.98000002F, -1 } });
                sink->AddBezier({ { -7.98000002F, -1 },{ 7.98000002F, -1 },{ 7.98000002F, -1 } });
                sink->AddBezier({ { 7.98000002F, -1 },{ 7.98000002F, 1 },{ 7.98000002F, 1 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_156()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -8, -1 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -8, -1 },{ 8, -1 },{ 8, -1 } });
                sink->AddBezier({ { 8, -1 },{ 8, 1 },{ 8, 1 } });
                sink->AddBezier({ { 8, 1 },{ -8, 1 },{ -8, 1 } });
                sink->AddBezier({ { -8, 1 },{ -8, -1 },{ -8, -1 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_157()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -8.01099968F, -1 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -8.01099968F, -1 },{ 8.01099968F, -1 },{ 8.01099968F, -1 } });
                sink->AddBezier({ { 8.01099968F, -1 },{ 8.01099968F, 1 },{ 8.01099968F, 1 } });
                sink->AddBezier({ { 8.01099968F, 1 },{ -8.01099968F, 1 },{ -8.01099968F, 1 } });
                sink->AddBezier({ { -8.01099968F, 1 },{ -8.01099968F, -1 },{ -8.01099968F, -1 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_158()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_159()->GetGeometry(geoA);
                Geometry_162()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_159()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_160()->GetGeometry(geoA);
                Geometry_161()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 2
            CanvasGeometry Geometry_160()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -606, -381 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -606, -381 },{ 672, -381 },{ 672, -381 } });
                sink->AddBezier({ { 672, -381 },{ 672, 487 },{ 672, 487 } });
                sink->AddBezier({ { 672, 487 },{ -606, 487 },{ -606, 487 } });
                sink->AddBezier({ { -606, 487 },{ -606, -381 },{ -606, -381 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_160 = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_161()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -606, 487 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -606, 487 },{ 672, 487 },{ 672, 487 } });
                sink->AddBezier({ { 672, 487 },{ 672, -381 },{ 672, -381 } });
                sink->AddBezier({ { 672, -381 },{ -606, -381 },{ -606, -381 } });
                sink->AddBezier({ { -606, -381 },{ -606, 487 },{ -606, 487 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_161 = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_162()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ 8, 18 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { 8, 18 },{ -8, 18 },{ -8, 18 } });
                sink->AddBezier({ { -9.10400009F, 18 },{ -10, 17.1040001F },{ -10, 16 } });
                sink->AddBezier({ { -10, 16 },{ -10, -16 },{ -10, -16 } });
                sink->AddBezier({ { -10, -17.1040001F },{ -9.10400009F, -18 },{ -8, -18 } });
                sink->AddBezier({ { -8, -18 },{ 8, -18 },{ 8, -18 } });
                sink->AddBezier({ { 9.10400009F, -18 },{ 10, -17.1040001F },{ 10, -16 } });
                sink->AddBezier({ { 10, -16 },{ 10, 16 },{ 10, 16 } });
                sink->AddBezier({ { 10, 17.1040001F },{ 9.10400009F, 18 },{ 8, 18 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_163()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_164()->GetGeometry(geoA);
                Geometry_165()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_164()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_160()->GetGeometry(geoA);
                Geometry_161()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_165()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ 7, 14 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { 7, 14 },{ -7, 14 },{ -7, 14 } });
                sink->AddBezier({ { -7.55200005F, 14 },{ -8, 13.552F },{ -8, 13 } });
                sink->AddBezier({ { -8, 13 },{ -8, -13 },{ -8, -13 } });
                sink->AddBezier({ { -8, -13.552F },{ -7.55200005F, -14 },{ -7, -14 } });
                sink->AddBezier({ { -7, -14 },{ 7, -14 },{ 7, -14 } });
                sink->AddBezier({ { 7.55200005F, -14 },{ 8, -13.552F },{ 8, -13 } });
                sink->AddBezier({ { 8, -13 },{ 8, 13 },{ 8, 13 } });
                sink->AddBezier({ { 8, 13.552F },{ 7.55200005F, 14 },{ 7, 14 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_166()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_167()->GetGeometry(geoA);
                Geometry_168()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_167()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_160()->GetGeometry(geoA);
                Geometry_161()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_168()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ 0, -5 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { 0.458999991F, -5 },{ 0.90200001F, -4.94000006F },{ 1.32799995F, -4.82200003F } });
                sink->AddBezier({ { 1.75399995F, -4.70300007F },{ 2.15199995F, -4.53499985F },{ 2.52200007F, -4.31599998F } });
                sink->AddBezier({ { 2.89199996F, -4.09800005F },{ 3.22900009F, -3.83699989F },{ 3.53299999F, -3.53299999F } });
                sink->AddBezier({ { 3.83699989F, -3.22900009F },{ 4.09800005F, -2.89199996F },{ 4.31599998F, -2.52200007F } });
                sink->AddBezier({ { 4.53499985F, -2.15199995F },{ 4.70300007F, -1.75399995F },{ 4.82200003F, -1.32799995F } });
                sink->AddBezier({ { 4.94000006F, -0.90200001F },{ 5, -0.458999991F },{ 5, 0 } });
                sink->AddBezier({ { 5, 0.458999991F },{ 4.94000006F, 0.90200001F },{ 4.82200003F, 1.32799995F } });
                sink->AddBezier({ { 4.70300007F, 1.75399995F },{ 4.53499985F, 2.15199995F },{ 4.31599998F, 2.52200007F } });
                sink->AddBezier({ { 4.09800005F, 2.89199996F },{ 3.83699989F, 3.22900009F },{ 3.53299999F, 3.53299999F } });
                sink->AddBezier({ { 3.22900009F, 3.83699989F },{ 2.89199996F, 4.09800005F },{ 2.52200007F, 4.31599998F } });
                sink->AddBezier({ { 2.15199995F, 4.53499985F },{ 1.75399995F, 4.70300007F },{ 1.32799995F, 4.82200003F } });
                sink->AddBezier({ { 0.90200001F, 4.94000006F },{ 0.458999991F, 5 },{ 0, 5 } });
                sink->AddBezier({ { -0.458999991F, 5 },{ -0.90200001F, 4.94000006F },{ -1.32799995F, 4.82200003F } });
                sink->AddBezier({ { -1.75399995F, 4.70300007F },{ -2.15199995F, 4.53499985F },{ -2.52200007F, 4.31599998F } });
                sink->AddBezier({ { -2.89199996F, 4.09800005F },{ -3.22900009F, 3.83699989F },{ -3.53299999F, 3.53299999F } });
                sink->AddBezier({ { -3.83699989F, 3.22900009F },{ -4.09800005F, 2.89199996F },{ -4.31599998F, 2.52200007F } });
                sink->AddBezier({ { -4.53499985F, 2.15199995F },{ -4.70300007F, 1.75399995F },{ -4.82200003F, 1.32799995F } });
                sink->AddBezier({ { -4.94000006F, 0.90200001F },{ -5, 0.458999991F },{ -5, 0 } });
                sink->AddBezier({ { -5, -0.458999991F },{ -4.94000006F, -0.90200001F },{ -4.82200003F, -1.32799995F } });
                sink->AddBezier({ { -4.70300007F, -1.75399995F },{ -4.53499985F, -2.15199995F },{ -4.31599998F, -2.52200007F } });
                sink->AddBezier({ { -4.09800005F, -2.89199996F },{ -3.83699989F, -3.22900009F },{ -3.53299999F, -3.53299999F } });
                sink->AddBezier({ { -3.22900009F, -3.83699989F },{ -2.89199996F, -4.09800005F },{ -2.52200007F, -4.31599998F } });
                sink->AddBezier({ { -2.15199995F, -4.53499985F },{ -1.75399995F, -4.70300007F },{ -1.32799995F, -4.82200003F } });
                sink->AddBezier({ { -0.90200001F, -4.94000006F },{ -0.458999991F, -5 },{ 0, -5 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_169()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_ALTERNATE);
                sink->BeginFigure({ -2.5F, -0.125F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -2.5F, -0.125F },{ -0.75F, 1.625F },{ -0.75F, 1.625F } });
                sink->AddBezier({ { -0.75F, 1.625F },{ 2.5F, -1.625F },{ 2.5F, -1.625F } });
                sink->EndFigure(D2D1_FIGURE_END_OPEN);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_170()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_171()->GetGeometry(geoA);
                Geometry_174()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_171()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_172()->GetGeometry(geoA);
                Geometry_173()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 2
            CanvasGeometry Geometry_172()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -756, -459 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -756, -459 },{ 522, -459 },{ 522, -459 } });
                sink->AddBezier({ { 522, -459 },{ 522, 409 },{ 522, 409 } });
                sink->AddBezier({ { 522, 409 },{ -756, 409 },{ -756, 409 } });
                sink->AddBezier({ { -756, 409 },{ -756, -459 },{ -756, -459 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_173()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -756, 409 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -756, 409 },{ 522, 409 },{ 522, 409 } });
                sink->AddBezier({ { 522, 409 },{ 522, -459 },{ 522, -459 } });
                sink->AddBezier({ { 522, -459 },{ -756, -459 },{ -756, -459 } });
                sink->AddBezier({ { -756, -459 },{ -756, 409 },{ -756, 409 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_174()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ 34, 20 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { 34, 20 },{ -34, 20 },{ -34, 20 } });
                sink->AddBezier({ { -34, 20 },{ -34, -20 },{ -34, -20 } });
                sink->AddBezier({ { -34, -20 },{ 34, -20 },{ 34, -20 } });
                sink->AddBezier({ { 34, -20 },{ 34, 20 },{ 34, 20 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_175()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_176()->GetGeometry(geoA);
                Geometry_179()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_176()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_177()->GetGeometry(geoA);
                Geometry_178()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 2
            CanvasGeometry Geometry_177()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -756, -474.98999F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -756, -474.98999F },{ 522, -474.98999F },{ 522, -474.98999F } });
                sink->AddBezier({ { 522, -474.98999F },{ 522, 393.01001F },{ 522, 393.01001F } });
                sink->AddBezier({ { 522, 393.01001F },{ -756, 393.01001F },{ -756, 393.01001F } });
                sink->AddBezier({ { -756, 393.01001F },{ -756, -474.98999F },{ -756, -474.98999F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_178()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -756, 393.01001F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -756, 393.01001F },{ 522, 393.01001F },{ 522, 393.01001F } });
                sink->AddBezier({ { 522, 393.01001F },{ 522, -474.98999F },{ 522, -474.98999F } });
                sink->AddBezier({ { 522, -474.98999F },{ -756, -474.98999F },{ -756, -474.98999F } });
                sink->AddBezier({ { -756, -474.98999F },{ -756, 393.01001F },{ -756, 393.01001F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_179()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ 34, 3.99000001F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { 34, 3.99000001F },{ -34, 3.99000001F },{ -34, 3.99000001F } });
                sink->AddBezier({ { -34, 3.99000001F },{ -34, -3.99000001F },{ -34, -3.99000001F } });
                sink->AddBezier({ { -34, -3.99000001F },{ 34, -3.99000001F },{ 34, -3.99000001F } });
                sink->AddBezier({ { 34, -3.99000001F },{ 34, 3.99000001F },{ 34, 3.99000001F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_180()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_181()->GetGeometry(geoA);
                Geometry_184()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_181()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_182()->GetGeometry(geoA);
                Geometry_183()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 2
            CanvasGeometry Geometry_182()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -23.6410007F, 11.3590002F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -23.6410007F, 11.3590002F },{ 44.3590012F, 11.3590002F },{ 44.3590012F, 11.3590002F } });
                sink->AddBezier({ { 44.3590012F, 11.3590002F },{ 44.3590012F, -24.6410007F },{ 44.3590012F, -24.6410007F } });
                sink->AddBezier({ { 44.3590012F, -24.6410007F },{ -23.6410007F, -24.6410007F },{ -23.6410007F, -24.6410007F } });
                sink->AddBezier({ { -23.6410007F, -24.6410007F },{ -23.6410007F, 11.3590002F },{ -23.6410007F, 11.3590002F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_183()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -745.640991F, 400.359009F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -745.640991F, 400.359009F },{ 532.359009F, 400.359009F },{ 532.359009F, 400.359009F } });
                sink->AddBezier({ { 532.359009F, 400.359009F },{ 532.359009F, -467.640991F },{ 532.359009F, -467.640991F } });
                sink->AddBezier({ { 532.359009F, -467.640991F },{ -745.640991F, -467.640991F },{ -745.640991F, -467.640991F } });
                sink->AddBezier({ { -745.640991F, -467.640991F },{ -745.640991F, 400.359009F },{ -745.640991F, 400.359009F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_184()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ 3.33299994F, 47.3069992F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { 3.33299994F, 47.3069992F },{ 3.33299994F, 58.5890007F },{ 3.33299994F, 58.5890007F } });
                sink->AddBezier({ { 3.33299994F, 58.5890007F },{ 12.3579998F, 63.1020012F },{ 12.3579998F, 63.1020012F } });
                sink->AddBezier({ { 12.3579998F, 63.1020012F },{ 12.3579998F, 65.3590012F },{ 12.3579998F, 65.3590012F } });
                sink->AddBezier({ { 12.3579998F, 65.3590012F },{ -7.94899988F, 65.3590012F },{ -7.94899988F, 65.3590012F } });
                sink->AddBezier({ { -7.94899988F, 65.3590012F },{ -16.9750004F, 47.3069992F },{ -16.9750004F, 47.3069992F } });
                sink->AddBezier({ { -16.9750004F, 47.3069992F },{ -16.9750004F, 38.2820015F },{ -16.9750004F, 38.2820015F } });
                sink->AddBezier({ { -16.9750004F, 38.2820015F },{ -50.257F, 38.2820015F },{ -50.257F, 38.2820015F } });
                sink->AddBezier({ { -50.257F, 38.2820015F },{ -55.3339996F, 58.5890007F },{ -55.3339996F, 58.5890007F } });
                sink->AddBezier({ { -55.3339996F, 58.5890007F },{ -46.3089981F, 63.1020012F },{ -46.3089981F, 63.1020012F } });
                sink->AddBezier({ { -46.3089981F, 63.1020012F },{ -46.3089981F, 65.3590012F },{ -46.3089981F, 65.3590012F } });
                sink->AddBezier({ { -46.3089981F, 65.3590012F },{ -68.8720016F, 65.3590012F },{ -68.8720016F, 65.3590012F } });
                sink->AddBezier({ { -70.1190033F, 65.3590012F },{ -71.1289978F, 64.3499985F },{ -71.1289978F, 63.1020012F } });
                sink->AddBezier({ { -71.1289978F, 63.1020012F },{ -71.1289978F, 20.2310009F },{ -71.1289978F, 20.2310009F } });
                sink->AddBezier({ { -71.1289978F, 5.26399994F },{ -59.019001F, -6.84600019F },{ -44.0519981F, -6.84600019F } });
                sink->AddBezier({ { -44.0519981F, -6.84600019F },{ -16.9750004F, -6.84600019F },{ -16.9750004F, -6.84600019F } });
                sink->AddBezier({ { -14.665F, -9.63399982F },{ -11.4750004F, -11.3590002F },{ -7.94899988F, -11.3590002F } });
                sink->AddBezier({ { -7.94899988F, -11.3590002F },{ 23.6410007F, -11.3590002F },{ 23.6410007F, -11.3590002F } });
                sink->EndFigure(D2D1_FIGURE_END_OPEN);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_185()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_186()->GetGeometry(geoA);
                Geometry_189()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_186()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_187()->GetGeometry(geoA);
                Geometry_188()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 2
            CanvasGeometry Geometry_187()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -42.769001F, 11.9230003F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -42.769001F, 11.9230003F },{ 25.2310009F, 11.9230003F },{ 25.2310009F, 11.9230003F } });
                sink->AddBezier({ { 25.2310009F, 11.9230003F },{ 25.2310009F, -24.0769997F },{ 25.2310009F, -24.0769997F } });
                sink->AddBezier({ { 25.2310009F, -24.0769997F },{ -42.769001F, -24.0769997F },{ -42.769001F, -24.0769997F } });
                sink->AddBezier({ { -42.769001F, -24.0769997F },{ -42.769001F, 11.9230003F },{ -42.769001F, 11.9230003F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_188()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -764.768982F, 400.923004F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -764.768982F, 400.923004F },{ 513.231018F, 400.923004F },{ 513.231018F, 400.923004F } });
                sink->AddBezier({ { 513.231018F, 400.923004F },{ 513.231018F, -467.076996F },{ 513.231018F, -467.076996F } });
                sink->AddBezier({ { 513.231018F, -467.076996F },{ -764.768982F, -467.076996F },{ -764.768982F, -467.076996F } });
                sink->AddBezier({ { -764.768982F, -467.076996F },{ -764.768982F, 400.923004F },{ -764.768982F, 400.923004F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_189()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ 18.052F, -11.9230003F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { 18.052F, -11.9230003F },{ 18.052F, -2.86400008F },{ 18.052F, -2.86400008F } });
                sink->AddBezier({ { 18.052F, 0.726000011F },{ 16.625F, 4.17000008F },{ 14.0860004F, 6.70900011F } });
                sink->AddBezier({ { 14.0860004F, 6.70900011F },{ 0, 20.7950001F },{ 0, 20.7950001F } });
                sink->AddBezier({ { 0, 20.7950001F },{ -14.0860004F, 6.70900011F },{ -14.0860004F, 6.70900011F } });
                sink->AddBezier({ { -16.625F, 4.17000008F },{ -18.052F, 0.726000011F },{ -18.052F, -2.86400008F } });
                sink->AddBezier({ { -18.052F, -2.86400008F },{ -18.052F, -11.9230003F },{ -18.052F, -11.9230003F } });
                sink->EndFigure(D2D1_FIGURE_END_OPEN);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_190()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_191()->GetGeometry(geoA);
                Geometry_194()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_191()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_192()->GetGeometry(geoA);
                Geometry_193()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 2
            CanvasGeometry Geometry_192()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -30.3589993F, 26.1019993F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -30.3589993F, 26.1019993F },{ 37.6409988F, 26.1019993F },{ 37.6409988F, 26.1019993F } });
                sink->AddBezier({ { 37.6409988F, 26.1019993F },{ 37.6409988F, -9.89799976F },{ 37.6409988F, -9.89799976F } });
                sink->AddBezier({ { 37.6409988F, -9.89799976F },{ -30.3589993F, -9.89799976F },{ -30.3589993F, -9.89799976F } });
                sink->AddBezier({ { -30.3589993F, -9.89799976F },{ -30.3589993F, 26.1019993F },{ -30.3589993F, 26.1019993F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_192 = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_193()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -752.359009F, 415.10199F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -752.359009F, 415.10199F },{ 525.640991F, 415.10199F },{ 525.640991F, 415.10199F } });
                sink->AddBezier({ { 525.640991F, 415.10199F },{ 525.640991F, -452.89801F },{ 525.640991F, -452.89801F } });
                sink->AddBezier({ { 525.640991F, -452.89801F },{ -752.359009F, -452.89801F },{ -752.359009F, -452.89801F } });
                sink->AddBezier({ { -752.359009F, -452.89801F },{ -752.359009F, 415.10199F },{ -752.359009F, 415.10199F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_193 = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_194()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ 7.89799976F, 0 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { 7.89799976F, 4.36100006F },{ 4.36100006F, 7.89699984F },{ 0, 7.89699984F } });
                sink->AddBezier({ { -4.36299992F, 7.89699984F },{ -7.89799976F, 4.36100006F },{ -7.89799976F, 0 } });
                sink->AddBezier({ { -7.89799976F, -4.36100006F },{ -4.36299992F, -7.89699984F },{ 0, -7.89699984F } });
                sink->AddBezier({ { 4.36100006F, -7.89699984F },{ 7.89799976F, -4.36100006F },{ 7.89799976F, 0 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_194 = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_195()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_196()->GetGeometry(geoA);
                Geometry_194()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_196()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_197()->GetGeometry(geoA);
                Geometry_198()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 2
            CanvasGeometry Geometry_197()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -55.1800003F, 26.1019993F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -55.1800003F, 26.1019993F },{ 12.8199997F, 26.1019993F },{ 12.8199997F, 26.1019993F } });
                sink->AddBezier({ { 12.8199997F, 26.1019993F },{ 12.8199997F, -9.89799976F },{ 12.8199997F, -9.89799976F } });
                sink->AddBezier({ { 12.8199997F, -9.89799976F },{ -55.1800003F, -9.89799976F },{ -55.1800003F, -9.89799976F } });
                sink->AddBezier({ { -55.1800003F, -9.89799976F },{ -55.1800003F, 26.1019993F },{ -55.1800003F, 26.1019993F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_198()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -777.179993F, 415.10199F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -777.179993F, 415.10199F },{ 500.820007F, 415.10199F },{ 500.820007F, 415.10199F } });
                sink->AddBezier({ { 500.820007F, 415.10199F },{ 500.820007F, -452.89801F },{ 500.820007F, -452.89801F } });
                sink->AddBezier({ { 500.820007F, -452.89801F },{ -777.179993F, -452.89801F },{ -777.179993F, -452.89801F } });
                sink->AddBezier({ { -777.179993F, -452.89801F },{ -777.179993F, 415.10199F },{ -777.179993F, 415.10199F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_199()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_200()->GetGeometry(geoA);
                Geometry_201()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_200()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_192()->GetGeometry(geoA);
                Geometry_193()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_201()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ 5.64099979F, 0 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { 5.64099979F, 3.11500001F },{ 3.11599994F, 5.64099979F },{ 0, 5.64099979F } });
                sink->AddBezier({ { -3.11599994F, 5.64099979F },{ -5.64099979F, 3.11500001F },{ -5.64099979F, 0 } });
                sink->AddBezier({ { -5.64099979F, -3.11500001F },{ -3.11599994F, -5.64099979F },{ 0, -5.64099979F } });
                sink->AddBezier({ { 3.11599994F, -5.64099979F },{ 5.64099979F, -3.11500001F },{ 5.64099979F, 0 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_202()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_203()->GetGeometry(geoA);
                Geometry_206()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_203()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_204()->GetGeometry(geoA);
                Geometry_205()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 2
            CanvasGeometry Geometry_204()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -55.1790009F, 26.1019993F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -55.1790009F, 26.1019993F },{ 12.8210001F, 26.1019993F },{ 12.8210001F, 26.1019993F } });
                sink->AddBezier({ { 12.8210001F, 26.1019993F },{ 12.8210001F, -9.89799976F },{ 12.8210001F, -9.89799976F } });
                sink->AddBezier({ { 12.8210001F, -9.89799976F },{ -55.1790009F, -9.89799976F },{ -55.1790009F, -9.89799976F } });
                sink->AddBezier({ { -55.1790009F, -9.89799976F },{ -55.1790009F, 26.1019993F },{ -55.1790009F, 26.1019993F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_205()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -777.179016F, 415.10199F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -777.179016F, 415.10199F },{ 500.821014F, 415.10199F },{ 500.821014F, 415.10199F } });
                sink->AddBezier({ { 500.821014F, 415.10199F },{ 500.821014F, -452.89801F },{ 500.821014F, -452.89801F } });
                sink->AddBezier({ { 500.821014F, -452.89801F },{ -777.179016F, -452.89801F },{ -777.179016F, -452.89801F } });
                sink->AddBezier({ { -777.179016F, -452.89801F },{ -777.179016F, 415.10199F },{ -777.179016F, 415.10199F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_206()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ 5.64099979F, 0 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { 5.64099979F, 3.11500001F },{ 3.11599994F, 5.64099979F },{ 0, 5.64099979F } });
                sink->AddBezier({ { -3.11500001F, 5.64099979F },{ -5.64099979F, 3.11500001F },{ -5.64099979F, 0 } });
                sink->AddBezier({ { -5.64099979F, -3.11500001F },{ -3.11500001F, -5.64099979F },{ 0, -5.64099979F } });
                sink->AddBezier({ { 3.11599994F, -5.64099979F },{ 5.64099979F, -3.11500001F },{ 5.64099979F, 0 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_207()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_208()->GetGeometry(geoA);
                Geometry_211()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_208()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_209()->GetGeometry(geoA);
                Geometry_210()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 2
            CanvasGeometry Geometry_209()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -42.7700005F, 15.9490004F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -42.7700005F, 15.9490004F },{ 25.2299995F, 15.9490004F },{ 25.2299995F, 15.9490004F } });
                sink->AddBezier({ { 25.2299995F, 15.9490004F },{ 25.2299995F, -20.0510006F },{ 25.2299995F, -20.0510006F } });
                sink->AddBezier({ { 25.2299995F, -20.0510006F },{ -42.7700005F, -20.0510006F },{ -42.7700005F, -20.0510006F } });
                sink->AddBezier({ { -42.7700005F, -20.0510006F },{ -42.7700005F, 15.9490004F },{ -42.7700005F, 15.9490004F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_210()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -764.77002F, 404.949005F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -764.77002F, 404.949005F },{ 513.22998F, 404.949005F },{ 513.22998F, 404.949005F } });
                sink->AddBezier({ { 513.22998F, 404.949005F },{ 513.22998F, -463.050995F },{ 513.22998F, -463.050995F } });
                sink->AddBezier({ { 513.22998F, -463.050995F },{ -764.77002F, -463.050995F },{ -764.77002F, -463.050995F } });
                sink->AddBezier({ { -764.77002F, -463.050995F },{ -764.77002F, 404.949005F },{ -764.77002F, 404.949005F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_211()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ 15.7950001F, 0 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { 15.7950001F, 8.72299957F },{ 8.72299957F, 15.7939997F },{ 0, 15.7939997F } });
                sink->AddBezier({ { -8.72399998F, 15.7939997F },{ -15.7950001F, 8.72299957F },{ -15.7950001F, 0 } });
                sink->AddBezier({ { -15.7950001F, -8.72399998F },{ -8.72399998F, -15.7939997F },{ 0, -15.7939997F } });
                sink->AddBezier({ { 8.72299957F, -15.7939997F },{ 15.7950001F, -8.72399998F },{ 15.7950001F, 0 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_212()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_213()->GetGeometry(geoA);
                Geometry_216()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_213()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_214()->GetGeometry(geoA);
                Geometry_215()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 2
            CanvasGeometry Geometry_214()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -42.769001F, 11.4359999F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -42.769001F, 11.4359999F },{ 25.2310009F, 11.4359999F },{ 25.2310009F, 11.4359999F } });
                sink->AddBezier({ { 25.2310009F, 11.4359999F },{ 25.2310009F, -24.5639992F },{ 25.2310009F, -24.5639992F } });
                sink->AddBezier({ { 25.2310009F, -24.5639992F },{ -42.769001F, -24.5639992F },{ -42.769001F, -24.5639992F } });
                sink->AddBezier({ { -42.769001F, -24.5639992F },{ -42.769001F, 11.4359999F },{ -42.769001F, 11.4359999F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_215()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -764.768982F, 400.436005F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -764.768982F, 400.436005F },{ 513.231018F, 400.436005F },{ 513.231018F, 400.436005F } });
                sink->AddBezier({ { 513.231018F, 400.436005F },{ 513.231018F, -467.563995F },{ 513.231018F, -467.563995F } });
                sink->AddBezier({ { 513.231018F, -467.563995F },{ -764.768982F, -467.563995F },{ -764.768982F, -467.563995F } });
                sink->AddBezier({ { -764.768982F, -467.563995F },{ -764.768982F, 400.436005F },{ -764.768982F, 400.436005F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_216()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -2.25600004F, 6.76900005F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -4.75F, 6.76900005F },{ -6.76900005F, 4.75F },{ -6.76900005F, 2.25600004F } });
                sink->AddBezier({ { -6.76900005F, 2.25600004F },{ -6.76900005F, 0 },{ -6.76900005F, 0 } });
                sink->AddBezier({ { -6.76900005F, -3.73900008F },{ -3.73799992F, -6.76900005F },{ 0.00100000005F, -6.76900005F } });
                sink->AddBezier({ { 3.73900008F, -6.76900005F },{ 6.76900005F, -3.73900008F },{ 6.76900005F, 0 } });
                sink->AddBezier({ { 6.76900005F, 0 },{ 6.76900005F, 2.25600004F },{ 6.76900005F, 2.25600004F } });
                sink->AddBezier({ { 6.76900005F, 4.75F },{ 4.75199986F, 6.76900005F },{ 2.25699997F, 6.76900005F } });
                sink->AddBezier({ { 2.25699997F, 6.76900005F },{ -2.25600004F, 6.76900005F },{ -2.25600004F, 6.76900005F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_217()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_218()->GetGeometry(geoA);
                Geometry_221()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_218()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_219()->GetGeometry(geoA);
                Geometry_220()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 2
            CanvasGeometry Geometry_219()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -42.769001F, 8.61499977F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -42.769001F, 8.61499977F },{ 25.2310009F, 8.61499977F },{ 25.2310009F, 8.61499977F } });
                sink->AddBezier({ { 25.2310009F, 8.61499977F },{ 25.2310009F, -27.3850002F },{ 25.2310009F, -27.3850002F } });
                sink->AddBezier({ { 25.2310009F, -27.3850002F },{ -42.769001F, -27.3850002F },{ -42.769001F, -27.3850002F } });
                sink->AddBezier({ { -42.769001F, -27.3850002F },{ -42.769001F, 8.61499977F },{ -42.769001F, 8.61499977F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_220()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -764.768982F, 397.61499F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -764.768982F, 397.61499F },{ 513.231018F, 397.61499F },{ 513.231018F, 397.61499F } });
                sink->AddBezier({ { 513.231018F, 397.61499F },{ 513.231018F, -470.38501F },{ 513.231018F, -470.38501F } });
                sink->AddBezier({ { 513.231018F, -470.38501F },{ -764.768982F, -470.38501F },{ -764.768982F, -470.38501F } });
                sink->AddBezier({ { -764.768982F, -470.38501F },{ -764.768982F, 397.61499F },{ -764.768982F, 397.61499F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_221()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ 1.12899995F, -1.69299996F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { 1.75300002F, -1.69299996F },{ 2.25699997F, -1.18700004F },{ 2.25699997F, -0.56400001F } });
                sink->AddBezier({ { 2.25699997F, 0.681999981F },{ 1.24600005F, 1.69299996F },{ 0, 1.69299996F } });
                sink->AddBezier({ { -1.24600005F, 1.69299996F },{ -2.25699997F, 0.681999981F },{ -2.25699997F, -0.56400001F } });
                sink->AddBezier({ { -2.25699997F, -1.18700004F },{ -1.75199997F, -1.69299996F },{ -1.12899995F, -1.69299996F } });
                sink->AddBezier({ { -1.12899995F, -1.69299996F },{ 1.12899995F, -1.69299996F },{ 1.12899995F, -1.69299996F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_222()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_223()->GetGeometry(geoA);
                Geometry_226()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_223()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_224()->GetGeometry(geoA);
                Geometry_225()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 2
            CanvasGeometry Geometry_224()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -36, 17.0769997F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -36, 17.0769997F },{ 32, 17.0769997F },{ 32, 17.0769997F } });
                sink->AddBezier({ { 32, 17.0769997F },{ 32, -18.9230003F },{ 32, -18.9230003F } });
                sink->AddBezier({ { 32, -18.9230003F },{ -36, -18.9230003F },{ -36, -18.9230003F } });
                sink->AddBezier({ { -36, -18.9230003F },{ -36, 17.0769997F },{ -36, 17.0769997F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_225()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -758, 406.076996F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -758, 406.076996F },{ 520, 406.076996F },{ 520, 406.076996F } });
                sink->AddBezier({ { 520, 406.076996F },{ 520, -461.923004F },{ 520, -461.923004F } });
                sink->AddBezier({ { 520, -461.923004F },{ -758, -461.923004F },{ -758, -461.923004F } });
                sink->AddBezier({ { -758, -461.923004F },{ -758, 406.076996F },{ -758, 406.076996F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_226()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ 1.12800002F, -0.00100000005F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { 1.12800002F, 0.621999979F },{ 0.623000026F, 1.12899995F },{ 0, 1.12899995F } });
                sink->AddBezier({ { -0.623000026F, 1.12899995F },{ -1.12800002F, 0.621999979F },{ -1.12800002F, -0.00100000005F } });
                sink->AddBezier({ { -1.12800002F, -0.624000013F },{ -0.623000026F, -1.12899995F },{ 0, -1.12899995F } });
                sink->AddBezier({ { 0.623000026F, -1.12899995F },{ 1.12800002F, -0.624000013F },{ 1.12800002F, -0.00100000005F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_227()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_228()->GetGeometry(geoA);
                Geometry_231()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_228()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_229()->GetGeometry(geoA);
                Geometry_230()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 2
            CanvasGeometry Geometry_229()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -49.5390015F, 17.0769997F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -49.5390015F, 17.0769997F },{ 18.4610004F, 17.0769997F },{ 18.4610004F, 17.0769997F } });
                sink->AddBezier({ { 18.4610004F, 17.0769997F },{ 18.4610004F, -18.9230003F },{ 18.4610004F, -18.9230003F } });
                sink->AddBezier({ { 18.4610004F, -18.9230003F },{ -49.5390015F, -18.9230003F },{ -49.5390015F, -18.9230003F } });
                sink->AddBezier({ { -49.5390015F, -18.9230003F },{ -49.5390015F, 17.0769997F },{ -49.5390015F, 17.0769997F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_230()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -771.539001F, 406.076996F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -771.539001F, 406.076996F },{ 506.460999F, 406.076996F },{ 506.460999F, 406.076996F } });
                sink->AddBezier({ { 506.460999F, 406.076996F },{ 506.460999F, -461.923004F },{ 506.460999F, -461.923004F } });
                sink->AddBezier({ { 506.460999F, -461.923004F },{ -771.539001F, -461.923004F },{ -771.539001F, -461.923004F } });
                sink->AddBezier({ { -771.539001F, -461.923004F },{ -771.539001F, 406.076996F },{ -771.539001F, 406.076996F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_231()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -1.12800002F, -0.00100000005F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -1.12800002F, 0.621999979F },{ -0.623000026F, 1.12899995F },{ 0, 1.12899995F } });
                sink->AddBezier({ { 0.623000026F, 1.12899995F },{ 1.12800002F, 0.621999979F },{ 1.12800002F, -0.00100000005F } });
                sink->AddBezier({ { 1.12800002F, -0.624000013F },{ 0.623000026F, -1.12899995F },{ 0, -1.12899995F } });
                sink->AddBezier({ { -0.623000026F, -1.12899995F },{ -1.12800002F, -0.624000013F },{ -1.12800002F, -0.00100000005F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_232()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_233()->GetGeometry(geoA);
                Geometry_236()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_233()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_234()->GetGeometry(geoA);
                Geometry_235()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 2
            CanvasGeometry Geometry_234()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -34, 20 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -34, 20 },{ 34, 20 },{ 34, 20 } });
                sink->AddBezier({ { 34, 20 },{ 34, -20.0009995F },{ 34, -20.0009995F } });
                sink->AddBezier({ { 34, -20.0009995F },{ -34, -20.0009995F },{ -34, -20.0009995F } });
                sink->AddBezier({ { -34, -20.0009995F },{ -34, 20 },{ -34, 20 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_235()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -680, 409 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -680, 409 },{ 598, 409 },{ 598, 409 } });
                sink->AddBezier({ { 598, 409 },{ 598, -459 },{ 598, -459 } });
                sink->AddBezier({ { 598, -459 },{ -680, -459 },{ -680, -459 } });
                sink->AddBezier({ { -680, -459 },{ -680, 409 },{ -680, 409 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_236()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ 34, 48 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { 34, 48 },{ -34, 48 },{ -34, 48 } });
                sink->AddBezier({ { -34, 48 },{ -34, -20 },{ -34, -20 } });
                sink->AddBezier({ { -34, -20 },{ 34, -20 },{ 34, -20 } });
                sink->AddBezier({ { 34, -20 },{ 34, 48 },{ 34, 48 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_237()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_238()->GetGeometry(geoA);
                Geometry_241()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_238()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_239()->GetGeometry(geoA);
                Geometry_240()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 2
            CanvasGeometry Geometry_239()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -34, 15 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -34, 15 },{ 34, 15 },{ 34, 15 } });
                sink->AddBezier({ { 34, 15 },{ 34, -25.0009995F },{ 34, -25.0009995F } });
                sink->AddBezier({ { 34, -25.0009995F },{ -34, -25.0009995F },{ -34, -25.0009995F } });
                sink->AddBezier({ { -34, -25.0009995F },{ -34, 15 },{ -34, 15 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_240()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -680, 404 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -680, 404 },{ 598, 404 },{ 598, 404 } });
                sink->AddBezier({ { 598, 404 },{ 598, -464 },{ 598, -464 } });
                sink->AddBezier({ { 598, -464 },{ -680, -464 },{ -680, -464 } });
                sink->AddBezier({ { -680, -464 },{ -680, 404 },{ -680, 404 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_241()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ 18.8570004F, 3.85700011F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { 18.8570004F, 3.85700011F },{ 20.5680008F, -1.27600002F },{ 20.5680008F, -1.27600002F } });
                sink->AddBezier({ { 18.3929996F, -2.90700006F },{ 15.4870005F, -3.48600006F },{ 12.7139997F, -2.56200004F } });
                sink->AddBezier({ { 12.7139997F, -2.56200004F },{ 8.56799984F, -1.17900002F },{ 8.56799984F, -1.17900002F } });
                sink->AddBezier({ { 8.56799984F, -1.17900002F },{ 8.56799984F, -8.14299965F },{ 8.56799984F, -8.14299965F } });
                sink->AddBezier({ { 8.56799984F, -11.3940001F },{ 6.85699987F, -13.2869997F },{ 3.42799997F, -15 } });
                sink->AddBezier({ { 3.42799997F, -15 },{ 0, -9.8579998F },{ 0, -9.8579998F } });
                sink->AddBezier({ { 0, -9.8579998F },{ -3.4289999F, -15 },{ -3.4289999F, -15 } });
                sink->AddBezier({ { -6.8579998F, -13.2869997F },{ -8.57600021F, -11.3979998F },{ -8.57600021F, -8.14299965F } });
                sink->AddBezier({ { -8.57600021F, -8.14299965F },{ -8.57600021F, -1.17900002F },{ -8.57600021F, -1.17900002F } });
                sink->AddBezier({ { -8.57600021F, -1.17900002F },{ -12.7220001F, -2.56200004F },{ -12.7220001F, -2.56200004F } });
                sink->AddBezier({ { -15.493F, -3.48600006F },{ -18.3959999F, -2.90700006F },{ -20.5699997F, -1.27999997F } });
                sink->AddBezier({ { -20.5699997F, -1.27999997F },{ -18.8579998F, 3.85700011F },{ -18.8579998F, 3.85700011F } });
                sink->AddBezier({ { -18.8579998F, 3.85700011F },{ -24, 3.85700011F },{ -24, 3.85700011F } });
                sink->AddBezier({ { -24, 7.28599977F },{ -22.3040009F, 12.3140001F },{ -18.1429996F, 13.7019997F } });
                sink->AddBezier({ { -18.1429996F, 13.7019997F },{ -13.9960003F, 15.0839996F },{ -13.9960003F, 15.0839996F } });
                sink->AddBezier({ { -13.9960003F, 15.0839996F },{ -17.1469994F, 19.2859993F },{ -17.1469994F, 19.2859993F } });
                sink->AddBezier({ { -19.0669994F, 21.8460007F },{ -18.8579998F, 24.4279995F },{ -18.8579998F, 27.8570004F } });
                sink->AddBezier({ { -18.8579998F, 27.8570004F },{ -13.7139997F, 27.8570004F },{ -13.7139997F, 27.8570004F } });
                sink->AddBezier({ { -13.7139997F, 27.8570004F },{ -13.7139997F, 33 },{ -13.7139997F, 33 } });
                sink->AddBezier({ { -13.7139997F, 33 },{ -10.2959995F, 33 },{ -10.2959995F, 33 } });
                sink->AddBezier({ { -7.69099998F, 33 },{ -5.1170001F, 31.8139992F },{ -3.43199992F, 29.5709991F } });
                sink->AddBezier({ { -3.43199992F, 29.5709991F },{ -0.00400000019F, 24.9990005F },{ -0.00400000019F, 24.9990005F } });
                sink->AddBezier({ { -0.00400000019F, 24.9990005F },{ 3.42400002F, 29.5709991F },{ 3.42400002F, 29.5709991F } });
                sink->AddBezier({ { 5.10900021F, 31.8139992F },{ 7.68200016F, 33 },{ 10.2889996F, 33 } });
                sink->AddBezier({ { 10.2889996F, 33 },{ 13.7130003F, 33 },{ 13.7130003F, 33 } });
                sink->AddBezier({ { 13.7130003F, 33 },{ 13.7130003F, 27.8570004F },{ 13.7130003F, 27.8570004F } });
                sink->AddBezier({ { 13.7130003F, 27.8570004F },{ 18.8570004F, 27.8570004F },{ 18.8570004F, 27.8570004F } });
                sink->AddBezier({ { 18.8570004F, 24.4279995F },{ 19.059F, 21.8460007F },{ 17.1389999F, 19.2859993F } });
                sink->AddBezier({ { 17.1389999F, 19.2859993F },{ 13.9890003F, 15.0839996F },{ 13.9890003F, 15.0839996F } });
                sink->AddBezier({ { 13.9890003F, 15.0839996F },{ 18.1350002F, 13.7019997F },{ 18.1350002F, 13.7019997F } });
                sink->AddBezier({ { 22.2970009F, 12.3140001F },{ 24, 7.28599977F },{ 24, 3.85700011F } });
                sink->AddBezier({ { 24, 3.85700011F },{ 18.8570004F, 3.85700011F },{ 18.8570004F, 3.85700011F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_242()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_243()->GetGeometry(geoA);
                Geometry_024()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_243()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_244()->GetGeometry(geoA);
                Geometry_245()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 2
            CanvasGeometry Geometry_244()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -34, 12 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -34, 12 },{ 34, 12 },{ 34, 12 } });
                sink->AddBezier({ { 34, 12 },{ 34, -28.0009995F },{ 34, -28.0009995F } });
                sink->AddBezier({ { 34, -28.0009995F },{ -34, -28.0009995F },{ -34, -28.0009995F } });
                sink->AddBezier({ { -34, -28.0009995F },{ -34, 12 },{ -34, 12 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_245()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -680, 401 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -680, 401 },{ 598, 401 },{ 598, 401 } });
                sink->AddBezier({ { 598, 401 },{ 598, -467 },{ 598, -467 } });
                sink->AddBezier({ { 598, -467 },{ -680, -467 },{ -680, -467 } });
                sink->AddBezier({ { -680, -467 },{ -680, 401 },{ -680, 401 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_246()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_247()->GetGeometry(geoA);
                Geometry_250()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_247()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_248()->GetGeometry(geoA);
                Geometry_249()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 2
            CanvasGeometry Geometry_248()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -34, 1.28600001F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -34, 1.28600001F },{ 34, 1.28600001F },{ 34, 1.28600001F } });
                sink->AddBezier({ { 34, 1.28600001F },{ 34, -38.7150002F },{ 34, -38.7150002F } });
                sink->AddBezier({ { 34, -38.7150002F },{ -34, -38.7150002F },{ -34, -38.7150002F } });
                sink->AddBezier({ { -34, -38.7150002F },{ -34, 1.28600001F },{ -34, 1.28600001F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_249()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -680, 390.286011F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -680, 390.286011F },{ 598, 390.286011F },{ 598, 390.286011F } });
                sink->AddBezier({ { 598, 390.286011F },{ 598, -477.713989F },{ 598, -477.713989F } });
                sink->AddBezier({ { 598, -477.713989F },{ -680, -477.713989F },{ -680, -477.713989F } });
                sink->AddBezier({ { -680, -477.713989F },{ -680, 390.286011F },{ -680, 390.286011F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_250()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ 0, -1.28600001F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -0.947000027F, -1.28600001F },{ -1.71399999F, -0.518999994F },{ -1.71399999F, 0.428000003F } });
                sink->AddBezier({ { -1.71399999F, 0.428000003F },{ -1.71399999F, 8.9989996F },{ -1.71399999F, 8.9989996F } });
                sink->AddBezier({ { -1.71399999F, 9.94699955F },{ -0.947000027F, 10.7139997F },{ 0, 10.7139997F } });
                sink->AddBezier({ { 0.947000027F, 10.7139997F },{ 1.71399999F, 9.94699955F },{ 1.71399999F, 8.9989996F } });
                sink->AddBezier({ { 1.71399999F, 8.9989996F },{ 1.71399999F, 0.428000003F },{ 1.71399999F, 0.428000003F } });
                sink->AddBezier({ { 1.71399999F, -0.518999994F },{ 0.947000027F, -1.28600001F },{ 0, -1.28600001F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_251()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_252()->GetGeometry(geoA);
                Geometry_255()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_252()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_253()->GetGeometry(geoA);
                Geometry_254()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 2
            CanvasGeometry Geometry_253()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -41.7140007F, 7.36899996F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -41.7140007F, 7.36899996F },{ 26.2859993F, 7.36899996F },{ 26.2859993F, 7.36899996F } });
                sink->AddBezier({ { 26.2859993F, 7.36899996F },{ 26.2859993F, -32.632F },{ 26.2859993F, -32.632F } });
                sink->AddBezier({ { 26.2859993F, -32.632F },{ -41.7140007F, -32.632F },{ -41.7140007F, -32.632F } });
                sink->AddBezier({ { -41.7140007F, -32.632F },{ -41.7140007F, 7.36899996F },{ -41.7140007F, 7.36899996F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_254()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -687.713989F, 396.369995F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -687.713989F, 396.369995F },{ 590.286011F, 396.369995F },{ 590.286011F, 396.369995F } });
                sink->AddBezier({ { 590.286011F, 396.369995F },{ 590.286011F, -471.630005F },{ 590.286011F, -471.630005F } });
                sink->AddBezier({ { 590.286011F, -471.630005F },{ -687.713989F, -471.630005F },{ -687.713989F, -471.630005F } });
                sink->AddBezier({ { -687.713989F, -471.630005F },{ -687.713989F, 396.369995F },{ -687.713989F, 396.369995F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_255()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ 4.28599977F, 1.36899996F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { 4.28599977F, 1.36899996F },{ -1.86099994F, 1.36899996F },{ -1.86099994F, 1.36899996F } });
                sink->AddBezier({ { -1.86099994F, 1.36899996F },{ 3.78399992F, -4.27699995F },{ 3.78399992F, -4.27699995F } });
                sink->AddBezier({ { 4.454F, -4.94500017F },{ 4.454F, -6.03000021F },{ 3.78399992F, -6.69999981F } });
                sink->AddBezier({ { 3.11400008F, -7.36999989F },{ 2.02900004F, -7.36999989F },{ 1.35899997F, -6.69999981F } });
                sink->AddBezier({ { 1.35899997F, -6.69999981F },{ -4.69999981F, -0.638999999F },{ -4.69999981F, -0.638999999F } });
                sink->AddBezier({ { -5.28299999F, -0.057F },{ -5.32800007F, 0.828000009F },{ -4.89499998F, 1.49399996F } });
                sink->AddBezier({ { -5.53900003F, 1.74000001F },{ -6, 2.352F },{ -6, 3.08400011F } });
                sink->AddBezier({ { -6, 3.81599998F },{ -5.53900003F, 4.4289999F },{ -4.89499998F, 4.67500019F } });
                sink->AddBezier({ { -5.32800007F, 5.34100008F },{ -5.28299999F, 6.22399998F },{ -4.69999981F, 6.80700016F } });
                sink->AddBezier({ { -4.69999981F, 6.80700016F },{ 1.35899997F, 12.868F },{ 1.35899997F, 12.868F } });
                sink->AddBezier({ { 2.02900004F, 13.5380001F },{ 3.11400008F, 13.5380001F },{ 3.78399992F, 12.868F } });
                sink->AddBezier({ { 4.454F, 12.198F },{ 4.454F, 11.1129999F },{ 3.78399992F, 10.4429998F } });
                sink->AddBezier({ { 3.78399992F, 10.4429998F },{ -1.86099994F, 4.79899979F },{ -1.86099994F, 4.79899979F } });
                sink->AddBezier({ { -1.86099994F, 4.79899979F },{ 4.28599977F, 4.79899979F },{ 4.28599977F, 4.79899979F } });
                sink->AddBezier({ { 5.2329998F, 4.79899979F },{ 6, 4.03200006F },{ 6, 3.08400011F } });
                sink->AddBezier({ { 6, 2.13700008F },{ 5.2329998F, 1.36899996F },{ 4.28599977F, 1.36899996F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_256()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_257()->GetGeometry(geoA);
                Geometry_260()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_257()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_258()->GetGeometry(geoA);
                Geometry_259()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 2
            CanvasGeometry Geometry_258()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -26.2859993F, 7.36999989F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -26.2859993F, 7.36999989F },{ 41.7140007F, 7.36999989F },{ 41.7140007F, 7.36999989F } });
                sink->AddBezier({ { 41.7140007F, 7.36999989F },{ 41.7140007F, -32.6310005F },{ 41.7140007F, -32.6310005F } });
                sink->AddBezier({ { 41.7140007F, -32.6310005F },{ -26.2859993F, -32.6310005F },{ -26.2859993F, -32.6310005F } });
                sink->AddBezier({ { -26.2859993F, -32.6310005F },{ -26.2859993F, 7.36999989F },{ -26.2859993F, 7.36999989F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_259()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -672.286011F, 396.369995F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -672.286011F, 396.369995F },{ 605.713989F, 396.369995F },{ 605.713989F, 396.369995F } });
                sink->AddBezier({ { 605.713989F, 396.369995F },{ 605.713989F, -471.630005F },{ 605.713989F, -471.630005F } });
                sink->AddBezier({ { 605.713989F, -471.630005F },{ -672.286011F, -471.630005F },{ -672.286011F, -471.630005F } });
                sink->AddBezier({ { -672.286011F, -471.630005F },{ -672.286011F, 396.369995F },{ -672.286011F, 396.369995F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_260()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ 6, 3.08299994F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { 6, 2.352F },{ 5.53900003F, 1.73699999F },{ 4.89499998F, 1.49300003F } });
                sink->AddBezier({ { 5.32800007F, 0.827000022F },{ 5.28299999F, -0.0579999983F },{ 4.69999981F, -0.639999986F } });
                sink->AddBezier({ { 4.69999981F, -0.639999986F },{ -1.35899997F, -6.69999981F },{ -1.35899997F, -6.69999981F } });
                sink->AddBezier({ { -2.02900004F, -7.36999989F },{ -3.11400008F, -7.36999989F },{ -3.78399992F, -6.69999981F } });
                sink->AddBezier({ { -4.454F, -6.03000021F },{ -4.454F, -4.94500017F },{ -3.78399992F, -4.27600002F } });
                sink->AddBezier({ { -3.78399992F, -4.27600002F },{ 1.86099994F, 1.36899996F },{ 1.86099994F, 1.36899996F } });
                sink->AddBezier({ { 1.86099994F, 1.36899996F },{ -4.28599977F, 1.36899996F },{ -4.28599977F, 1.36899996F } });
                sink->AddBezier({ { -5.2329998F, 1.36899996F },{ -6, 2.13599992F },{ -6, 3.08299994F } });
                sink->AddBezier({ { -6, 4.03100014F },{ -5.2329998F, 4.79799986F },{ -4.28599977F, 4.79799986F } });
                sink->AddBezier({ { -4.28599977F, 4.79799986F },{ 1.86099994F, 4.79799986F },{ 1.86099994F, 4.79799986F } });
                sink->AddBezier({ { 1.86099994F, 4.79799986F },{ -3.78399992F, 10.4420004F },{ -3.78399992F, 10.4420004F } });
                sink->AddBezier({ { -4.454F, 11.1120005F },{ -4.454F, 12.1969995F },{ -3.78399992F, 12.8669996F } });
                sink->AddBezier({ { -3.11400008F, 13.5369997F },{ -2.02900004F, 13.5369997F },{ -1.35899997F, 12.8669996F } });
                sink->AddBezier({ { -1.35899997F, 12.8669996F },{ 4.69999981F, 6.80700016F },{ 4.69999981F, 6.80700016F } });
                sink->AddBezier({ { 5.28299999F, 6.22399998F },{ 5.32800007F, 5.34000015F },{ 4.89499998F, 4.67399979F } });
                sink->AddBezier({ { 5.53900003F, 4.42799997F },{ 6, 3.81500006F },{ 6, 3.08299994F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_261()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_262()->GetGeometry(geoA);
                Geometry_044()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_262()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_263()->GetGeometry(geoA);
                Geometry_264()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 2
            CanvasGeometry Geometry_263()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -34, 16.2859993F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -34, 16.2859993F },{ 34, 16.2859993F },{ 34, 16.2859993F } });
                sink->AddBezier({ { 34, 16.2859993F },{ 34, -23.7150002F },{ 34, -23.7150002F } });
                sink->AddBezier({ { 34, -23.7150002F },{ -34, -23.7150002F },{ -34, -23.7150002F } });
                sink->AddBezier({ { -34, -23.7150002F },{ -34, 16.2859993F },{ -34, 16.2859993F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_264()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -680, 405.286011F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -680, 405.286011F },{ 598, 405.286011F },{ 598, 405.286011F } });
                sink->AddBezier({ { 598, 405.286011F },{ 598, -462.713989F },{ 598, -462.713989F } });
                sink->AddBezier({ { 598, -462.713989F },{ -680, -462.713989F },{ -680, -462.713989F } });
                sink->AddBezier({ { -680, -462.713989F },{ -680, 405.286011F },{ -680, 405.286011F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_265()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_266()->GetGeometry(geoA);
                Geometry_054()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_266()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_267()->GetGeometry(geoA);
                Geometry_268()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 2
            CanvasGeometry Geometry_267()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -45.9990005F, 4.28499985F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -45.9990005F, 4.28499985F },{ 22.0009995F, 4.28499985F },{ 22.0009995F, 4.28499985F } });
                sink->AddBezier({ { 22.0009995F, 4.28499985F },{ 22.0009995F, -35.7159996F },{ 22.0009995F, -35.7159996F } });
                sink->AddBezier({ { 22.0009995F, -35.7159996F },{ -45.9990005F, -35.7159996F },{ -45.9990005F, -35.7159996F } });
                sink->AddBezier({ { -45.9990005F, -35.7159996F },{ -45.9990005F, 4.28499985F },{ -45.9990005F, 4.28499985F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_268()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -691.999023F, 393.285004F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -691.999023F, 393.285004F },{ 586.000977F, 393.285004F },{ 586.000977F, 393.285004F } });
                sink->AddBezier({ { 586.000977F, 393.285004F },{ 586.000977F, -474.714996F },{ 586.000977F, -474.714996F } });
                sink->AddBezier({ { 586.000977F, -474.714996F },{ -691.999023F, -474.714996F },{ -691.999023F, -474.714996F } });
                sink->AddBezier({ { -691.999023F, -474.714996F },{ -691.999023F, 393.285004F },{ -691.999023F, 393.285004F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_269()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_270()->GetGeometry(geoA);
                Geometry_273()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_270()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_271()->GetGeometry(geoA);
                Geometry_272()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 2
            CanvasGeometry Geometry_271()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -44.2849998F, 12.8570004F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -44.2849998F, 12.8570004F },{ 23.7150002F, 12.8570004F },{ 23.7150002F, 12.8570004F } });
                sink->AddBezier({ { 23.7150002F, 12.8570004F },{ 23.7150002F, -27.1439991F },{ 23.7150002F, -27.1439991F } });
                sink->AddBezier({ { 23.7150002F, -27.1439991F },{ -44.2849998F, -27.1439991F },{ -44.2849998F, -27.1439991F } });
                sink->AddBezier({ { -44.2849998F, -27.1439991F },{ -44.2849998F, 12.8570004F },{ -44.2849998F, 12.8570004F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_272()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -690.284973F, 401.856995F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -690.284973F, 401.856995F },{ 587.715027F, 401.856995F },{ 587.715027F, 401.856995F } });
                sink->AddBezier({ { 587.715027F, 401.856995F },{ 587.715027F, -466.143005F },{ 587.715027F, -466.143005F } });
                sink->AddBezier({ { 587.715027F, -466.143005F },{ -690.284973F, -466.143005F },{ -690.284973F, -466.143005F } });
                sink->AddBezier({ { -690.284973F, -466.143005F },{ -690.284973F, 401.856995F },{ -690.284973F, 401.856995F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_273()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ 1.21300006F, 1.21200001F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { 1.88300002F, 0.542999983F },{ 1.88100004F, -0.54400003F },{ 1.21300006F, -1.21200001F } });
                sink->AddBezier({ { 0.542999983F, -1.88199997F },{ -0.541999996F, -1.88199997F },{ -1.21200001F, -1.21200001F } });
                sink->AddBezier({ { -1.88100004F, -0.541999996F },{ -1.88300002F, 0.542999983F },{ -1.21300006F, 1.21200001F } });
                sink->AddBezier({ { -0.54400003F, 1.88199997F },{ 0.542999983F, 1.88199997F },{ 1.21300006F, 1.21200001F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_274()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_275()->GetGeometry(geoA);
                Geometry_064()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_275()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_276()->GetGeometry(geoA);
                Geometry_277()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 2
            CanvasGeometry Geometry_276()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -22.0009995F, 4.28599977F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -22.0009995F, 4.28599977F },{ 45.9990005F, 4.28599977F },{ 45.9990005F, 4.28599977F } });
                sink->AddBezier({ { 45.9990005F, 4.28599977F },{ 45.9990005F, -35.7150002F },{ 45.9990005F, -35.7150002F } });
                sink->AddBezier({ { 45.9990005F, -35.7150002F },{ -22.0009995F, -35.7150002F },{ -22.0009995F, -35.7150002F } });
                sink->AddBezier({ { -22.0009995F, -35.7150002F },{ -22.0009995F, 4.28599977F },{ -22.0009995F, 4.28599977F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_277()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -668.000977F, 393.286011F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -668.000977F, 393.286011F },{ 609.999023F, 393.286011F },{ 609.999023F, 393.286011F } });
                sink->AddBezier({ { 609.999023F, 393.286011F },{ 609.999023F, -474.713989F },{ 609.999023F, -474.713989F } });
                sink->AddBezier({ { 609.999023F, -474.713989F },{ -668.000977F, -474.713989F },{ -668.000977F, -474.713989F } });
                sink->AddBezier({ { -668.000977F, -474.713989F },{ -668.000977F, 393.286011F },{ -668.000977F, 393.286011F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_278()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_279()->GetGeometry(geoA);
                Geometry_282()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_279()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_280()->GetGeometry(geoA);
                Geometry_281()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 2
            CanvasGeometry Geometry_280()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -23.7150002F, 12.8570004F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -23.7150002F, 12.8570004F },{ 44.2849998F, 12.8570004F },{ 44.2849998F, 12.8570004F } });
                sink->AddBezier({ { 44.2849998F, 12.8570004F },{ 44.2849998F, -27.1439991F },{ 44.2849998F, -27.1439991F } });
                sink->AddBezier({ { 44.2849998F, -27.1439991F },{ -23.7150002F, -27.1439991F },{ -23.7150002F, -27.1439991F } });
                sink->AddBezier({ { -23.7150002F, -27.1439991F },{ -23.7150002F, 12.8570004F },{ -23.7150002F, 12.8570004F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_281()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -669.715027F, 401.856995F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -669.715027F, 401.856995F },{ 608.284973F, 401.856995F },{ 608.284973F, 401.856995F } });
                sink->AddBezier({ { 608.284973F, 401.856995F },{ 608.284973F, -466.143005F },{ 608.284973F, -466.143005F } });
                sink->AddBezier({ { 608.284973F, -466.143005F },{ -669.715027F, -466.143005F },{ -669.715027F, -466.143005F } });
                sink->AddBezier({ { -669.715027F, -466.143005F },{ -669.715027F, 401.856995F },{ -669.715027F, 401.856995F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_282()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -1.21300006F, -1.21200001F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -1.88100004F, -0.54400003F },{ -1.88300002F, 0.542999983F },{ -1.21300006F, 1.21200001F } });
                sink->AddBezier({ { -0.542999983F, 1.88199997F },{ 0.54400003F, 1.88199997F },{ 1.21300006F, 1.21200001F } });
                sink->AddBezier({ { 1.88300002F, 0.542999983F },{ 1.88100004F, -0.541999996F },{ 1.21200001F, -1.21200001F } });
                sink->AddBezier({ { 0.541999996F, -1.88199997F },{ -0.542999983F, -1.88199997F },{ -1.21300006F, -1.21200001F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_283()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_284()->GetGeometry(geoA);
                Geometry_287()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_284()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_285()->GetGeometry(geoA);
                Geometry_286()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 2
            CanvasGeometry Geometry_285()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -34, 5.5710001F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -34, 5.5710001F },{ 34, 5.5710001F },{ 34, 5.5710001F } });
                sink->AddBezier({ { 34, 5.5710001F },{ 34, -34.4300003F },{ 34, -34.4300003F } });
                sink->AddBezier({ { 34, -34.4300003F },{ -34, -34.4300003F },{ -34, -34.4300003F } });
                sink->AddBezier({ { -34, -34.4300003F },{ -34, 5.5710001F },{ -34, 5.5710001F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_286()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -680, 394.571014F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -680, 394.571014F },{ 598, 394.571014F },{ 598, 394.571014F } });
                sink->AddBezier({ { 598, 394.571014F },{ 598, -473.428986F },{ 598, -473.428986F } });
                sink->AddBezier({ { 598, -473.428986F },{ -680, -473.428986F },{ -680, -473.428986F } });
                sink->AddBezier({ { -680, -473.428986F },{ -680, 394.571014F },{ -680, 394.571014F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_287()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ 0.00200000009F, -5.5710001F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -3.78500009F, -5.5710001F },{ -6.85699987F, -2.50300002F },{ -6.85699987F, 1.28499997F } });
                sink->AddBezier({ { -6.85699987F, 5.07499981F },{ -3.78500009F, 8.14299965F },{ 0.00200000009F, 8.14299965F } });
                sink->AddBezier({ { 3.78699994F, 8.14299965F },{ 6.85699987F, 5.07499981F },{ 6.85699987F, 1.28499997F } });
                sink->AddBezier({ { 6.85699987F, -2.50300002F },{ 3.78699994F, -5.5710001F },{ 0.00200000009F, -5.5710001F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_288()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_289()->GetGeometry(geoA);
                Geometry_292()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_289()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_290()->GetGeometry(geoA);
                Geometry_291()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 2
            CanvasGeometry Geometry_290()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -34, 4.28599977F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -34, 4.28599977F },{ 34, 4.28599977F },{ 34, 4.28599977F } });
                sink->AddBezier({ { 34, 4.28599977F },{ 34, -35.7150002F },{ 34, -35.7150002F } });
                sink->AddBezier({ { 34, -35.7150002F },{ -34, -35.7150002F },{ -34, -35.7150002F } });
                sink->AddBezier({ { -34, -35.7150002F },{ -34, 4.28599977F },{ -34, 4.28599977F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_291()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -680, 393.286011F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -680, 393.286011F },{ 598, 393.286011F },{ 598, 393.286011F } });
                sink->AddBezier({ { 598, 393.286011F },{ 598, -474.713989F },{ 598, -474.713989F } });
                sink->AddBezier({ { 598, -474.713989F },{ -680, -474.713989F },{ -680, -474.713989F } });
                sink->AddBezier({ { -680, -474.713989F },{ -680, 393.286011F },{ -680, 393.286011F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_292()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ 3.4289999F, -0.00100000005F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { 3.4289999F, 1.89499998F },{ 1.88999999F, 3.42799997F },{ 0, 3.42799997F } });
                sink->AddBezier({ { -1.89499998F, 3.42799997F },{ -3.4289999F, 1.89499998F },{ -3.4289999F, -0.00100000005F } });
                sink->AddBezier({ { -3.4289999F, -1.89600003F },{ -1.89499998F, -3.42799997F },{ 0, -3.42799997F } });
                sink->AddBezier({ { 1.88999999F, -3.42799997F },{ 3.4289999F, -1.89600003F },{ 3.4289999F, -0.00100000005F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_293()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_294()->GetGeometry(geoA);
                Geometry_014()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_294()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_090()->GetGeometry(geoA);
                Geometry_091()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_295()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_296()->GetGeometry(geoA);
                Geometry_100()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_296()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_098()->GetGeometry(geoA);
                Geometry_099()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_297()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_298()->GetGeometry(geoA);
                Geometry_112()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_298()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_110()->GetGeometry(geoA);
                Geometry_111()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_299()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_300()->GetGeometry(geoA);
                Geometry_117()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_300()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_115()->GetGeometry(geoA);
                Geometry_116()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_301()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_302()->GetGeometry(geoA);
                Geometry_122()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_302()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_120()->GetGeometry(geoA);
                Geometry_121()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_303()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_304()->GetGeometry(geoA);
                Geometry_127()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_304()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_125()->GetGeometry(geoA);
                Geometry_126()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_305()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ 200, -6 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { 200, -6 },{ -200, -6 },{ -200, -6 } });
                sink->AddBezier({ { -200, -6 },{ -200, 6 },{ -200, 6 } });
                sink->AddBezier({ { -200, 6 },{ 200, 6 },{ 200, 6 } });
                sink->AddBezier({ { 200, 6 },{ 200, -6 },{ 200, -6 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_306()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_307()->GetGeometry(geoA);
                Geometry_310()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_307()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_308()->GetGeometry(geoA);
                Geometry_309()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 2
            CanvasGeometry Geometry_308()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -694, -533 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -694, -533 },{ 584, -533 },{ 584, -533 } });
                sink->AddBezier({ { 584, -533 },{ 584, 335 },{ 584, 335 } });
                sink->AddBezier({ { 584, 335 },{ -694, 335 },{ -694, 335 } });
                sink->AddBezier({ { -694, 335 },{ -694, -533 },{ -694, -533 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_309()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -694, 335 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -694, 335 },{ 584, 335 },{ 584, 335 } });
                sink->AddBezier({ { 584, 335 },{ 584, -533 },{ 584, -533 } });
                sink->AddBezier({ { 584, -533 },{ -694, -533 },{ -694, -533 } });
                sink->AddBezier({ { -694, -533 },{ -694, 335 },{ -694, 335 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_310()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ 200, -2 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { 200, -2 },{ -200, -2 },{ -200, -2 } });
                sink->AddBezier({ { -200, -2 },{ -200, -1.93099999F },{ -200, -1.93099999F } });
                sink->AddBezier({ { -200, 0.239999995F },{ -198.240005F, 2 },{ -196.069F, 2 } });
                sink->AddBezier({ { -196.069F, 2 },{ 196.069F, 2 },{ 196.069F, 2 } });
                sink->AddBezier({ { 198.240005F, 2 },{ 200, 0.239999995F },{ 200, -1.93099999F } });
                sink->AddBezier({ { 200, -1.93099999F },{ 200, -2 },{ 200, -2 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_311()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_312()->GetGeometry(geoA);
                Geometry_315()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_312()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_313()->GetGeometry(geoA);
                Geometry_314()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 2
            CanvasGeometry Geometry_313()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -694, -521 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -694, -521 },{ 584, -521 },{ 584, -521 } });
                sink->AddBezier({ { 584, -521 },{ 584, 347 },{ 584, 347 } });
                sink->AddBezier({ { 584, 347 },{ -694, 347 },{ -694, 347 } });
                sink->AddBezier({ { -694, 347 },{ -694, -521 },{ -694, -521 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_314()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -694, 347 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -694, 347 },{ 584, 347 },{ 584, 347 } });
                sink->AddBezier({ { 584, 347 },{ 584, -521 },{ 584, -521 } });
                sink->AddBezier({ { 584, -521 },{ -694, -521 },{ -694, -521 } });
                sink->AddBezier({ { -694, -521 },{ -694, 347 },{ -694, 347 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            // Path 1
            CanvasGeometry Geometry_315()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ 32, 2 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { 32, 2 },{ -32, 2 },{ -32, 2 } });
                sink->AddBezier({ { -34.2089996F, 2 },{ -36, 0.209000006F },{ -36, -2 } });
                sink->AddBezier({ { -36, -2 },{ 36, -2 },{ 36, -2 } });
                sink->AddBezier({ { 36, 0.209000006F },{ 34.2089996F, 2 },{ 32, 2 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_316()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_317()->GetGeometry(geoA);
                Geometry_112()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_317()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_110()->GetGeometry(geoA);
                Geometry_111()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_318()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_319()->GetGeometry(geoA);
                Geometry_117()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_319()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_115()->GetGeometry(geoA);
                Geometry_116()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_320()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_321()->GetGeometry(geoA);
                Geometry_122()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_321()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_120()->GetGeometry(geoA);
                Geometry_121()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_322()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_323()->GetGeometry(geoA);
                Geometry_127()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_323()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_125()->GetGeometry(geoA);
                Geometry_126()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_324()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_ALTERNATE);
                sink->BeginFigure({ 0.25F, 0.050999999F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { 0.25F, 0.050999999F },{ 72.75F, 0.050999999F },{ 72.75F, 0.050999999F } });
                sink->AddBezier({ { 72.75F, 0.050999999F },{ 0.25F, 0.050999999F },{ 0.25F, 0.050999999F } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = _geometry_324 = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_325()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_326()->GetGeometry(geoA);
                Geometry_112()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_326()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_110()->GetGeometry(geoA);
                Geometry_111()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_327()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_328()->GetGeometry(geoA);
                Geometry_117()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_328()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_115()->GetGeometry(geoA);
                Geometry_116()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_329()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_330()->GetGeometry(geoA);
                Geometry_122()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_330()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_120()->GetGeometry(geoA);
                Geometry_121()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_331()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_332()->GetGeometry(geoA);
                Geometry_127()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_332()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_125()->GetGeometry(geoA);
                Geometry_126()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_333()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_334()->GetGeometry(geoA);
                Geometry_004()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_334()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_002()->GetGeometry(geoA);
                Geometry_003()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_335()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_336()->GetGeometry(geoA);
                Geometry_007()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_336()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_002()->GetGeometry(geoA);
                Geometry_003()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_337()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_338()->GetGeometry(geoA);
                Geometry_012()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_338()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_010()->GetGeometry(geoA);
                Geometry_011()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_339()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_340()->GetGeometry(geoA);
                Geometry_019()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_340()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_017()->GetGeometry(geoA);
                Geometry_018()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_341()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_342()->GetGeometry(geoA);
                Geometry_024()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_342()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_022()->GetGeometry(geoA);
                Geometry_023()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_343()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_344()->GetGeometry(geoA);
                Geometry_029()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_344()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_027()->GetGeometry(geoA);
                Geometry_028()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_345()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_346()->GetGeometry(geoA);
                Geometry_034()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_346()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_032()->GetGeometry(geoA);
                Geometry_033()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_347()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_348()->GetGeometry(geoA);
                Geometry_039()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_348()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_037()->GetGeometry(geoA);
                Geometry_038()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_349()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_350()->GetGeometry(geoA);
                Geometry_044()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_350()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_042()->GetGeometry(geoA);
                Geometry_043()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_351()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_352()->GetGeometry(geoA);
                Geometry_049()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_352()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_047()->GetGeometry(geoA);
                Geometry_048()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_353()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_354()->GetGeometry(geoA);
                Geometry_054()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_354()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_052()->GetGeometry(geoA);
                Geometry_053()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_355()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_356()->GetGeometry(geoA);
                Geometry_059()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_356()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_057()->GetGeometry(geoA);
                Geometry_058()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_357()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_358()->GetGeometry(geoA);
                Geometry_064()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_358()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_062()->GetGeometry(geoA);
                Geometry_063()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_359()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_360()->GetGeometry(geoA);
                Geometry_069()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_360()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_067()->GetGeometry(geoA);
                Geometry_068()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_361()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_362()->GetGeometry(geoA);
                Geometry_074()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_362()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_072()->GetGeometry(geoA);
                Geometry_073()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_363()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_364()->GetGeometry(geoA);
                Geometry_079()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_364()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_077()->GetGeometry(geoA);
                Geometry_078()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_365()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_366()->GetGeometry(geoA);
                Geometry_084()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_366()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_082()->GetGeometry(geoA);
                Geometry_083()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_367()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_368()->GetGeometry(geoA);
                Geometry_087()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_368()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_082()->GetGeometry(geoA);
                Geometry_083()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_369()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_370()->GetGeometry(geoA);
                Geometry_014()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_370()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_090()->GetGeometry(geoA);
                Geometry_091()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_371()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_372()->GetGeometry(geoA);
                Geometry_100()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_372()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_098()->GetGeometry(geoA);
                Geometry_099()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_373()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_374()->GetGeometry(geoA);
                Geometry_112()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_374()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_110()->GetGeometry(geoA);
                Geometry_111()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_375()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_376()->GetGeometry(geoA);
                Geometry_117()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_376()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_115()->GetGeometry(geoA);
                Geometry_116()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_377()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_378()->GetGeometry(geoA);
                Geometry_122()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_378()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_120()->GetGeometry(geoA);
                Geometry_121()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_379()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_380()->GetGeometry(geoA);
                Geometry_127()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_380()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_125()->GetGeometry(geoA);
                Geometry_126()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_381()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_382()->GetGeometry(geoA);
                Geometry_112()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_382()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_110()->GetGeometry(geoA);
                Geometry_111()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_383()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_384()->GetGeometry(geoA);
                Geometry_117()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_384()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_115()->GetGeometry(geoA);
                Geometry_116()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_385()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_386()->GetGeometry(geoA);
                Geometry_122()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_386()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_120()->GetGeometry(geoA);
                Geometry_121()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_387()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_388()->GetGeometry(geoA);
                Geometry_127()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_388()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_125()->GetGeometry(geoA);
                Geometry_126()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_389()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_390()->GetGeometry(geoA);
                Geometry_004()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_390()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_002()->GetGeometry(geoA);
                Geometry_003()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_391()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_392()->GetGeometry(geoA);
                Geometry_007()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_392()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_002()->GetGeometry(geoA);
                Geometry_003()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_393()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_394()->GetGeometry(geoA);
                Geometry_012()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_394()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_010()->GetGeometry(geoA);
                Geometry_011()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_395()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_396()->GetGeometry(geoA);
                Geometry_019()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_396()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_017()->GetGeometry(geoA);
                Geometry_018()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_397()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_398()->GetGeometry(geoA);
                Geometry_024()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_398()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_022()->GetGeometry(geoA);
                Geometry_023()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_399()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_400()->GetGeometry(geoA);
                Geometry_029()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_400()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_027()->GetGeometry(geoA);
                Geometry_028()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_401()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_402()->GetGeometry(geoA);
                Geometry_034()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_402()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_032()->GetGeometry(geoA);
                Geometry_033()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_403()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_404()->GetGeometry(geoA);
                Geometry_039()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_404()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_037()->GetGeometry(geoA);
                Geometry_038()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_405()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_406()->GetGeometry(geoA);
                Geometry_044()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_406()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_042()->GetGeometry(geoA);
                Geometry_043()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_407()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_408()->GetGeometry(geoA);
                Geometry_049()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_408()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_047()->GetGeometry(geoA);
                Geometry_048()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_409()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_410()->GetGeometry(geoA);
                Geometry_054()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_410()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_052()->GetGeometry(geoA);
                Geometry_053()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_411()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_412()->GetGeometry(geoA);
                Geometry_059()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_412()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_057()->GetGeometry(geoA);
                Geometry_058()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_413()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_414()->GetGeometry(geoA);
                Geometry_064()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_414()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_062()->GetGeometry(geoA);
                Geometry_063()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_415()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_416()->GetGeometry(geoA);
                Geometry_069()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_416()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_067()->GetGeometry(geoA);
                Geometry_068()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_417()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_418()->GetGeometry(geoA);
                Geometry_074()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_418()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_072()->GetGeometry(geoA);
                Geometry_073()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_419()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_420()->GetGeometry(geoA);
                Geometry_079()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_420()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_077()->GetGeometry(geoA);
                Geometry_078()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_421()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_422()->GetGeometry(geoA);
                Geometry_084()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_422()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_082()->GetGeometry(geoA);
                Geometry_083()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_423()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_424()->GetGeometry(geoA);
                Geometry_087()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_424()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_082()->GetGeometry(geoA);
                Geometry_083()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_425()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_426()->GetGeometry(geoA);
                Geometry_014()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_426()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_090()->GetGeometry(geoA);
                Geometry_091()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_427()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_428()->GetGeometry(geoA);
                Geometry_100()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_428()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_098()->GetGeometry(geoA);
                Geometry_099()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_429()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_430()->GetGeometry(geoA);
                Geometry_112()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_430()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_110()->GetGeometry(geoA);
                Geometry_111()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_431()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_432()->GetGeometry(geoA);
                Geometry_117()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_432()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_115()->GetGeometry(geoA);
                Geometry_116()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_433()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_434()->GetGeometry(geoA);
                Geometry_122()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_434()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_120()->GetGeometry(geoA);
                Geometry_121()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_435()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_436()->GetGeometry(geoA);
                Geometry_127()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_436()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_125()->GetGeometry(geoA);
                Geometry_126()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_437()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_438()->GetGeometry(geoA);
                Geometry_112()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_438()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_110()->GetGeometry(geoA);
                Geometry_111()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_439()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_440()->GetGeometry(geoA);
                Geometry_117()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_440()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_115()->GetGeometry(geoA);
                Geometry_116()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_441()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_442()->GetGeometry(geoA);
                Geometry_122()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_442()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_120()->GetGeometry(geoA);
                Geometry_121()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_443()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_444()->GetGeometry(geoA);
                Geometry_127()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_444()
            {
                CanvasGeometry result;
                ID2D1Geometry **geoA = new ID2D1Geometry*, **geoB = new ID2D1Geometry*;
                Geometry_125()->GetGeometry(geoA);
                Geometry_126()->GetGeometry(geoB);
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                FFHR((*geoA)->CombineWithGeometry(
                    *geoB,
                    D2D1_COMBINE_MODE_INTERSECT,
                    { 1, 0, 0, 1, 0, 0 },
                    sink.Get()));
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            InsetClip^ InsetClip()
            {
                auto result = _insetClip = _c->CreateInsetClip();
                return result;
            }

            LinearEasingFunction^ LinearEasingFunction()
            {
                return _linearEasingFunction = _c->CreateLinearEasingFunction();
            }

            CompositionPathGeometry^ PathGeometry_000()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_000())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_001()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_005())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_002()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_008())));
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneScreen'.Transforms
            //     'PhoneScreen'.Contents
            //       'PhoneScreen Outlines 2'.Contents
            //         'PhoneScreen Outlines 2'.Contents
            //           Group: Group 1
            //             Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_003()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_013())));
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            //         Group: Group 16
            //           Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_004()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_014())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_005()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_015())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_006()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_020())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_007()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_025())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_008()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_030())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_009()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_035())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_010()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_040())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_011()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_045())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_012()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_050())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_013()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_055())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_014()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_060())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_015()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_065())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_016()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_070())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_017()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_075())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_018()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_080())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_019()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_085())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_020()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_088())));
                return result;
            }

            // 'PhonePic02'.AncestorTransformFrom_PicMover
            //   'PhonePic02'.Contents
            //     'PicMountains'.Contents
            //       'PicMountains'.Contents
            //         Group: MountianRight
            //           Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_021()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_092())));
                return result;
            }

            // 'PhonePic02'.AncestorTransformFrom_PicMover
            //   'PhonePic02'.Contents
            //     'PicMountains'.Contents
            //       'PicMountains'.Contents
            //         Group: MountianRightSnow
            //           Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_022()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_093())));
                return result;
            }

            // 'PhonePic02'.AncestorTransformFrom_PicMover
            //   'PhonePic02'.Contents
            //     'PicMountains'.Contents
            //       'PicMountains'.Contents
            //         Group: MountainLeft
            //           Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_023()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_094())));
                return result;
            }

            // 'PhonePic02'.AncestorTransformFrom_PicMover
            //   'PhonePic02'.Contents
            //     'PicMountains'.Contents
            //       'PicMountains'.Contents
            //         Group: MountainLeftSnow
            //           Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_024()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_095())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_025()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_096())));
                return result;
            }

            // 'PhonePic01'.Contents
            //   'Flash'.Contents
            //     'PurpleBG'.Contents
            //       Group: Group 11
            //         Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_026()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_014)));
                return result;
            }

            // 'Cat'.Contents
            //   Group: Group 10
            //     Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_027()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_101())));
                return result;
            }

            // 'Cat'.Contents
            //   Group: Group 9
            //     Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_028()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_102())));
                return result;
            }

            // 'Cat'.Contents
            //   Group: Group 8
            //     Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_029()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_103())));
                return result;
            }

            // 'Cat'.Contents
            //   Group: EyeLeft
            //     Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_030()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_104())));
                result->StartAnimation("Path", PathKeyFrameAnimation_000());
                auto controller = result->TryGetAnimationController("Path");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'Cat'.Contents
            //   Group: EyeRight
            //     Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_031()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_106())));
                result->StartAnimation("Path", PathKeyFrameAnimation_001());
                auto controller = result->TryGetAnimationController("Path");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            CompositionPathGeometry^ PathGeometry_032()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_108())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_033()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_113())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_034()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_118())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_035()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_123())));
                return result;
            }

            // 'Cat'.Contents
            //   Group: Group 1
            //     Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_036()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_128())));
                return result;
            }

            // 'PhonePic01_Ending'.Transforms
            //   'PhonePic01_Ending'.Contents
            //     'Flash'.Transforms
            //       'PurpleBG'.Transforms
            //         'PurpleBG'.Contents
            //           Group: Group 11
            //             Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_037()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_014)));
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 10
            //       Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_038()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_101)));
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 9
            //       Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_039()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_102)));
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 8
            //       Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_040()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_103)));
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: EyeLeft
            //       Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_041()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_104)));
                result->StartAnimation("Path", PathKeyFrameAnimation_002());
                auto controller = result->TryGetAnimationController("Path");
                controller->Pause();
                controller->StartAnimation("Progress", ScalarExpressionAnimation_001());
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: EyeRight
            //       Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_042()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_106)));
                result->StartAnimation("Path", PathKeyFrameAnimation_003());
                auto controller = result->TryGetAnimationController("Path");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_001);
                return result;
            }

            CompositionPathGeometry^ PathGeometry_043()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_129())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_044()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_131())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_045()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_133())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_046()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_135())));
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 1
            //       Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_047()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_128)));
                return result;
            }

            // 'Cursor 2'.Transforms
            //   'Cursor 2'.Contents
            //     Group: Shape 1
            //       Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_048()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_137())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_049()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_138())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_050()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_143())));
                return result;
            }

            // 'LaptopScreen'.AncestorTransformFrom_LaptopTop
            //   'LaptopTop'.Transforms
            //     'LaptopScreen'.Contents
            //       Group: Group 3
            //         Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_051()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_148())));
                return result;
            }

            // 'LaptopScreen'.AncestorTransformFrom_LaptopTop
            //   'LaptopTop'.Transforms
            //     'LaptopScreen'.Contents
            //       Group: Group 2
            //         Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_052()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_149())));
                return result;
            }

            // 'LaptopScreen'.AncestorTransformFrom_LaptopTop
            //   'LaptopTop'.Transforms
            //     'LaptopScreen'.Contents
            //       Group: Group 1
            //         Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_053()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_150())));
                return result;
            }

            // 'GoldenGate'.Contents
            //   Group: GreySidebar
            //     Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_054()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_151())));
                return result;
            }

            // 'GoldenGate'.Contents
            //   Group: WhiteMainBG
            //     Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_055()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_152())));
                return result;
            }

            // 'GoldenGate'.Contents
            //   Group: Group 39
            //     Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_056()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_153())));
                return result;
            }

            // 'GoldenGate'.Contents
            //   Group: Group 38
            //     Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_057()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_154())));
                return result;
            }

            // 'GoldenGate'.Contents
            //   Group: Group 37
            //     Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_058()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_155())));
                return result;
            }

            // 'GoldenGate'.Contents
            //   Group: Group 36
            //     Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_059()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_156())));
                return result;
            }

            // 'GoldenGate'.Contents
            //   Group: Group 35
            //     Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_060()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_157())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_061()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_158())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_062()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_163())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_063()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_166())));
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PhoneCheckmark'.Transforms
            //     'PhoneCheckmark'.Contents
            //       Group: Group 31
            //         Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_064()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_169())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_065()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_170())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_066()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_175())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_067()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_180())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_068()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_185())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_069()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_190())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_070()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_195())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_071()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_199())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_072()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_202())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_073()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_207())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_074()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_212())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_075()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_217())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_076()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_222())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_077()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_227())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_078()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_232())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_079()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_237())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_080()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_242())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_081()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_246())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_082()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_251())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_083()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_256())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_084()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_261())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_085()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_265())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_086()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_269())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_087()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_274())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_088()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_278())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_089()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_283())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_090()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_288())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_091()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_293())));
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicMountains'.Contents
            //     Group: MountianRight
            //       Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_092()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_092)));
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicMountains'.Contents
            //     Group: MountianRightSnow
            //       Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_093()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_093)));
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicMountains'.Contents
            //     Group: MountainLeft
            //       Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_094()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_094)));
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicMountains'.Contents
            //     Group: MountainLeftSnow
            //       Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_095()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_095)));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_096()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_295())));
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PhonePic01 InApp'.Transforms
            //     'PhonePic01 InApp'.Contents
            //       'Flash'.Transforms
            //         'PurpleBG'.Transforms
            //           'PurpleBG'.Contents
            //             Group: Group 11
            //               Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_097()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_014)));
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 10
            //       Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_098()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_101)));
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 9
            //       Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_099()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_102)));
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 8
            //       Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_100()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_103)));
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: EyeLeft
            //       Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_101()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_104)));
                result->StartAnimation("Path", PathKeyFrameAnimation_004());
                auto controller = result->TryGetAnimationController("Path");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: EyeRight
            //       Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_102()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_106)));
                result->StartAnimation("Path", PathKeyFrameAnimation_005());
                auto controller = result->TryGetAnimationController("Path");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            CompositionPathGeometry^ PathGeometry_103()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_297())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_104()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_299())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_105()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_301())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_106()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_303())));
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 1
            //       Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_107()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_128)));
                return result;
            }

            // 'LaptopBottom'.AncestorTransformFrom_LaptopNull
            //   'LaptopBottom'.Contents
            //     Group: Group 5
            //       Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_108()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_305())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_109()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_306())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_110()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_311())));
                return result;
            }

            // 'PhonePic01'.AncestorTransformFrom_LaptopNull
            //   'PhonePic01'.Transforms
            //     'PhonePic01'.Contents
            //       'Flash'.Transforms
            //         'PurpleBG'.Transforms
            //           'PurpleBG'.Contents
            //             Group: Group 11
            //               Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_111()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_014)));
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 10
            //       Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_112()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_101)));
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 9
            //       Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_113()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_102)));
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 8
            //       Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_114()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_103)));
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: EyeLeft
            //       Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_115()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_104)));
                result->StartAnimation("Path", PathKeyFrameAnimation_006());
                auto controller = result->TryGetAnimationController("Path");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: EyeRight
            //       Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_116()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_106)));
                result->StartAnimation("Path", PathKeyFrameAnimation_007());
                auto controller = result->TryGetAnimationController("Path");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            CompositionPathGeometry^ PathGeometry_117()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_316())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_118()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_318())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_119()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_320())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_120()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_322())));
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 1
            //       Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_121()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_128)));
                return result;
            }

            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_122()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_324())));
                auto propertySet = result->Properties;
                propertySet->InsertScalar("TStart", 0.219999999F);
                propertySet->InsertScalar("TEnd", 0.219999999F);
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "Min(my.TStart, my.TEnd)";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("TrimStart", _reusableExpressionAnimation);
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "Max(my.TStart, my.TEnd)";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("TrimEnd", _reusableExpressionAnimation);
                result->StartAnimation("TStart", ScalarAnimation_0p22_to_0p5_000());
                auto controller = result->TryGetAnimationController("TStart");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("TEnd", ScalarAnimation_0p22_to_0p5_001());
                controller = result->TryGetAnimationController("TEnd");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_123()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_324)));
                auto propertySet = result->Properties;
                propertySet->InsertScalar("TStart", 0.219999999F);
                propertySet->InsertScalar("TEnd", 0.219999999F);
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "Min(my.TStart, my.TEnd)";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("TrimStart", _reusableExpressionAnimation);
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "Max(my.TStart, my.TEnd)";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("TrimEnd", _reusableExpressionAnimation);
                result->StartAnimation("TStart", _scalarAnimation_0p22_to_0p5_000);
                auto controller = result->TryGetAnimationController("TStart");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("TEnd", _scalarAnimation_0p22_to_0p5_001);
                controller = result->TryGetAnimationController("TEnd");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_124()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_324)));
                auto propertySet = result->Properties;
                propertySet->InsertScalar("TStart", 0.219999999F);
                propertySet->InsertScalar("TEnd", 0.219999999F);
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "Min(my.TStart, my.TEnd)";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("TrimStart", _reusableExpressionAnimation);
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "Max(my.TStart, my.TEnd)";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("TrimEnd", _reusableExpressionAnimation);
                result->StartAnimation("TStart", _scalarAnimation_0p22_to_0p5_000);
                auto controller = result->TryGetAnimationController("TStart");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("TEnd", _scalarAnimation_0p22_to_0p5_001);
                controller = result->TryGetAnimationController("TEnd");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_125()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_324)));
                auto propertySet = result->Properties;
                propertySet->InsertScalar("TStart", 0.219999999F);
                propertySet->InsertScalar("TEnd", 0.219999999F);
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "Min(my.TStart, my.TEnd)";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("TrimStart", _reusableExpressionAnimation);
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "Max(my.TStart, my.TEnd)";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("TrimEnd", _reusableExpressionAnimation);
                result->StartAnimation("TStart", _scalarAnimation_0p22_to_0p5_000);
                auto controller = result->TryGetAnimationController("TStart");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("TEnd", _scalarAnimation_0p22_to_0p5_001);
                controller = result->TryGetAnimationController("TEnd");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_126()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_324)));
                auto propertySet = result->Properties;
                propertySet->InsertScalar("TStart", 0.219999999F);
                propertySet->InsertScalar("TEnd", 0.219999999F);
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "Min(my.TStart, my.TEnd)";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("TrimStart", _reusableExpressionAnimation);
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "Max(my.TStart, my.TEnd)";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("TrimEnd", _reusableExpressionAnimation);
                result->StartAnimation("TStart", _scalarAnimation_0p22_to_0p5_000);
                auto controller = result->TryGetAnimationController("TStart");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("TEnd", _scalarAnimation_0p22_to_0p5_001);
                controller = result->TryGetAnimationController("TEnd");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'PhonePic01'.Transforms
            //   'PhonePic01'.Contents
            //     'Flash'.Transforms
            //       'PurpleBG'.Transforms
            //         'PurpleBG'.Contents
            //           Group: Group 11
            //             Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_127()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_014)));
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 10
            //       Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_128()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_101)));
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 9
            //       Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_129()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_102)));
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 8
            //       Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_130()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_103)));
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: EyeLeft
            //       Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_131()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_104)));
                result->StartAnimation("Path", PathKeyFrameAnimation_008());
                auto controller = result->TryGetAnimationController("Path");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: EyeRight
            //       Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_132()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_106)));
                result->StartAnimation("Path", PathKeyFrameAnimation_009());
                auto controller = result->TryGetAnimationController("Path");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            CompositionPathGeometry^ PathGeometry_133()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_325())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_134()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_327())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_135()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_329())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_136()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_331())));
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 1
            //       Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_137()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_128)));
                return result;
            }

            // 'Cursor 2'.Transforms
            //   'Cursor 3'.Transforms
            //     'Cursor 3'.Contents
            //       Group: Shape 1
            //         Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_138()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_137)));
                return result;
            }

            // 'PhoneShell Outlines 3'.AncestorTransformFrom_PhoneShell Outlines 2
            //   'Cursor 4'.AncestorTransformFrom_Master Null
            //     'Cursor 4'.Transforms
            //       'Cursor 4'.Contents
            //         Group: Shape 1
            //           Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_139()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_137)));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_140()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_333())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_141()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_335())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_142()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_337())));
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneShell Outlines 3'.Transforms
            //     'PhoneScreen'.Transforms
            //       'PhoneScreen'.Contents
            //         'PhoneScreen Outlines 2'.Contents
            //           'PhoneScreen Outlines 2'.Contents
            //             Group: Group 1
            //               Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_143()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_013)));
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            //         Group: Group 16
            //           Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_144()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_014)));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_145()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_339())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_146()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_341())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_147()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_343())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_148()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_345())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_149()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_347())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_150()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_349())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_151()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_351())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_152()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_353())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_153()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_355())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_154()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_357())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_155()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_359())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_156()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_361())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_157()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_363())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_158()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_365())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_159()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_367())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_160()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_369())));
                return result;
            }

            // 'PhonePic02'.AncestorTransformFrom_PicMover
            //   'PhonePic02'.Contents
            //     'PicMountains'.Contents
            //       'PicMountains'.Contents
            //         Group: MountianRight
            //           Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_161()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_092)));
                return result;
            }

            // 'PhonePic02'.AncestorTransformFrom_PicMover
            //   'PhonePic02'.Contents
            //     'PicMountains'.Contents
            //       'PicMountains'.Contents
            //         Group: MountianRightSnow
            //           Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_162()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_093)));
                return result;
            }

            // 'PhonePic02'.AncestorTransformFrom_PicMover
            //   'PhonePic02'.Contents
            //     'PicMountains'.Contents
            //       'PicMountains'.Contents
            //         Group: MountainLeft
            //           Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_163()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_094)));
                return result;
            }

            // 'PhonePic02'.AncestorTransformFrom_PicMover
            //   'PhonePic02'.Contents
            //     'PicMountains'.Contents
            //       'PicMountains'.Contents
            //         Group: MountainLeftSnow
            //           Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_164()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_095)));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_165()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_371())));
                return result;
            }

            // 'PhonePic01'.Contents
            //   'Flash'.Contents
            //     'PurpleBG'.Contents
            //       Group: Group 11
            //         Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_166()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_014)));
                return result;
            }

            // 'Cat'.Contents
            //   Group: Group 10
            //     Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_167()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_101)));
                return result;
            }

            // 'Cat'.Contents
            //   Group: Group 9
            //     Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_168()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_102)));
                return result;
            }

            // 'Cat'.Contents
            //   Group: Group 8
            //     Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_169()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_103)));
                return result;
            }

            // 'Cat'.Contents
            //   Group: EyeLeft
            //     Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_170()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_104)));
                result->StartAnimation("Path", PathKeyFrameAnimation_010());
                auto controller = result->TryGetAnimationController("Path");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'Cat'.Contents
            //   Group: EyeRight
            //     Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_171()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_106)));
                result->StartAnimation("Path", PathKeyFrameAnimation_011());
                auto controller = result->TryGetAnimationController("Path");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            CompositionPathGeometry^ PathGeometry_172()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_373())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_173()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_375())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_174()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_377())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_175()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_379())));
                return result;
            }

            // 'Cat'.Contents
            //   Group: Group 1
            //     Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_176()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_128)));
                return result;
            }

            // 'PhonePic01_Ending'.Transforms
            //   'PhonePic01_Ending'.Contents
            //     'Flash'.Transforms
            //       'PurpleBG'.Transforms
            //         'PurpleBG'.Contents
            //           Group: Group 11
            //             Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_177()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_014)));
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 10
            //       Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_178()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_101)));
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 9
            //       Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_179()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_102)));
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 8
            //       Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_180()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_103)));
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: EyeLeft
            //       Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_181()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_104)));
                result->StartAnimation("Path", PathKeyFrameAnimation_012());
                auto controller = result->TryGetAnimationController("Path");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_001);
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: EyeRight
            //       Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_182()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_106)));
                result->StartAnimation("Path", PathKeyFrameAnimation_013());
                auto controller = result->TryGetAnimationController("Path");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_001);
                return result;
            }

            CompositionPathGeometry^ PathGeometry_183()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_381())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_184()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_383())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_185()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_385())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_186()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_387())));
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 1
            //       Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_187()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_128)));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_188()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_389())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_189()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_391())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_190()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_393())));
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'PhoneScreen'.Transforms
            //     'PhoneScreen'.Contents
            //       'PhoneScreen Outlines 2'.Contents
            //         'PhoneScreen Outlines 2'.Contents
            //           Group: Group 1
            //             Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_191()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_013)));
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            //         Group: Group 16
            //           Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_192()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_014)));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_193()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_395())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_194()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_397())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_195()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_399())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_196()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_401())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_197()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_403())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_198()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_405())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_199()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_407())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_200()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_409())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_201()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_411())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_202()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_413())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_203()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_415())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_204()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_417())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_205()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_419())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_206()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_421())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_207()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_423())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_208()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_425())));
                return result;
            }

            // 'PhonePic02'.AncestorTransformFrom_PicMover
            //   'PhonePic02'.Contents
            //     'PicMountains'.Contents
            //       'PicMountains'.Contents
            //         Group: MountianRight
            //           Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_209()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_092)));
                return result;
            }

            // 'PhonePic02'.AncestorTransformFrom_PicMover
            //   'PhonePic02'.Contents
            //     'PicMountains'.Contents
            //       'PicMountains'.Contents
            //         Group: MountianRightSnow
            //           Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_210()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_093)));
                return result;
            }

            // 'PhonePic02'.AncestorTransformFrom_PicMover
            //   'PhonePic02'.Contents
            //     'PicMountains'.Contents
            //       'PicMountains'.Contents
            //         Group: MountainLeft
            //           Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_211()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_094)));
                return result;
            }

            // 'PhonePic02'.AncestorTransformFrom_PicMover
            //   'PhonePic02'.Contents
            //     'PicMountains'.Contents
            //       'PicMountains'.Contents
            //         Group: MountainLeftSnow
            //           Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_212()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_095)));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_213()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_427())));
                return result;
            }

            // 'PhonePic01'.Contents
            //   'Flash'.Contents
            //     'PurpleBG'.Contents
            //       Group: Group 11
            //         Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_214()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_014)));
                return result;
            }

            // 'Cat'.Contents
            //   Group: Group 10
            //     Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_215()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_101)));
                return result;
            }

            // 'Cat'.Contents
            //   Group: Group 9
            //     Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_216()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_102)));
                return result;
            }

            // 'Cat'.Contents
            //   Group: Group 8
            //     Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_217()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_103)));
                return result;
            }

            // 'Cat'.Contents
            //   Group: EyeLeft
            //     Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_218()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_104)));
                result->StartAnimation("Path", PathKeyFrameAnimation_014());
                auto controller = result->TryGetAnimationController("Path");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'Cat'.Contents
            //   Group: EyeRight
            //     Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_219()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_106)));
                result->StartAnimation("Path", PathKeyFrameAnimation_015());
                auto controller = result->TryGetAnimationController("Path");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            CompositionPathGeometry^ PathGeometry_220()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_429())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_221()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_431())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_222()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_433())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_223()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_435())));
                return result;
            }

            // 'Cat'.Contents
            //   Group: Group 1
            //     Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_224()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_128)));
                return result;
            }

            // 'PhonePic01_Ending'.Transforms
            //   'PhonePic01_Ending'.Contents
            //     'Flash'.Transforms
            //       'PurpleBG'.Transforms
            //         'PurpleBG'.Contents
            //           Group: Group 11
            //             Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_225()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_014)));
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 10
            //       Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_226()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_101)));
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 9
            //       Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_227()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_102)));
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 8
            //       Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_228()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_103)));
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: EyeLeft
            //       Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_229()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_104)));
                result->StartAnimation("Path", PathKeyFrameAnimation_016());
                auto controller = result->TryGetAnimationController("Path");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_001);
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: EyeRight
            //       Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_230()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_106)));
                result->StartAnimation("Path", PathKeyFrameAnimation_017());
                auto controller = result->TryGetAnimationController("Path");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_001);
                return result;
            }

            CompositionPathGeometry^ PathGeometry_231()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_437())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_232()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_439())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_233()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_441())));
                return result;
            }

            CompositionPathGeometry^ PathGeometry_234()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_443())));
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 1
            //       Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_235()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_128)));
                return result;
            }

            // 'Cat'.Contents
            //   Group: EyeLeft
            //     Path 1
            //       Path 1.PathGeometry
            PathKeyFrameAnimation^ PathKeyFrameAnimation_000()
            {
                auto result = _c->CreatePathKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_104)), _linearEasingFunction);
                result->InsertKeyFrame(0.0195439737F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_104)), _linearEasingFunction);
                result->InsertKeyFrame(0.021172639F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_105())), CubicBezierEasingFunction_007());
                result->InsertKeyFrame(0.0228013024F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_105)), _linearEasingFunction);
                result->InsertKeyFrame(0.0407166108F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_104)), CubicBezierEasingFunction_008());
                result->InsertKeyFrame(0.0570032559F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_104)), _linearEasingFunction);
                result->InsertKeyFrame(0.058631923F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_105)), _cubicBezierEasingFunction_007);
                result->InsertKeyFrame(0.0667752475F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_105)), _linearEasingFunction);
                result->InsertKeyFrame(0.0993485376F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_104)), _cubicBezierEasingFunction_008);
                return result;
            }

            // 'Cat'.Contents
            //   Group: EyeRight
            //     Path 1
            //       Path 1.PathGeometry
            PathKeyFrameAnimation^ PathKeyFrameAnimation_001()
            {
                auto result = _c->CreatePathKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_106)), _linearEasingFunction);
                result->InsertKeyFrame(0.0195439737F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_106)), _linearEasingFunction);
                result->InsertKeyFrame(0.021172639F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_107())), _cubicBezierEasingFunction_007);
                result->InsertKeyFrame(0.0228013024F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_107)), _linearEasingFunction);
                result->InsertKeyFrame(0.0407166108F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_106)), _cubicBezierEasingFunction_008);
                result->InsertKeyFrame(0.0602605864F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_106)), _linearEasingFunction);
                result->InsertKeyFrame(0.0618892498F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_107)), _cubicBezierEasingFunction_007);
                result->InsertKeyFrame(0.0700325742F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_107)), _linearEasingFunction);
                result->InsertKeyFrame(0.102605864F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_106)), _cubicBezierEasingFunction_008);
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: EyeLeft
            //       Path 1
            //         Path 1.PathGeometry
            PathKeyFrameAnimation^ PathKeyFrameAnimation_002()
            {
                auto result = _c->CreatePathKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_104)), _linearEasingFunction);
                result->InsertKeyFrame(0.876996815F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_104)), _linearEasingFunction);
                result->InsertKeyFrame(0.87859422F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_105)), _cubicBezierEasingFunction_007);
                result->InsertKeyFrame(0.880191684F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_105)), _linearEasingFunction);
                result->InsertKeyFrame(0.89776355F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_104)), _cubicBezierEasingFunction_008);
                result->InsertKeyFrame(0.932907343F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_104)), _linearEasingFunction);
                result->InsertKeyFrame(0.934504807F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_105)), _cubicBezierEasingFunction_007);
                result->InsertKeyFrame(0.936102211F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_105)), _linearEasingFunction);
                result->InsertKeyFrame(0.953674138F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_104)), _cubicBezierEasingFunction_008);
                result->InsertKeyFrame(1, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_104)), _linearEasingFunction);
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: EyeRight
            //       Path 1
            //         Path 1.PathGeometry
            PathKeyFrameAnimation^ PathKeyFrameAnimation_003()
            {
                auto result = _c->CreatePathKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_106)), _linearEasingFunction);
                result->InsertKeyFrame(0.876996815F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_106)), _linearEasingFunction);
                result->InsertKeyFrame(0.87859422F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_107)), _cubicBezierEasingFunction_007);
                result->InsertKeyFrame(0.880191684F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_107)), _linearEasingFunction);
                result->InsertKeyFrame(0.89776355F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_106)), _cubicBezierEasingFunction_008);
                result->InsertKeyFrame(0.932907343F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_106)), _linearEasingFunction);
                result->InsertKeyFrame(0.934504807F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_107)), _cubicBezierEasingFunction_007);
                result->InsertKeyFrame(0.936102211F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_107)), _linearEasingFunction);
                result->InsertKeyFrame(0.953674138F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_106)), _cubicBezierEasingFunction_008);
                result->InsertKeyFrame(1, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_106)), _linearEasingFunction);
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: EyeLeft
            //       Path 1
            //         Path 1.PathGeometry
            PathKeyFrameAnimation^ PathKeyFrameAnimation_004()
            {
                auto result = _c->CreatePathKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_104)), _linearEasingFunction);
                result->InsertKeyFrame(0.021172639F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_104)), _linearEasingFunction);
                result->InsertKeyFrame(0.0228013024F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_105)), _cubicBezierEasingFunction_007);
                result->InsertKeyFrame(0.0244299676F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_105)), _linearEasingFunction);
                result->InsertKeyFrame(0.042345278F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_104)), _cubicBezierEasingFunction_008);
                result->InsertKeyFrame(0.058631923F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_104)), _linearEasingFunction);
                result->InsertKeyFrame(0.0602605864F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_105)), _cubicBezierEasingFunction_007);
                result->InsertKeyFrame(0.0684039071F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_105)), _linearEasingFunction);
                result->InsertKeyFrame(0.100977197F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_104)), _cubicBezierEasingFunction_008);
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: EyeRight
            //       Path 1
            //         Path 1.PathGeometry
            PathKeyFrameAnimation^ PathKeyFrameAnimation_005()
            {
                auto result = _c->CreatePathKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_106)), _linearEasingFunction);
                result->InsertKeyFrame(0.021172639F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_106)), _linearEasingFunction);
                result->InsertKeyFrame(0.0228013024F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_107)), _cubicBezierEasingFunction_007);
                result->InsertKeyFrame(0.0244299676F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_107)), _linearEasingFunction);
                result->InsertKeyFrame(0.042345278F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_106)), _cubicBezierEasingFunction_008);
                result->InsertKeyFrame(0.0618892498F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_106)), _linearEasingFunction);
                result->InsertKeyFrame(0.0635179132F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_107)), _cubicBezierEasingFunction_007);
                result->InsertKeyFrame(0.0716612414F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_107)), _linearEasingFunction);
                result->InsertKeyFrame(0.104234524F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_106)), _cubicBezierEasingFunction_008);
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: EyeLeft
            //       Path 1
            //         Path 1.PathGeometry
            PathKeyFrameAnimation^ PathKeyFrameAnimation_006()
            {
                auto result = _c->CreatePathKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_104)), _linearEasingFunction);
                result->InsertKeyFrame(0.021172639F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_104)), _linearEasingFunction);
                result->InsertKeyFrame(0.0228013024F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_105)), _cubicBezierEasingFunction_007);
                result->InsertKeyFrame(0.0244299676F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_105)), _linearEasingFunction);
                result->InsertKeyFrame(0.042345278F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_104)), _cubicBezierEasingFunction_008);
                result->InsertKeyFrame(0.058631923F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_104)), _linearEasingFunction);
                result->InsertKeyFrame(0.0602605864F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_105)), _cubicBezierEasingFunction_007);
                result->InsertKeyFrame(0.0684039071F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_105)), _linearEasingFunction);
                result->InsertKeyFrame(0.100977197F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_104)), _cubicBezierEasingFunction_008);
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: EyeRight
            //       Path 1
            //         Path 1.PathGeometry
            PathKeyFrameAnimation^ PathKeyFrameAnimation_007()
            {
                auto result = _c->CreatePathKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_106)), _linearEasingFunction);
                result->InsertKeyFrame(0.021172639F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_106)), _linearEasingFunction);
                result->InsertKeyFrame(0.0228013024F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_107)), _cubicBezierEasingFunction_007);
                result->InsertKeyFrame(0.0244299676F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_107)), _linearEasingFunction);
                result->InsertKeyFrame(0.042345278F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_106)), _cubicBezierEasingFunction_008);
                result->InsertKeyFrame(0.0618892498F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_106)), _linearEasingFunction);
                result->InsertKeyFrame(0.0635179132F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_107)), _cubicBezierEasingFunction_007);
                result->InsertKeyFrame(0.0716612414F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_107)), _linearEasingFunction);
                result->InsertKeyFrame(0.104234524F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_106)), _cubicBezierEasingFunction_008);
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: EyeLeft
            //       Path 1
            //         Path 1.PathGeometry
            PathKeyFrameAnimation^ PathKeyFrameAnimation_008()
            {
                auto result = _c->CreatePathKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_104)), _linearEasingFunction);
                result->InsertKeyFrame(0.021172639F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_104)), _linearEasingFunction);
                result->InsertKeyFrame(0.0228013024F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_105)), _cubicBezierEasingFunction_007);
                result->InsertKeyFrame(0.0244299676F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_105)), _linearEasingFunction);
                result->InsertKeyFrame(0.042345278F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_104)), _cubicBezierEasingFunction_008);
                result->InsertKeyFrame(0.058631923F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_104)), _linearEasingFunction);
                result->InsertKeyFrame(0.0602605864F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_105)), _cubicBezierEasingFunction_007);
                result->InsertKeyFrame(0.0684039071F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_105)), _linearEasingFunction);
                result->InsertKeyFrame(0.100977197F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_104)), _cubicBezierEasingFunction_008);
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: EyeRight
            //       Path 1
            //         Path 1.PathGeometry
            PathKeyFrameAnimation^ PathKeyFrameAnimation_009()
            {
                auto result = _c->CreatePathKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_106)), _linearEasingFunction);
                result->InsertKeyFrame(0.021172639F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_106)), _linearEasingFunction);
                result->InsertKeyFrame(0.0228013024F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_107)), _cubicBezierEasingFunction_007);
                result->InsertKeyFrame(0.0244299676F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_107)), _linearEasingFunction);
                result->InsertKeyFrame(0.042345278F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_106)), _cubicBezierEasingFunction_008);
                result->InsertKeyFrame(0.0618892498F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_106)), _linearEasingFunction);
                result->InsertKeyFrame(0.0635179132F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_107)), _cubicBezierEasingFunction_007);
                result->InsertKeyFrame(0.0716612414F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_107)), _linearEasingFunction);
                result->InsertKeyFrame(0.104234524F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_106)), _cubicBezierEasingFunction_008);
                return result;
            }

            // 'Cat'.Contents
            //   Group: EyeLeft
            //     Path 1
            //       Path 1.PathGeometry
            PathKeyFrameAnimation^ PathKeyFrameAnimation_010()
            {
                auto result = _c->CreatePathKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_104)), _linearEasingFunction);
                result->InsertKeyFrame(0.0195439737F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_104)), _linearEasingFunction);
                result->InsertKeyFrame(0.021172639F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_105)), _cubicBezierEasingFunction_007);
                result->InsertKeyFrame(0.0228013024F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_105)), _linearEasingFunction);
                result->InsertKeyFrame(0.0407166108F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_104)), _cubicBezierEasingFunction_008);
                result->InsertKeyFrame(0.0570032559F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_104)), _linearEasingFunction);
                result->InsertKeyFrame(0.058631923F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_105)), _cubicBezierEasingFunction_007);
                result->InsertKeyFrame(0.0667752475F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_105)), _linearEasingFunction);
                result->InsertKeyFrame(0.0993485376F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_104)), _cubicBezierEasingFunction_008);
                return result;
            }

            // 'Cat'.Contents
            //   Group: EyeRight
            //     Path 1
            //       Path 1.PathGeometry
            PathKeyFrameAnimation^ PathKeyFrameAnimation_011()
            {
                auto result = _c->CreatePathKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_106)), _linearEasingFunction);
                result->InsertKeyFrame(0.0195439737F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_106)), _linearEasingFunction);
                result->InsertKeyFrame(0.021172639F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_107)), _cubicBezierEasingFunction_007);
                result->InsertKeyFrame(0.0228013024F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_107)), _linearEasingFunction);
                result->InsertKeyFrame(0.0407166108F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_106)), _cubicBezierEasingFunction_008);
                result->InsertKeyFrame(0.0602605864F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_106)), _linearEasingFunction);
                result->InsertKeyFrame(0.0618892498F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_107)), _cubicBezierEasingFunction_007);
                result->InsertKeyFrame(0.0700325742F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_107)), _linearEasingFunction);
                result->InsertKeyFrame(0.102605864F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_106)), _cubicBezierEasingFunction_008);
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: EyeLeft
            //       Path 1
            //         Path 1.PathGeometry
            PathKeyFrameAnimation^ PathKeyFrameAnimation_012()
            {
                auto result = _c->CreatePathKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_104)), _linearEasingFunction);
                result->InsertKeyFrame(0.876996815F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_104)), _linearEasingFunction);
                result->InsertKeyFrame(0.87859422F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_105)), _cubicBezierEasingFunction_007);
                result->InsertKeyFrame(0.880191684F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_105)), _linearEasingFunction);
                result->InsertKeyFrame(0.89776355F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_104)), _cubicBezierEasingFunction_008);
                result->InsertKeyFrame(0.932907343F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_104)), _linearEasingFunction);
                result->InsertKeyFrame(0.934504807F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_105)), _cubicBezierEasingFunction_007);
                result->InsertKeyFrame(0.936102211F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_105)), _linearEasingFunction);
                result->InsertKeyFrame(0.953674138F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_104)), _cubicBezierEasingFunction_008);
                result->InsertKeyFrame(1, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_104)), _linearEasingFunction);
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: EyeRight
            //       Path 1
            //         Path 1.PathGeometry
            PathKeyFrameAnimation^ PathKeyFrameAnimation_013()
            {
                auto result = _c->CreatePathKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_106)), _linearEasingFunction);
                result->InsertKeyFrame(0.876996815F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_106)), _linearEasingFunction);
                result->InsertKeyFrame(0.87859422F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_107)), _cubicBezierEasingFunction_007);
                result->InsertKeyFrame(0.880191684F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_107)), _linearEasingFunction);
                result->InsertKeyFrame(0.89776355F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_106)), _cubicBezierEasingFunction_008);
                result->InsertKeyFrame(0.932907343F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_106)), _linearEasingFunction);
                result->InsertKeyFrame(0.934504807F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_107)), _cubicBezierEasingFunction_007);
                result->InsertKeyFrame(0.936102211F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_107)), _linearEasingFunction);
                result->InsertKeyFrame(0.953674138F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_106)), _cubicBezierEasingFunction_008);
                result->InsertKeyFrame(1, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_106)), _linearEasingFunction);
                return result;
            }

            // 'Cat'.Contents
            //   Group: EyeLeft
            //     Path 1
            //       Path 1.PathGeometry
            PathKeyFrameAnimation^ PathKeyFrameAnimation_014()
            {
                auto result = _c->CreatePathKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_104)), _linearEasingFunction);
                result->InsertKeyFrame(0.0195439737F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_104)), _linearEasingFunction);
                result->InsertKeyFrame(0.021172639F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_105)), _cubicBezierEasingFunction_007);
                result->InsertKeyFrame(0.0228013024F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_105)), _linearEasingFunction);
                result->InsertKeyFrame(0.0407166108F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_104)), _cubicBezierEasingFunction_008);
                result->InsertKeyFrame(0.0570032559F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_104)), _linearEasingFunction);
                result->InsertKeyFrame(0.058631923F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_105)), _cubicBezierEasingFunction_007);
                result->InsertKeyFrame(0.0667752475F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_105)), _linearEasingFunction);
                result->InsertKeyFrame(0.0993485376F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_104)), _cubicBezierEasingFunction_008);
                return result;
            }

            // 'Cat'.Contents
            //   Group: EyeRight
            //     Path 1
            //       Path 1.PathGeometry
            PathKeyFrameAnimation^ PathKeyFrameAnimation_015()
            {
                auto result = _c->CreatePathKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_106)), _linearEasingFunction);
                result->InsertKeyFrame(0.0195439737F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_106)), _linearEasingFunction);
                result->InsertKeyFrame(0.021172639F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_107)), _cubicBezierEasingFunction_007);
                result->InsertKeyFrame(0.0228013024F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_107)), _linearEasingFunction);
                result->InsertKeyFrame(0.0407166108F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_106)), _cubicBezierEasingFunction_008);
                result->InsertKeyFrame(0.0602605864F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_106)), _linearEasingFunction);
                result->InsertKeyFrame(0.0618892498F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_107)), _cubicBezierEasingFunction_007);
                result->InsertKeyFrame(0.0700325742F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_107)), _linearEasingFunction);
                result->InsertKeyFrame(0.102605864F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_106)), _cubicBezierEasingFunction_008);
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: EyeLeft
            //       Path 1
            //         Path 1.PathGeometry
            PathKeyFrameAnimation^ PathKeyFrameAnimation_016()
            {
                auto result = _c->CreatePathKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_104)), _linearEasingFunction);
                result->InsertKeyFrame(0.876996815F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_104)), _linearEasingFunction);
                result->InsertKeyFrame(0.87859422F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_105)), _cubicBezierEasingFunction_007);
                result->InsertKeyFrame(0.880191684F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_105)), _linearEasingFunction);
                result->InsertKeyFrame(0.89776355F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_104)), _cubicBezierEasingFunction_008);
                result->InsertKeyFrame(0.932907343F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_104)), _linearEasingFunction);
                result->InsertKeyFrame(0.934504807F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_105)), _cubicBezierEasingFunction_007);
                result->InsertKeyFrame(0.936102211F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_105)), _linearEasingFunction);
                result->InsertKeyFrame(0.953674138F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_104)), _cubicBezierEasingFunction_008);
                result->InsertKeyFrame(1, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_104)), _linearEasingFunction);
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: EyeRight
            //       Path 1
            //         Path 1.PathGeometry
            PathKeyFrameAnimation^ PathKeyFrameAnimation_017()
            {
                auto result = _c->CreatePathKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_106)), _linearEasingFunction);
                result->InsertKeyFrame(0.876996815F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_106)), _linearEasingFunction);
                result->InsertKeyFrame(0.87859422F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_107)), _cubicBezierEasingFunction_007);
                result->InsertKeyFrame(0.880191684F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_107)), _linearEasingFunction);
                result->InsertKeyFrame(0.89776355F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_106)), _cubicBezierEasingFunction_008);
                result->InsertKeyFrame(0.932907343F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_106)), _linearEasingFunction);
                result->InsertKeyFrame(0.934504807F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_107)), _cubicBezierEasingFunction_007);
                result->InsertKeyFrame(0.936102211F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_107)), _linearEasingFunction);
                result->InsertKeyFrame(0.953674138F, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_106)), _cubicBezierEasingFunction_008);
                result->InsertKeyFrame(1, ref new CompositionPath(CanvasGeometryToIGeometrySource2D(_geometry_106)), _linearEasingFunction);
                return result;
            }

            // Rectangle Path 1.RectangleGeometry
            CompositionRectangleGeometry^ Rectangle_296x168()
            {
                auto result = _c->CreateRectangleGeometry();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Position", { 0, 0 });
                result->Size = { 296, 168 };
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "Vector2((my.Position.X - (my.Size.X / 2)),(my.Position.Y - (my.Size.Y / 2)))";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                return result;
            }

            // Rectangle Path 1.RectangleGeometry
            CompositionRectangleGeometry^ Rectangle_67x123_000()
            {
                auto result = _c->CreateRectangleGeometry();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Position", { 0, 0 });
                result->Size = { 67, 123 };
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "Vector2((my.Position.X - (my.Size.X / 2)),(my.Position.Y - (my.Size.Y / 2)))";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                return result;
            }

            // Rectangle Path 1.RectangleGeometry
            CompositionRectangleGeometry^ Rectangle_67x123_001()
            {
                auto result = _c->CreateRectangleGeometry();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Position", { 0, 0 });
                result->Size = { 67, 123 };
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "Vector2((my.Position.X - (my.Size.X / 2)),(my.Position.Y - (my.Size.Y / 2)))";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                return result;
            }

            // Rectangle Path 1.RectangleGeometry
            CompositionRectangleGeometry^ Rectangle_67x123_002()
            {
                auto result = _c->CreateRectangleGeometry();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Position", { 0, 0 });
                result->Size = { 67, 123 };
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "Vector2((my.Position.X - (my.Size.X / 2)),(my.Position.Y - (my.Size.Y / 2)))";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                return result;
            }

            // Rectangle Path 1.RectangleGeometry
            CompositionRectangleGeometry^ Rectangle_68_000()
            {
                auto result = _c->CreateRectangleGeometry();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Position", { 0, 0 });
                result->Size = { 68, 68 };
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "Vector2((my.Position.X - (my.Size.X / 2)),(my.Position.Y - (my.Size.Y / 2)))";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                return result;
            }

            // Rectangle Path 1.RectangleGeometry
            CompositionRectangleGeometry^ Rectangle_68_001()
            {
                auto result = _c->CreateRectangleGeometry();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Position", { 0, 0 });
                result->Size = { 68, 68 };
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "Vector2((my.Position.X - (my.Size.X / 2)),(my.Position.Y - (my.Size.Y / 2)))";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                return result;
            }

            // Rectangle Path 1.RectangleGeometry
            CompositionRectangleGeometry^ Rectangle_68_002()
            {
                auto result = _c->CreateRectangleGeometry();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Position", { 0, 0 });
                result->Size = { 68, 68 };
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "Vector2((my.Position.X - (my.Size.X / 2)),(my.Position.Y - (my.Size.Y / 2)))";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                return result;
            }

            // Rectangle Path 1.RectangleGeometry
            CompositionRectangleGeometry^ Rectangle_68_003()
            {
                auto result = _c->CreateRectangleGeometry();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Position", { 0, 0 });
                result->Size = { 68, 68 };
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "Vector2((my.Position.X - (my.Size.X / 2)),(my.Position.Y - (my.Size.Y / 2)))";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                return result;
            }

            // Rectangle Path 1.RectangleGeometry
            CompositionRectangleGeometry^ Rectangle_68_004()
            {
                auto result = _c->CreateRectangleGeometry();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Position", { 0, 0 });
                result->Size = { 68, 68 };
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "Vector2((my.Position.X - (my.Size.X / 2)),(my.Position.Y - (my.Size.Y / 2)))";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                return result;
            }

            // Rectangle Path 1.RectangleGeometry
            CompositionRectangleGeometry^ Rectangle_68_005()
            {
                auto result = _c->CreateRectangleGeometry();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Position", { 0, 0 });
                result->Size = { 68, 68 };
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "Vector2((my.Position.X - (my.Size.X / 2)),(my.Position.Y - (my.Size.Y / 2)))";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                return result;
            }

            // Rectangle Path 1.RectangleGeometry
            CompositionRectangleGeometry^ Rectangle_68_006()
            {
                auto result = _c->CreateRectangleGeometry();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Position", { 0, 0 });
                result->Size = { 68, 68 };
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "Vector2((my.Position.X - (my.Size.X / 2)),(my.Position.Y - (my.Size.Y / 2)))";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                return result;
            }

            // Rectangle Path 1.RectangleGeometry
            CompositionRectangleGeometry^ Rectangle_68_007()
            {
                auto result = _c->CreateRectangleGeometry();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Position", { 0, 0 });
                result->Size = { 68, 68 };
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "Vector2((my.Position.X - (my.Size.X / 2)),(my.Position.Y - (my.Size.Y / 2)))";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                return result;
            }

            // Rectangle Path 1.RectangleGeometry
            CompositionRectangleGeometry^ Rectangle_68_008()
            {
                auto result = _c->CreateRectangleGeometry();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Position", { 0, 0 });
                result->Size = { 68, 68 };
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "Vector2((my.Position.X - (my.Size.X / 2)),(my.Position.Y - (my.Size.Y / 2)))";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                return result;
            }

            // Rectangle Path 1.RectangleGeometry
            CompositionRectangleGeometry^ Rectangle_76x140_000()
            {
                auto result = _c->CreateRectangleGeometry();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Position", { 0, 0 });
                result->Size = { 76, 140 };
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "Vector2((my.Position.X - (my.Size.X / 2)),(my.Position.Y - (my.Size.Y / 2)))";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                return result;
            }

            // Rectangle Path 1.RectangleGeometry
            CompositionRectangleGeometry^ Rectangle_76x140_001()
            {
                auto result = _c->CreateRectangleGeometry();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Position", { 0, 0 });
                result->Size = { 76, 140 };
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "Vector2((my.Position.X - (my.Size.X / 2)),(my.Position.Y - (my.Size.Y / 2)))";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                return result;
            }

            // Rectangle Path 1.RectangleGeometry
            CompositionRectangleGeometry^ Rectangle_76x140_002()
            {
                auto result = _c->CreateRectangleGeometry();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Position", { 0, 0 });
                result->Size = { 76, 140 };
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "Vector2((my.Position.X - (my.Size.X / 2)),(my.Position.Y - (my.Size.Y / 2)))";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                return result;
            }

            // Rectangle Path 1.RectangleGeometry
            CompositionRectangleGeometry^ Rectangle_76x140_003()
            {
                auto result = _c->CreateRectangleGeometry();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Position", { 0, 0 });
                result->Size = { 76, 140 };
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "Vector2((my.Position.X - (my.Size.X / 2)),(my.Position.Y - (my.Size.Y / 2)))";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                return result;
            }

            // Rectangle Path 1.RectangleGeometry
            CompositionRectangleGeometry^ Rectangle_76x140_004()
            {
                auto result = _c->CreateRectangleGeometry();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Position", { 0, 0 });
                result->Size = { 76, 140 };
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "Vector2((my.Position.X - (my.Size.X / 2)),(my.Position.Y - (my.Size.Y / 2)))";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                return result;
            }

            // Rectangle Path 1.RectangleGeometry
            CompositionRectangleGeometry^ Rectangle_76x140_005()
            {
                auto result = _c->CreateRectangleGeometry();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Position", { 0, 0 });
                result->Size = { 76, 140 };
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "Vector2((my.Position.X - (my.Size.X / 2)),(my.Position.Y - (my.Size.Y / 2)))";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                return result;
            }

            // Rectangle Path 1.RectangleGeometry
            CompositionRectangleGeometry^ Rectangle_94p5()
            {
                auto result = _c->CreateRectangleGeometry();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Position", { 0, 0 });
                result->Size = { 94.5F, 94.5F };
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "Vector2((my.Position.X - (my.Size.X / 2)),(my.Position.Y - (my.Size.Y / 2)))";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                return result;
            }

            // The root of the composition.
            ContainerVisual^ Root()
            {
                auto result = _root = _c->CreateContainerVisual();
                auto propertySet = result->Properties;
                propertySet->InsertScalar("Progress", 0);
                propertySet->InsertScalar("t0", 0);
                propertySet->InsertScalar("t1", 0);
                propertySet->InsertScalar("t2", 0);
                propertySet->InsertScalar("t3", 0);
                propertySet->InsertScalar("t4", 0);
                propertySet->InsertScalar("t5", 0);
                propertySet->InsertScalar("t6", 0);
                propertySet->InsertScalar("t7", 0);
                propertySet->InsertScalar("t8", 0);
                propertySet->InsertScalar("t9", 0);
                propertySet->InsertScalar("t10", 0);
                propertySet->InsertScalar("t11", 0);
                propertySet->InsertScalar("t12", 0);
                propertySet->InsertScalar("t14", 0);
                propertySet->InsertScalar("t15", 0);
                propertySet->InsertScalar("t16", 0);
                propertySet->InsertScalar("t18", 0);
                propertySet->InsertScalar("t20", 0);
                propertySet->InsertScalar("t22", 0);
                propertySet->InsertScalar("t24", 0);
                propertySet->InsertScalar("t26", 0);
                propertySet->InsertScalar("t28", 0);
                propertySet->InsertScalar("t29", 0);
                propertySet->InsertScalar("t30", 0);
                propertySet->InsertScalar("t31", 0);
                propertySet->InsertScalar("t32", 0);
                propertySet->InsertScalar("t33", 0);
                propertySet->InsertScalar("t34", 0);
                propertySet->InsertScalar("t35", 0);
                propertySet->InsertScalar("t36", 0);
                propertySet->InsertScalar("t37", 0);
                propertySet->InsertScalar("t39", 0);
                propertySet->InsertScalar("t41", 0);
                propertySet->InsertScalar("t43", 0);
                propertySet->InsertScalar("t45", 0);
                propertySet->InsertScalar("t47", 0);
                propertySet->InsertScalar("t49", 0);
                propertySet->InsertScalar("t50", 0);
                propertySet->InsertScalar("t51", 0);
                propertySet->InsertScalar("t52", 0);
                propertySet->InsertScalar("t53", 0);
                propertySet->InsertScalar("t54", 0);
                propertySet->InsertScalar("t55", 0);
                propertySet->InsertScalar("t56", 0);
                propertySet->InsertScalar("t57", 0);
                propertySet->InsertScalar("t58", 0);
                propertySet->InsertScalar("t59", 0);
                propertySet->InsertScalar("t60", 0);
                propertySet->InsertScalar("t61", 0);
                propertySet->InsertScalar("t62", 0);
                propertySet->InsertScalar("t63", 0);
                propertySet->InsertScalar("t64", 0);
                propertySet->InsertScalar("t65", 0);
                propertySet->InsertScalar("t66", 0);
                propertySet->InsertScalar("t67", 0);
                propertySet->InsertScalar("t68", 0);
                propertySet->InsertScalar("t69", 0);
                propertySet->InsertScalar("t70", 0);
                propertySet->InsertScalar("t71", 0);
                propertySet->InsertScalar("t72", 0);
                propertySet->InsertScalar("t73", 0);
                propertySet->InsertScalar("t74", 0);
                propertySet->InsertScalar("t75", 0);
                propertySet->InsertScalar("t76", 0);
                propertySet->InsertScalar("t77", 0);
                propertySet->InsertScalar("t78", 0);
                propertySet->InsertScalar("t79", 0);
                propertySet->InsertScalar("t80", 0);
                propertySet->InsertScalar("t81", 0);
                propertySet->InsertScalar("t82", 0);
                propertySet->InsertScalar("t83", 0);
                propertySet->InsertScalar("t84", 0);
                propertySet->InsertScalar("t85", 0);
                propertySet->InsertScalar("t86", 0);
                propertySet->InsertScalar("t87", 0);
                propertySet->InsertScalar("t88", 0);
                propertySet->InsertScalar("t89", 0);
                propertySet->InsertScalar("t90", 0);
                propertySet->InsertScalar("t91", 0);
                propertySet->InsertScalar("t92", 0);
                propertySet->InsertScalar("t93", 0);
                propertySet->InsertScalar("t94", 0);
                propertySet->InsertScalar("t95", 0);
                propertySet->InsertScalar("t96", 0);
                propertySet->InsertScalar("t97", 0);
                propertySet->InsertScalar("t98", 0);
                propertySet->InsertScalar("t99", 0);
                propertySet->InsertScalar("t100", 0);
                propertySet->InsertScalar("t101", 0);
                propertySet->InsertScalar("t102", 0);
                propertySet->InsertScalar("t103", 0);
                propertySet->InsertScalar("t104", 0);
                propertySet->InsertScalar("t105", 0);
                propertySet->InsertScalar("t106", 0);
                propertySet->InsertScalar("t107", 0);
                propertySet->InsertScalar("t108", 0);
                propertySet->InsertScalar("t109", 0);
                propertySet->InsertScalar("t110", 0);
                propertySet->InsertScalar("t111", 0);
                propertySet->InsertScalar("t112", 0);
                propertySet->InsertScalar("t114", 0);
                propertySet->InsertScalar("t115", 0);
                propertySet->InsertScalar("t116", 0);
                propertySet->InsertScalar("t118", 0);
                propertySet->InsertScalar("t120", 0);
                propertySet->InsertScalar("t122", 0);
                propertySet->InsertScalar("t124", 0);
                propertySet->InsertScalar("t126", 0);
                propertySet->InsertScalar("t128", 0);
                propertySet->InsertScalar("t129", 0);
                propertySet->InsertScalar("t130", 0);
                propertySet->InsertScalar("t131", 0);
                propertySet->InsertScalar("t132", 0);
                propertySet->InsertScalar("t133", 0);
                propertySet->InsertScalar("t134", 0);
                propertySet->InsertScalar("t135", 0);
                propertySet->InsertScalar("t136", 0);
                propertySet->InsertScalar("t137", 0);
                propertySet->InsertScalar("t139", 0);
                propertySet->InsertScalar("t141", 0);
                propertySet->InsertScalar("t143", 0);
                propertySet->InsertScalar("t145", 0);
                propertySet->InsertScalar("t147", 0);
                propertySet->InsertScalar("t149", 0);
                propertySet->InsertScalar("t150", 0);
                propertySet->InsertScalar("t151", 0);
                propertySet->InsertScalar("t152", 0);
                propertySet->InsertScalar("t153", 0);
                propertySet->InsertScalar("t154", 0);
                propertySet->InsertScalar("t155", 0);
                propertySet->InsertScalar("t156", 0);
                propertySet->InsertScalar("t157", 0);
                propertySet->InsertScalar("t158", 0);
                propertySet->InsertScalar("t159", 0);
                propertySet->InsertScalar("t160", 0);
                propertySet->InsertScalar("t161", 0);
                propertySet->InsertScalar("t162", 0);
                propertySet->InsertScalar("t163", 0);
                propertySet->InsertScalar("t164", 0);
                propertySet->InsertScalar("t165", 0);
                propertySet->InsertScalar("t166", 0);
                propertySet->InsertScalar("t167", 0);
                propertySet->InsertScalar("t168", 0);
                propertySet->InsertScalar("t169", 0);
                propertySet->InsertScalar("t170", 0);
                propertySet->InsertScalar("t171", 0);
                propertySet->InsertScalar("t172", 0);
                propertySet->InsertScalar("t173", 0);
                propertySet->InsertScalar("t174", 0);
                propertySet->InsertScalar("t175", 0);
                propertySet->InsertScalar("t176", 0);
                propertySet->InsertScalar("t177", 0);
                propertySet->InsertScalar("t178", 0);
                propertySet->InsertScalar("t179", 0);
                propertySet->InsertScalar("t180", 0);
                propertySet->InsertScalar("t181", 0);
                propertySet->InsertScalar("t182", 0);
                propertySet->InsertScalar("t183", 0);
                propertySet->InsertScalar("t184", 0);
                propertySet->InsertScalar("t185", 0);
                propertySet->InsertScalar("t186", 0);
                propertySet->InsertScalar("t187", 0);
                propertySet->InsertScalar("t188", 0);
                propertySet->InsertScalar("t189", 0);
                propertySet->InsertScalar("t190", 0);
                propertySet->InsertScalar("t191", 0);
                propertySet->InsertScalar("t192", 0);
                propertySet->InsertScalar("t193", 0);
                propertySet->InsertScalar("t194", 0);
                propertySet->InsertScalar("t195", 0);
                propertySet->InsertScalar("t196", 0);
                propertySet->InsertScalar("t197", 0);
                propertySet->InsertScalar("t198", 0);
                propertySet->InsertScalar("t199", 0);
                auto children = result->Children;
                children->InsertAtTop(ShapeVisual_000());
                children->InsertAtTop(ContainerVisual_001());
                children->InsertAtTop(ShapeVisual_008());
                children->InsertAtTop(ContainerVisual_017());
                children->InsertAtTop(ShapeVisual_013());
                children->InsertAtTop(ContainerVisual_033());
                children->InsertAtTop(ShapeVisual_015());
                children->InsertAtTop(ContainerVisual_041());
                children->InsertAtTop(ShapeVisual_023());
                children->InsertAtTop(ContainerVisual_058());
                children->InsertAtTop(ShapeVisual_031());
                result->StartAnimation("t0", ScalarAnimation_0_to_1_000());
                auto controller = result->TryGetAnimationController("t0");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t1", ScalarAnimation_1_to_1());
                controller = result->TryGetAnimationController("t1");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t2", _scalarAnimation_1_to_1);
                controller = result->TryGetAnimationController("t2");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t3", ScalarAnimation_0_to_1_001());
                controller = result->TryGetAnimationController("t3");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t4", _scalarAnimation_0_to_1_001);
                controller = result->TryGetAnimationController("t4");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t5", _scalarAnimation_0_to_1_000);
                controller = result->TryGetAnimationController("t5");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t6", _scalarAnimation_1_to_1);
                controller = result->TryGetAnimationController("t6");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t7", _scalarAnimation_1_to_1);
                controller = result->TryGetAnimationController("t7");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t8", _scalarAnimation_0_to_1_001);
                controller = result->TryGetAnimationController("t8");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t9", _scalarAnimation_0_to_1_001);
                controller = result->TryGetAnimationController("t9");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t10", ScalarAnimation_0_to_1_002());
                controller = result->TryGetAnimationController("t10");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t11", ScalarAnimation_0_to_1_003());
                controller = result->TryGetAnimationController("t11");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t12", ScalarAnimation_0_to_1_004());
                controller = result->TryGetAnimationController("t12");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t14", _scalarAnimation_0_to_1_004);
                controller = result->TryGetAnimationController("t14");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t15", ScalarAnimation_0_to_1_005());
                controller = result->TryGetAnimationController("t15");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t16", _scalarAnimation_0_to_1_005);
                controller = result->TryGetAnimationController("t16");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t18", _scalarAnimation_0_to_1_005);
                controller = result->TryGetAnimationController("t18");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t20", _scalarAnimation_0_to_1_005);
                controller = result->TryGetAnimationController("t20");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t22", _scalarAnimation_0_to_1_005);
                controller = result->TryGetAnimationController("t22");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t24", _scalarAnimation_0_to_1_005);
                controller = result->TryGetAnimationController("t24");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t26", _scalarAnimation_0_to_1_005);
                controller = result->TryGetAnimationController("t26");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t28", _scalarAnimation_0_to_1_005);
                controller = result->TryGetAnimationController("t28");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t29", ScalarAnimation_0_to_1_006());
                controller = result->TryGetAnimationController("t29");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t30", _scalarAnimation_0_to_1_006);
                controller = result->TryGetAnimationController("t30");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t31", _scalarAnimation_0_to_1_005);
                controller = result->TryGetAnimationController("t31");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t32", _scalarAnimation_0_to_1_005);
                controller = result->TryGetAnimationController("t32");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t33", _scalarAnimation_0_to_1_005);
                controller = result->TryGetAnimationController("t33");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t34", _scalarAnimation_0_to_1_006);
                controller = result->TryGetAnimationController("t34");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t35", _scalarAnimation_0_to_1_006);
                controller = result->TryGetAnimationController("t35");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t36", _scalarAnimation_0_to_1_005);
                controller = result->TryGetAnimationController("t36");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t37", _scalarAnimation_0_to_1_005);
                controller = result->TryGetAnimationController("t37");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t39", _scalarAnimation_0_to_1_005);
                controller = result->TryGetAnimationController("t39");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t41", _scalarAnimation_0_to_1_005);
                controller = result->TryGetAnimationController("t41");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t43", _scalarAnimation_0_to_1_005);
                controller = result->TryGetAnimationController("t43");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t45", _scalarAnimation_0_to_1_005);
                controller = result->TryGetAnimationController("t45");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t47", _scalarAnimation_0_to_1_005);
                controller = result->TryGetAnimationController("t47");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t49", _scalarAnimation_0_to_1_005);
                controller = result->TryGetAnimationController("t49");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t50", _scalarAnimation_0_to_1_006);
                controller = result->TryGetAnimationController("t50");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t51", _scalarAnimation_0_to_1_006);
                controller = result->TryGetAnimationController("t51");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t52", _scalarAnimation_0_to_1_005);
                controller = result->TryGetAnimationController("t52");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t53", _scalarAnimation_0_to_1_005);
                controller = result->TryGetAnimationController("t53");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t54", _scalarAnimation_0_to_1_005);
                controller = result->TryGetAnimationController("t54");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t55", _scalarAnimation_0_to_1_006);
                controller = result->TryGetAnimationController("t55");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t56", _scalarAnimation_0_to_1_006);
                controller = result->TryGetAnimationController("t56");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t57", ScalarAnimation_0_to_1_007());
                controller = result->TryGetAnimationController("t57");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t58", _scalarAnimation_0_to_1_007);
                controller = result->TryGetAnimationController("t58");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t59", _scalarAnimation_0_to_1_007);
                controller = result->TryGetAnimationController("t59");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t60", _scalarAnimation_0_to_1_007);
                controller = result->TryGetAnimationController("t60");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t61", _scalarAnimation_0_to_1_007);
                controller = result->TryGetAnimationController("t61");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t62", _scalarAnimation_0_to_1_007);
                controller = result->TryGetAnimationController("t62");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t63", ScalarAnimation_0_to_1_008());
                controller = result->TryGetAnimationController("t63");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t64", ScalarAnimation_0_to_1_009());
                controller = result->TryGetAnimationController("t64");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t65", _scalarAnimation_0_to_1_003);
                controller = result->TryGetAnimationController("t65");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t66", _scalarAnimation_0_to_1_004);
                controller = result->TryGetAnimationController("t66");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t67", _scalarAnimation_0_to_1_009);
                controller = result->TryGetAnimationController("t67");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t68", _scalarAnimation_0_to_1_003);
                controller = result->TryGetAnimationController("t68");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t69", _scalarAnimation_0_to_1_004);
                controller = result->TryGetAnimationController("t69");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t70", _scalarAnimation_0_to_1_006);
                controller = result->TryGetAnimationController("t70");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t71", _scalarAnimation_0_to_1_006);
                controller = result->TryGetAnimationController("t71");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t72", _scalarAnimation_0_to_1_002);
                controller = result->TryGetAnimationController("t72");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t73", _scalarAnimation_0_to_1_003);
                controller = result->TryGetAnimationController("t73");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t74", _scalarAnimation_0_to_1_004);
                controller = result->TryGetAnimationController("t74");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t75", _scalarAnimation_0_to_1_000);
                controller = result->TryGetAnimationController("t75");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t76", _scalarAnimation_1_to_1);
                controller = result->TryGetAnimationController("t76");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t77", _scalarAnimation_1_to_1);
                controller = result->TryGetAnimationController("t77");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t78", _scalarAnimation_0_to_1_001);
                controller = result->TryGetAnimationController("t78");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t79", _scalarAnimation_0_to_1_001);
                controller = result->TryGetAnimationController("t79");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t80", _scalarAnimation_0_to_1_000);
                controller = result->TryGetAnimationController("t80");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t81", _scalarAnimation_1_to_1);
                controller = result->TryGetAnimationController("t81");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t82", _scalarAnimation_1_to_1);
                controller = result->TryGetAnimationController("t82");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t83", _scalarAnimation_0_to_1_001);
                controller = result->TryGetAnimationController("t83");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t84", _scalarAnimation_0_to_1_001);
                controller = result->TryGetAnimationController("t84");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t85", _scalarAnimation_0_to_1_007);
                controller = result->TryGetAnimationController("t85");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t86", _scalarAnimation_0_to_1_007);
                controller = result->TryGetAnimationController("t86");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t87", _scalarAnimation_0_to_1_000);
                controller = result->TryGetAnimationController("t87");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t88", _scalarAnimation_1_to_1);
                controller = result->TryGetAnimationController("t88");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t89", _scalarAnimation_1_to_1);
                controller = result->TryGetAnimationController("t89");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t90", _scalarAnimation_0_to_1_001);
                controller = result->TryGetAnimationController("t90");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t91", _scalarAnimation_0_to_1_001);
                controller = result->TryGetAnimationController("t91");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t92", _scalarAnimation_0_to_1_000);
                controller = result->TryGetAnimationController("t92");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t93", _scalarAnimation_1_to_1);
                controller = result->TryGetAnimationController("t93");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t94", _scalarAnimation_1_to_1);
                controller = result->TryGetAnimationController("t94");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t95", _scalarAnimation_0_to_1_001);
                controller = result->TryGetAnimationController("t95");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t96", _scalarAnimation_0_to_1_001);
                controller = result->TryGetAnimationController("t96");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t97", _scalarAnimation_0_to_1_007);
                controller = result->TryGetAnimationController("t97");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t98", _scalarAnimation_0_to_1_007);
                controller = result->TryGetAnimationController("t98");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t99", _scalarAnimation_0_to_1_007);
                controller = result->TryGetAnimationController("t99");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t100", _scalarAnimation_0_to_1_000);
                controller = result->TryGetAnimationController("t100");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t101", _scalarAnimation_1_to_1);
                controller = result->TryGetAnimationController("t101");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t102", _scalarAnimation_1_to_1);
                controller = result->TryGetAnimationController("t102");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t103", _scalarAnimation_0_to_1_001);
                controller = result->TryGetAnimationController("t103");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t104", _scalarAnimation_0_to_1_001);
                controller = result->TryGetAnimationController("t104");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t105", _scalarAnimation_0_to_1_000);
                controller = result->TryGetAnimationController("t105");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t106", _scalarAnimation_1_to_1);
                controller = result->TryGetAnimationController("t106");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t107", _scalarAnimation_1_to_1);
                controller = result->TryGetAnimationController("t107");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t108", _scalarAnimation_0_to_1_001);
                controller = result->TryGetAnimationController("t108");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t109", _scalarAnimation_0_to_1_001);
                controller = result->TryGetAnimationController("t109");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t110", _scalarAnimation_0_to_1_002);
                controller = result->TryGetAnimationController("t110");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t111", _scalarAnimation_0_to_1_003);
                controller = result->TryGetAnimationController("t111");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t112", _scalarAnimation_0_to_1_004);
                controller = result->TryGetAnimationController("t112");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t114", _scalarAnimation_0_to_1_004);
                controller = result->TryGetAnimationController("t114");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t115", _scalarAnimation_0_to_1_005);
                controller = result->TryGetAnimationController("t115");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t116", _scalarAnimation_0_to_1_005);
                controller = result->TryGetAnimationController("t116");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t118", _scalarAnimation_0_to_1_005);
                controller = result->TryGetAnimationController("t118");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t120", _scalarAnimation_0_to_1_005);
                controller = result->TryGetAnimationController("t120");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t122", _scalarAnimation_0_to_1_005);
                controller = result->TryGetAnimationController("t122");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t124", _scalarAnimation_0_to_1_005);
                controller = result->TryGetAnimationController("t124");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t126", _scalarAnimation_0_to_1_005);
                controller = result->TryGetAnimationController("t126");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t128", _scalarAnimation_0_to_1_005);
                controller = result->TryGetAnimationController("t128");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t129", _scalarAnimation_0_to_1_006);
                controller = result->TryGetAnimationController("t129");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t130", _scalarAnimation_0_to_1_006);
                controller = result->TryGetAnimationController("t130");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t131", _scalarAnimation_0_to_1_005);
                controller = result->TryGetAnimationController("t131");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t132", _scalarAnimation_0_to_1_005);
                controller = result->TryGetAnimationController("t132");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t133", _scalarAnimation_0_to_1_005);
                controller = result->TryGetAnimationController("t133");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t134", _scalarAnimation_0_to_1_006);
                controller = result->TryGetAnimationController("t134");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t135", _scalarAnimation_0_to_1_006);
                controller = result->TryGetAnimationController("t135");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t136", _scalarAnimation_0_to_1_005);
                controller = result->TryGetAnimationController("t136");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t137", _scalarAnimation_0_to_1_005);
                controller = result->TryGetAnimationController("t137");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t139", _scalarAnimation_0_to_1_005);
                controller = result->TryGetAnimationController("t139");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t141", _scalarAnimation_0_to_1_005);
                controller = result->TryGetAnimationController("t141");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t143", _scalarAnimation_0_to_1_005);
                controller = result->TryGetAnimationController("t143");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t145", _scalarAnimation_0_to_1_005);
                controller = result->TryGetAnimationController("t145");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t147", _scalarAnimation_0_to_1_005);
                controller = result->TryGetAnimationController("t147");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t149", _scalarAnimation_0_to_1_005);
                controller = result->TryGetAnimationController("t149");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t150", _scalarAnimation_0_to_1_006);
                controller = result->TryGetAnimationController("t150");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t151", _scalarAnimation_0_to_1_006);
                controller = result->TryGetAnimationController("t151");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t152", _scalarAnimation_0_to_1_005);
                controller = result->TryGetAnimationController("t152");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t153", _scalarAnimation_0_to_1_005);
                controller = result->TryGetAnimationController("t153");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t154", _scalarAnimation_0_to_1_005);
                controller = result->TryGetAnimationController("t154");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t155", _scalarAnimation_0_to_1_006);
                controller = result->TryGetAnimationController("t155");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t156", _scalarAnimation_0_to_1_006);
                controller = result->TryGetAnimationController("t156");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t157", _scalarAnimation_0_to_1_007);
                controller = result->TryGetAnimationController("t157");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t158", _scalarAnimation_0_to_1_007);
                controller = result->TryGetAnimationController("t158");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t159", _scalarAnimation_0_to_1_007);
                controller = result->TryGetAnimationController("t159");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t160", _scalarAnimation_0_to_1_007);
                controller = result->TryGetAnimationController("t160");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t161", _scalarAnimation_0_to_1_007);
                controller = result->TryGetAnimationController("t161");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t162", _scalarAnimation_0_to_1_007);
                controller = result->TryGetAnimationController("t162");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t163", _scalarAnimation_0_to_1_008);
                controller = result->TryGetAnimationController("t163");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t164", _scalarAnimation_0_to_1_009);
                controller = result->TryGetAnimationController("t164");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t165", _scalarAnimation_0_to_1_003);
                controller = result->TryGetAnimationController("t165");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t166", _scalarAnimation_0_to_1_004);
                controller = result->TryGetAnimationController("t166");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t167", _scalarAnimation_0_to_1_009);
                controller = result->TryGetAnimationController("t167");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t168", _scalarAnimation_0_to_1_003);
                controller = result->TryGetAnimationController("t168");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t169", _scalarAnimation_0_to_1_004);
                controller = result->TryGetAnimationController("t169");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t170", _scalarAnimation_0_to_1_006);
                controller = result->TryGetAnimationController("t170");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t171", _scalarAnimation_0_to_1_006);
                controller = result->TryGetAnimationController("t171");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t172", _scalarAnimation_0_to_1_002);
                controller = result->TryGetAnimationController("t172");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t173", _scalarAnimation_0_to_1_003);
                controller = result->TryGetAnimationController("t173");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t174", _scalarAnimation_0_to_1_004);
                controller = result->TryGetAnimationController("t174");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t175", _scalarAnimation_0_to_1_000);
                controller = result->TryGetAnimationController("t175");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t176", _scalarAnimation_1_to_1);
                controller = result->TryGetAnimationController("t176");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t177", _scalarAnimation_1_to_1);
                controller = result->TryGetAnimationController("t177");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t178", _scalarAnimation_0_to_1_001);
                controller = result->TryGetAnimationController("t178");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t179", _scalarAnimation_0_to_1_001);
                controller = result->TryGetAnimationController("t179");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t180", _scalarAnimation_0_to_1_000);
                controller = result->TryGetAnimationController("t180");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t181", _scalarAnimation_1_to_1);
                controller = result->TryGetAnimationController("t181");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t182", _scalarAnimation_1_to_1);
                controller = result->TryGetAnimationController("t182");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t183", _scalarAnimation_0_to_1_001);
                controller = result->TryGetAnimationController("t183");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t184", _scalarAnimation_0_to_1_001);
                controller = result->TryGetAnimationController("t184");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t185", _scalarAnimation_0_to_1_007);
                controller = result->TryGetAnimationController("t185");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t186", _scalarAnimation_0_to_1_007);
                controller = result->TryGetAnimationController("t186");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t187", _scalarAnimation_0_to_1_000);
                controller = result->TryGetAnimationController("t187");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t188", _scalarAnimation_1_to_1);
                controller = result->TryGetAnimationController("t188");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t189", _scalarAnimation_1_to_1);
                controller = result->TryGetAnimationController("t189");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t190", _scalarAnimation_0_to_1_001);
                controller = result->TryGetAnimationController("t190");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t191", _scalarAnimation_0_to_1_001);
                controller = result->TryGetAnimationController("t191");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t192", _scalarAnimation_0_to_1_000);
                controller = result->TryGetAnimationController("t192");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t193", _scalarAnimation_1_to_1);
                controller = result->TryGetAnimationController("t193");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t194", _scalarAnimation_1_to_1);
                controller = result->TryGetAnimationController("t194");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t195", _scalarAnimation_0_to_1_001);
                controller = result->TryGetAnimationController("t195");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t196", _scalarAnimation_0_to_1_001);
                controller = result->TryGetAnimationController("t196");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t197", _scalarAnimation_0_to_1_007);
                controller = result->TryGetAnimationController("t197");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t198", _scalarAnimation_0_to_1_007);
                controller = result->TryGetAnimationController("t198");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                result->StartAnimation("t199", _scalarAnimation_0_to_1_007);
                controller = result->TryGetAnimationController("t199");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_000()
            {
                auto result = _scalarAnimation_0_to_1_000 = _c->CreateScalarKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0.148208573F, 0, _stepEasingFunction_000);
                result->InsertKeyFrame(0.195439637F, 1, _cubicBezierEasingFunction_006);
                return result;
            }

            ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_001()
            {
                auto result = _scalarAnimation_0_to_1_001 = _c->CreateScalarKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0.858306289F, 0, _stepEasingFunction_000);
                result->InsertKeyFrame(0.890879393F, 1, _cubicBezierEasingFunction_003);
                result->InsertKeyFrame(0.890879512F, 0, _stepEasingFunction_000);
                result->InsertKeyFrame(0.931595981F, 1, _cubicBezierEasingFunction_003);
                result->InsertKeyFrame(0.9315961F, 0, _stepEasingFunction_000);
                result->InsertKeyFrame(0.967426598F, 1, _cubicBezierEasingFunction_003);
                result->InsertKeyFrame(0.967426717F, 0, _stepEasingFunction_000);
                result->InsertKeyFrame(0.999999881F, 1, _cubicBezierEasingFunction_003);
                return result;
            }

            ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_002()
            {
                auto result = _scalarAnimation_0_to_1_002 = _c->CreateScalarKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0.508143425F, 0, _stepEasingFunction_000);
                result->InsertKeyFrame(0.63680774F, 1, _cubicBezierEasingFunction_011);
                return result;
            }

            ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_003()
            {
                auto result = _scalarAnimation_0_to_1_003 = _c->CreateScalarKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0.65309459F, 0, _stepEasingFunction_000);
                result->InsertKeyFrame(0.741042256F, 1, _cubicBezierEasingFunction_014);
                return result;
            }

            ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_004()
            {
                auto result = _scalarAnimation_0_to_1_004 = _c->CreateScalarKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0.327361643F, 0, _stepEasingFunction_000);
                result->InsertKeyFrame(0.364820749F, 1, _cubicBezierEasingFunction_013);
                result->InsertKeyFrame(0.451140165F, 0, _stepEasingFunction_000);
                result->InsertKeyFrame(0.552117169F, 1, _cubicBezierEasingFunction_014);
                return result;
            }

            ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_005()
            {
                auto result = _scalarAnimation_0_to_1_005 = _c->CreateScalarKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0.208469152F, 0, _stepEasingFunction_000);
                result->InsertKeyFrame(0.320846796F, 1, _cubicBezierEasingFunction_008);
                return result;
            }

            ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_006()
            {
                auto result = _scalarAnimation_0_to_1_006 = _c->CreateScalarKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0.00162876444F, 0, _stepEasingFunction_000);
                result->InsertKeyFrame(0.034201853F, 1, _cubicBezierEasingFunction_003);
                result->InsertKeyFrame(0.0342019536F, 0, _stepEasingFunction_000);
                result->InsertKeyFrame(0.0749184638F, 1, _cubicBezierEasingFunction_003);
                result->InsertKeyFrame(0.0749185607F, 0, _stepEasingFunction_000);
                result->InsertKeyFrame(0.110749088F, 1, _cubicBezierEasingFunction_003);
                return result;
            }

            ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_007()
            {
                auto result = _scalarAnimation_0_to_1_007 = _c->CreateScalarKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0.162866548F, 0, _stepEasingFunction_000);
                result->InsertKeyFrame(0.325732797F, 1, _cubicBezierEasingFunction_018);
                return result;
            }

            ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_008()
            {
                auto result = _scalarAnimation_0_to_1_008 = _c->CreateScalarKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0.640065253F, 0, _stepEasingFunction_000);
                result->InsertKeyFrame(0.654723048F, 1, _cubicBezierEasingFunction_008);
                result->InsertKeyFrame(0.745928466F, 0, _stepEasingFunction_000);
                result->InsertKeyFrame(0.780130208F, 1, _cubicBezierEasingFunction_006);
                return result;
            }

            ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_009()
            {
                auto result = _scalarAnimation_0_to_1_009 = _c->CreateScalarKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0.745928466F, 0, _stepEasingFunction_000);
                result->InsertKeyFrame(0.780130208F, 1, _cubicBezierEasingFunction_006);
                return result;
            }

            ScalarKeyFrameAnimation^ ScalarAnimation_0_to_m7p3()
            {
                auto result = _scalarAnimation_0_to_m7p3 = _c->CreateScalarKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, 0, _linearEasingFunction);
                result->InsertKeyFrame(0.868078172F, 0, _linearEasingFunction);
                result->InsertKeyFrame(0.985342026F, -7.30000019F, _cubicBezierEasingFunction_003);
                return result;
            }

            ScalarKeyFrameAnimation^ ScalarAnimation_0p125_to_m143p875()
            {
                auto result = _scalarAnimation_0p125_to_m143p875 = _c->CreateScalarKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, 0.125F, _linearEasingFunction);
                result->InsertKeyFrame(0.868078172F, 0.125F, _linearEasingFunction);
                result->InsertKeyFrame(0.913680792F, -30.6749992F, CubicBezierEasingFunction_015());
                result->InsertKeyFrame(0.985342026F, -143.875F, _cubicBezierEasingFunction_002);
                return result;
            }

            ScalarKeyFrameAnimation^ ScalarAnimation_0p22_to_0p5_000()
            {
                auto result = _scalarAnimation_0p22_to_0p5_000 = _c->CreateScalarKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, 0.219999999F, _linearEasingFunction);
                result->InsertKeyFrame(0.102605864F, 0.219999999F, _linearEasingFunction);
                result->InsertKeyFrame(0.133550495F, 0.5F, _cubicBezierEasingFunction_006);
                return result;
            }

            ScalarKeyFrameAnimation^ ScalarAnimation_0p22_to_0p5_001()
            {
                auto result = _scalarAnimation_0p22_to_0p5_001 = _c->CreateScalarKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, 0.219999999F, _linearEasingFunction);
                result->InsertKeyFrame(0.102605864F, 0.219999999F, _linearEasingFunction);
                result->InsertKeyFrame(0.112377852F, 0.5F, CubicBezierEasingFunction_019());
                return result;
            }

            ScalarKeyFrameAnimation^ ScalarAnimation_1_to_1()
            {
                auto result = _scalarAnimation_1_to_1 = _c->CreateScalarKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0.0325731896F, 1, _cubicBezierEasingFunction_003);
                result->InsertKeyFrame(0.0325732902F, 0, _stepEasingFunction_000);
                result->InsertKeyFrame(0.0732898042F, 1, _cubicBezierEasingFunction_003);
                result->InsertKeyFrame(0.073289901F, 0, _stepEasingFunction_000);
                result->InsertKeyFrame(0.109120421F, 1, _cubicBezierEasingFunction_003);
                return result;
            }

            ScalarKeyFrameAnimation^ ScalarAnimation_120p1_to_360()
            {
                auto result = _scalarAnimation_120p1_to_360 = _c->CreateScalarKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, 120.099998F, _linearEasingFunction);
                result->InsertKeyFrame(0.508143306F, 120.099998F, _linearEasingFunction);
                result->InsertKeyFrame(0.636807799F, 360, CubicBezierEasingFunction_011());
                return result;
            }

            ScalarKeyFrameAnimation^ ScalarAnimation_15_to_m0p063()
            {
                auto result = _scalarAnimation_15_to_m0p063 = _c->CreateScalarKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, 15, _linearEasingFunction);
                result->InsertKeyFrame(0.451140076F, 15, _linearEasingFunction);
                result->InsertKeyFrame(0.517915308F, -16, CubicBezierEasingFunction_003());
                result->InsertKeyFrame(0.868078172F, -16, _linearEasingFunction);
                result->InsertKeyFrame(0.985342026F, -0.063000001F, _cubicBezierEasingFunction_003);
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'FlashCircle'.Transforms
            //     'FlashCircle'.Contents
            //       Group: Ellipse 1
            //         Ellipse Path 1
            ScalarKeyFrameAnimation^ ScalarAnimation_60_to_0()
            {
                auto result = _c->CreateScalarKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, 60, _linearEasingFunction);
                result->InsertKeyFrame(0.102605864F, 60, _linearEasingFunction);
                result->InsertKeyFrame(0.133550495F, 0, _cubicBezierEasingFunction_008);
                return result;
            }

            ScalarKeyFrameAnimation^ ScalarAnimation_m239_to_0()
            {
                auto result = _scalarAnimation_m239_to_0 = _c->CreateScalarKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, -239, LinearEasingFunction());
                result->InsertKeyFrame(0.451140076F, -239, _linearEasingFunction);
                result->InsertKeyFrame(0.517915308F, 140, CubicBezierEasingFunction_000());
                result->InsertKeyFrame(0.868078172F, 140, _linearEasingFunction);
                result->InsertKeyFrame(0.913680792F, 238.682007F, CubicBezierEasingFunction_001());
                result->InsertKeyFrame(0.985342026F, 0, CubicBezierEasingFunction_002());
                return result;
            }

            ScalarKeyFrameAnimation^ ScalarAnimation_m32p632_to_m19p883()
            {
                auto result = _scalarAnimation_m32p632_to_m19p883 = _c->CreateScalarKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, -32.632F, _linearEasingFunction);
                result->InsertKeyFrame(0.185667753F, -32.632F, _linearEasingFunction);
                result->InsertKeyFrame(0.242671013F, -128.348999F, CubicBezierEasingFunction_022());
                result->InsertKeyFrame(0.320846915F, -19.8829994F, CubicBezierEasingFunction_023());
                return result;
            }

            ScalarKeyFrameAnimation^ ScalarAnimation_m92p618_to_m19p593()
            {
                auto result = _scalarAnimation_m92p618_to_m19p593 = _c->CreateScalarKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, -92.6179962F, _linearEasingFunction);
                result->InsertKeyFrame(0.185667753F, -92.6179962F, _linearEasingFunction);
                result->InsertKeyFrame(0.320846915F, -19.5930004F, CubicBezierEasingFunction_021());
                return result;
            }

            ExpressionAnimation^ ScalarExpressionAnimation_000()
            {
                auto result = _scalarExpressionAnimation_000 = _c->CreateExpressionAnimation();
                result->SetReferenceParameter("_", _root);
                result->Expression = "_.Progress";
                return result;
            }

            ExpressionAnimation^ ScalarExpressionAnimation_001()
            {
                auto result = _scalarExpressionAnimation_001 = _c->CreateExpressionAnimation();
                result->SetReferenceParameter("_", _root);
                result->Expression = "_.Progress * 0.980830669";
                return result;
            }

            ShapeVisual^ ShapeVisual_000()
            {
                auto result = _c->CreateShapeVisual();
                result->Size = { 426, 213 };
                auto shapes = result->Shapes;
                // 'PhoneShell Outlines 2'.AncestorTransformFrom_Master Null
                shapes->Append(ContainerShape_000());
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneScreen'.Transforms
            //     'PhoneScreen'.Contents
            ShapeVisual^ ShapeVisual_001()
            {
                auto result = _c->CreateShapeVisual();
                result->Size = { 76, 140 };
                auto shapes = result->Shapes;
                // 'PhoneScreen Outlines 2'.Contents
                shapes->Append(ContainerShape_006());
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            ShapeVisual^ ShapeVisual_002()
            {
                auto result = _c->CreateShapeVisual();
                result->Size = { 68, 68 };
                auto shapes = result->Shapes;
                // 'PhonePic03 Outlines 2'.Contents
                shapes->Append(ContainerShape_008());
                return result;
            }

            // 'PhonePic02'.AncestorTransformFrom_PicMover
            //   'PhonePic02'.Contents
            ShapeVisual^ ShapeVisual_003()
            {
                auto result = _c->CreateShapeVisual();
                result->Size = { 68, 68 };
                auto shapes = result->Shapes;
                // 'PicMountains'.Contents
                shapes->Append(ContainerShape_025());
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneScreen'.Transforms
            //     'PhoneScreen'.Contents
            ShapeVisual^ ShapeVisual_004()
            {
                auto result = _c->CreateShapeVisual();
                result->Size = { 76, 140 };
                auto shapes = result->Shapes;
                // 'BlackBG'.Contents
                shapes->Append(ContainerShape_032());
                return result;
            }

            // 'PhonePic01'.Contents
            ShapeVisual^ ShapeVisual_005()
            {
                auto result = _c->CreateShapeVisual();
                result->Size = { 68, 68 };
                auto shapes = result->Shapes;
                // 'PurpleBG'.Contents
                shapes->Append(ContainerShape_034());
                // 'Cat'.Contents
                shapes->Append(ContainerShape_036());
                // 'Flash'.Contents
                shapes->Append(ContainerShape_047());
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneScreen'.Transforms
            //     'PhoneScreen'.Contents
            ShapeVisual^ ShapeVisual_006()
            {
                auto result = _c->CreateShapeVisual();
                result->Size = { 76, 140 };
                auto shapes = result->Shapes;
                // 'BlackBG 2'.Transforms
                shapes->Append(ContainerShape_049());
                return result;
            }

            // 'PhonePic01_Ending'.Transforms
            //   'PhonePic01_Ending'.Contents
            ShapeVisual^ ShapeVisual_007()
            {
                auto result = _c->CreateShapeVisual();
                result->Size = { 68, 68 };
                auto shapes = result->Shapes;
                // 'PurpleBG'.Transforms
                shapes->Append(ContainerShape_052());
                // 'Cat'.Transforms
                shapes->Append(ContainerShape_055());
                // 'Flash'.Transforms
                shapes->Append(ContainerShape_067());
                return result;
            }

            ShapeVisual^ ShapeVisual_008()
            {
                auto result = _c->CreateShapeVisual();
                result->Size = { 426, 213 };
                auto shapes = result->Shapes;
                // 'ScreenOutlineCoverup 2'.AncestorTransformFrom_PhoneShell Outlines 2
                shapes->Append(ContainerShape_070());
                // 'CamButtonFill 2'.AncestorTransformFrom_PhoneShell Outlines 3
                shapes->Append(ContainerShape_075());
                // 'Cursor 2'.AncestorTransformFrom_CursorPic Null
                shapes->Append(ContainerShape_081());
                return result;
            }

            // 'Laptop'.Transforms
            //   'Laptop'.Contents
            ShapeVisual^ ShapeVisual_009()
            {
                auto result = _c->CreateShapeVisual();
                result->Size = { 487, 260 };
                auto shapes = result->Shapes;
                // 'LaptopTop'.AncestorTransformFrom_LaptopNull
                shapes->Append(ContainerShape_088());
                // 'LaptopScreen'.AncestorTransformFrom_LaptopTop
                shapes->Append(ContainerShape_092());
                // 'GoldenGate'.AncestorTransformFrom_LaptopTop
                shapes->Append(ContainerShape_098());
                // 'PhoneCheckmark'.AncestorTransformFrom_GoldenGate
                shapes->Append(ContainerShape_110());
                // 'PicBear'.AncestorTransformFrom_GoldenGate
                shapes->Append(ContainerShape_117());
                // 'PicFlower'.AncestorTransformFrom_GoldenGate
                shapes->Append(ContainerShape_134());
                // 'PicMountains'.AncestorTransformFrom_GoldenGate
                shapes->Append(ContainerShape_151());
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PhonePic01 InApp'.Transforms
            //     'PhonePic01 InApp'.Contents
            ShapeVisual^ ShapeVisual_010()
            {
                auto result = _c->CreateShapeVisual();
                result->Size = { 68, 68 };
                auto shapes = result->Shapes;
                // 'PurpleBG'.Transforms
                shapes->Append(ContainerShape_161());
                // 'Cat'.Transforms
                shapes->Append(ContainerShape_164());
                // 'Flash'.Transforms
                shapes->Append(ContainerShape_176());
                return result;
            }

            // 'Laptop'.Transforms
            //   'Laptop'.Contents
            ShapeVisual^ ShapeVisual_011()
            {
                auto result = _c->CreateShapeVisual();
                result->Size = { 487, 260 };
                auto shapes = result->Shapes;
                // 'ScreenOutlineCoverup'.AncestorTransformFrom_LaptopNull
                shapes->Append(ContainerShape_179());
                // 'LaptopBottom'.AncestorTransformFrom_LaptopNull
                shapes->Append(ContainerShape_182());
                return result;
            }

            // 'PhonePic01'.AncestorTransformFrom_LaptopNull
            //   'PhonePic01'.Transforms
            //     'PhonePic01'.Contents
            ShapeVisual^ ShapeVisual_012()
            {
                auto result = _c->CreateShapeVisual();
                result->Size = { 68, 68 };
                auto shapes = result->Shapes;
                // 'PurpleBG'.Transforms
                shapes->Append(ContainerShape_187());
                // 'Cat'.Transforms
                shapes->Append(ContainerShape_190());
                // 'Flash'.Transforms
                shapes->Append(ContainerShape_202());
                return result;
            }

            ShapeVisual^ ShapeVisual_013()
            {
                auto result = _c->CreateShapeVisual();
                result->Size = { 426, 213 };
                auto shapes = result->Shapes;
                // 'FlashCircle'.AncestorTransformFrom_PhoneShell Outlines
                shapes->Append(ContainerShape_205());
                // 'FlashLine01'.AncestorTransformFrom_PhoneShell Outlines
                shapes->Append(ContainerShape_210());
                // 'FlashLine02'.AncestorTransformFrom_PhoneShell Outlines
                shapes->Append(ContainerShape_215());
                // 'FlashLine04'.AncestorTransformFrom_PhoneShell Outlines
                shapes->Append(ContainerShape_220());
                // 'FlashLine03'.AncestorTransformFrom_PhoneShell Outlines
                shapes->Append(ContainerShape_225());
                // 'FlashLine05'.AncestorTransformFrom_PhoneShell Outlines
                shapes->Append(ContainerShape_230());
                // 'PicShadow'.AncestorTransformFrom_PhonePic01
                shapes->Append(ContainerShape_235());
                return result;
            }

            // 'PhonePic01'.Transforms
            //   'PhonePic01'.Contents
            ShapeVisual^ ShapeVisual_014()
            {
                auto result = _c->CreateShapeVisual();
                result->Size = { 68, 68 };
                auto shapes = result->Shapes;
                // 'PurpleBG'.Transforms
                shapes->Append(ContainerShape_244());
                // 'Cat'.Transforms
                shapes->Append(ContainerShape_247());
                // 'Flash'.Transforms
                shapes->Append(ContainerShape_259());
                return result;
            }

            ShapeVisual^ ShapeVisual_015()
            {
                auto result = _c->CreateShapeVisual();
                result->Size = { 426, 213 };
                auto shapes = result->Shapes;
                // 'Cursor 3'.AncestorTransformFrom_Cursor 2
                shapes->Append(ContainerShape_262());
                // 'Cursor 4'.AncestorTransformFrom_Master Null
                shapes->Append(ContainerShape_270());
                // 'PhoneShell Outlines 3'.AncestorTransformFrom_PhoneShell Outlines 2
                shapes->Append(ContainerShape_274());
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneShell Outlines 3'.Transforms
            //     'PhoneScreen'.Transforms
            //       'PhoneScreen'.Contents
            ShapeVisual^ ShapeVisual_016()
            {
                auto result = _c->CreateShapeVisual();
                result->Size = { 76, 140 };
                auto shapes = result->Shapes;
                // 'PhoneScreen Outlines 2'.Contents
                shapes->Append(ContainerShape_281());
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            ShapeVisual^ ShapeVisual_017()
            {
                auto result = _c->CreateShapeVisual();
                result->Size = { 68, 68 };
                auto shapes = result->Shapes;
                // 'PhonePic03 Outlines 2'.Contents
                shapes->Append(ContainerShape_283());
                return result;
            }

            // 'PhonePic02'.AncestorTransformFrom_PicMover
            //   'PhonePic02'.Contents
            ShapeVisual^ ShapeVisual_018()
            {
                auto result = _c->CreateShapeVisual();
                result->Size = { 68, 68 };
                auto shapes = result->Shapes;
                // 'PicMountains'.Contents
                shapes->Append(ContainerShape_300());
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneShell Outlines 3'.Transforms
            //     'PhoneScreen'.Transforms
            //       'PhoneScreen'.Contents
            ShapeVisual^ ShapeVisual_019()
            {
                auto result = _c->CreateShapeVisual();
                result->Size = { 76, 140 };
                auto shapes = result->Shapes;
                // 'BlackBG'.Contents
                shapes->Append(ContainerShape_307());
                return result;
            }

            // 'PhonePic01'.Contents
            ShapeVisual^ ShapeVisual_020()
            {
                auto result = _c->CreateShapeVisual();
                result->Size = { 68, 68 };
                auto shapes = result->Shapes;
                // 'PurpleBG'.Contents
                shapes->Append(ContainerShape_309());
                // 'Cat'.Contents
                shapes->Append(ContainerShape_311());
                // 'Flash'.Contents
                shapes->Append(ContainerShape_322());
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneShell Outlines 3'.Transforms
            //     'PhoneScreen'.Transforms
            //       'PhoneScreen'.Contents
            ShapeVisual^ ShapeVisual_021()
            {
                auto result = _c->CreateShapeVisual();
                result->Size = { 76, 140 };
                auto shapes = result->Shapes;
                // 'BlackBG 2'.Transforms
                shapes->Append(ContainerShape_324());
                return result;
            }

            // 'PhonePic01_Ending'.Transforms
            //   'PhonePic01_Ending'.Contents
            ShapeVisual^ ShapeVisual_022()
            {
                auto result = _c->CreateShapeVisual();
                result->Size = { 68, 68 };
                auto shapes = result->Shapes;
                // 'PurpleBG'.Transforms
                shapes->Append(ContainerShape_327());
                // 'Cat'.Transforms
                shapes->Append(ContainerShape_330());
                // 'Flash'.Transforms
                shapes->Append(ContainerShape_342());
                return result;
            }

            ShapeVisual^ ShapeVisual_023()
            {
                auto result = _c->CreateShapeVisual();
                result->Size = { 426, 213 };
                auto shapes = result->Shapes;
                // 'ScreenOutlineCoverup 3'.AncestorTransformFrom_PhoneShell Outlines 3
                shapes->Append(ContainerShape_345());
                // 'CamButtonFill 3'.AncestorTransformFrom_PhoneShell Outlines 3
                shapes->Append(ContainerShape_351());
                // 'PhoneShell Outlines'.AncestorTransformFrom_Master Null
                shapes->Append(ContainerShape_357());
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'PhoneScreen'.Transforms
            //     'PhoneScreen'.Contents
            ShapeVisual^ ShapeVisual_024()
            {
                auto result = _c->CreateShapeVisual();
                result->Size = { 76, 140 };
                auto shapes = result->Shapes;
                // 'PhoneScreen Outlines 2'.Contents
                shapes->Append(ContainerShape_363());
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            ShapeVisual^ ShapeVisual_025()
            {
                auto result = _c->CreateShapeVisual();
                result->Size = { 68, 68 };
                auto shapes = result->Shapes;
                // 'PhonePic03 Outlines 2'.Contents
                shapes->Append(ContainerShape_365());
                return result;
            }

            // 'PhonePic02'.AncestorTransformFrom_PicMover
            //   'PhonePic02'.Contents
            ShapeVisual^ ShapeVisual_026()
            {
                auto result = _c->CreateShapeVisual();
                result->Size = { 68, 68 };
                auto shapes = result->Shapes;
                // 'PicMountains'.Contents
                shapes->Append(ContainerShape_382());
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'PhoneScreen'.Transforms
            //     'PhoneScreen'.Contents
            ShapeVisual^ ShapeVisual_027()
            {
                auto result = _c->CreateShapeVisual();
                result->Size = { 76, 140 };
                auto shapes = result->Shapes;
                // 'BlackBG'.Contents
                shapes->Append(ContainerShape_389());
                return result;
            }

            // 'PhonePic01'.Contents
            ShapeVisual^ ShapeVisual_028()
            {
                auto result = _c->CreateShapeVisual();
                result->Size = { 68, 68 };
                auto shapes = result->Shapes;
                // 'PurpleBG'.Contents
                shapes->Append(ContainerShape_391());
                // 'Cat'.Contents
                shapes->Append(ContainerShape_393());
                // 'Flash'.Contents
                shapes->Append(ContainerShape_404());
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'PhoneScreen'.Transforms
            //     'PhoneScreen'.Contents
            ShapeVisual^ ShapeVisual_029()
            {
                auto result = _c->CreateShapeVisual();
                result->Size = { 76, 140 };
                auto shapes = result->Shapes;
                // 'BlackBG 2'.Transforms
                shapes->Append(ContainerShape_406());
                return result;
            }

            // 'PhonePic01_Ending'.Transforms
            //   'PhonePic01_Ending'.Contents
            ShapeVisual^ ShapeVisual_030()
            {
                auto result = _c->CreateShapeVisual();
                result->Size = { 68, 68 };
                auto shapes = result->Shapes;
                // 'PurpleBG'.Transforms
                shapes->Append(ContainerShape_409());
                // 'Cat'.Transforms
                shapes->Append(ContainerShape_412());
                // 'Flash'.Transforms
                shapes->Append(ContainerShape_424());
                return result;
            }

            ShapeVisual^ ShapeVisual_031()
            {
                auto result = _c->CreateShapeVisual();
                result->Size = { 426, 213 };
                auto shapes = result->Shapes;
                // 'ScreenOutlineCoverup'.AncestorTransformFrom_PhoneShell Outlines
                shapes->Append(ContainerShape_427());
                // 'CamButtonFill'.AncestorTransformFrom_PhoneShell Outlines
                shapes->Append(ContainerShape_432());
                // 'CamButtonStroke'.AncestorTransformFrom_PhoneShell Outlines
                shapes->Append(ContainerShape_437());
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneShell Outlines 2'.Contents
            //     Group: Group 3
            CompositionSpriteShape^ SpriteShape_000()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = ColorBrush_AlmostDarkSlateGray_FF333333();
                result->Geometry = PathGeometry_000();
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneShell Outlines 2'.Contents
            //     Group: Group 2
            CompositionSpriteShape^ SpriteShape_001()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = ColorBrush_Black();
                result->Geometry = PathGeometry_001();
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneShell Outlines 2'.Contents
            //     Group: Group 1
            CompositionSpriteShape^ SpriteShape_002()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostDarkSlateGray_FF333333;
                result->Geometry = PathGeometry_002();
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneScreen'.Transforms
            //     'PhoneScreen'.Contents
            //       'PhoneScreen Outlines 2'.Contents
            //         'PhoneScreen Outlines 2'.Contents
            //           Group: Group 1
            // Path 1
            CompositionSpriteShape^ SpriteShape_003()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = ColorBrush_White();
                result->Geometry = PathGeometry_003();
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            //         Group: Group 16
            // Path 1
            CompositionSpriteShape^ SpriteShape_004()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = ColorBrush_AlmostMediumTurquoise_FF41DABB();
                result->Geometry = PathGeometry_004();
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            //         Group: Group 15
            CompositionSpriteShape^ SpriteShape_005()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = ColorBrush_AlmostOrangeRed_FFF7620B();
                result->Geometry = PathGeometry_005();
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            //         Group: Group 14
            CompositionSpriteShape^ SpriteShape_006()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = ColorBrush_AlmostChocolate_FFC95010();
                result->Geometry = PathGeometry_006();
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            //         Group: Group 13
            CompositionSpriteShape^ SpriteShape_007()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostChocolate_FFC95010;
                result->Geometry = PathGeometry_007();
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            //         Group: Group 12
            CompositionSpriteShape^ SpriteShape_008()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostChocolate_FFC95010;
                result->Geometry = PathGeometry_008();
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            //         Group: Group 11
            CompositionSpriteShape^ SpriteShape_009()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostChocolate_FFC95010;
                result->Geometry = PathGeometry_009();
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            //         Group: Group 10
            CompositionSpriteShape^ SpriteShape_010()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = ColorBrush_AlmostOrange_FFFFB800();
                result->Geometry = PathGeometry_010();
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            //         Group: Group 9
            CompositionSpriteShape^ SpriteShape_011()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostOrange_FFFFB800;
                result->Geometry = PathGeometry_011();
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            //         Group: Group 8
            CompositionSpriteShape^ SpriteShape_012()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostOrange_FFFFB800;
                result->Geometry = PathGeometry_012();
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            //         Group: Group 7
            CompositionSpriteShape^ SpriteShape_013()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostOrange_FFFFB800;
                result->Geometry = PathGeometry_013();
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            //         Group: Group 6
            CompositionSpriteShape^ SpriteShape_014()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostOrange_FFFFB800;
                result->Geometry = PathGeometry_014();
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            //         Group: Group 5
            CompositionSpriteShape^ SpriteShape_015()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostOrange_FFFFB800;
                result->Geometry = PathGeometry_015();
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            //         Group: Group 4
            CompositionSpriteShape^ SpriteShape_016()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostOrange_FFFFB800;
                result->Geometry = PathGeometry_016();
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            //         Group: Group 3
            CompositionSpriteShape^ SpriteShape_017()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostOrange_FFFFB800;
                result->Geometry = PathGeometry_017();
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            //         Group: Group 2
            CompositionSpriteShape^ SpriteShape_018()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostOrange_FFFFB800;
                result->Geometry = PathGeometry_018();
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            //         Group: Group 1
            CompositionSpriteShape^ SpriteShape_019()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostOrangeRed_FFF7620B;
                result->Geometry = PathGeometry_019();
                return result;
            }

            // 'PhonePic02'.AncestorTransformFrom_PicMover
            //   'PhonePic02'.Contents
            //     'PicMountains'.Contents
            //       'PicMountains'.Contents
            //         Group: Sky
            CompositionSpriteShape^ SpriteShape_020()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = ColorBrush_AlmostTurquoise_FF30D2F7();
                result->Geometry = PathGeometry_020();
                return result;
            }

            // 'PhonePic02'.AncestorTransformFrom_PicMover
            //   'PhonePic02'.Contents
            //     'PicMountains'.Contents
            //       'PicMountains'.Contents
            //         Group: MountianRight
            // Path 1
            CompositionSpriteShape^ SpriteShape_021()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = ColorBrush_AlmostTeal_FF008271();
                result->Geometry = PathGeometry_021();
                return result;
            }

            // 'PhonePic02'.AncestorTransformFrom_PicMover
            //   'PhonePic02'.Contents
            //     'PicMountains'.Contents
            //       'PicMountains'.Contents
            //         Group: MountianRightSnow
            // Path 1
            CompositionSpriteShape^ SpriteShape_022()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = ColorBrush_AlmostWhiteSmoke_FFF1F1F1();
                result->Geometry = PathGeometry_022();
                return result;
            }

            // 'PhonePic02'.AncestorTransformFrom_PicMover
            //   'PhonePic02'.Contents
            //     'PicMountains'.Contents
            //       'PicMountains'.Contents
            //         Group: MountainLeft
            // Path 1
            CompositionSpriteShape^ SpriteShape_023()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = ColorBrush_AlmostDarkCyan_FF00B193();
                result->Geometry = PathGeometry_023();
                return result;
            }

            // 'PhonePic02'.AncestorTransformFrom_PicMover
            //   'PhonePic02'.Contents
            //     'PicMountains'.Contents
            //       'PicMountains'.Contents
            //         Group: MountainLeftSnow
            // Path 1
            CompositionSpriteShape^ SpriteShape_024()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_White;
                result->Geometry = PathGeometry_024();
                return result;
            }

            // 'PhonePic02'.AncestorTransformFrom_PicMover
            //   'PhonePic02'.Contents
            //     'PicMountains'.Contents
            //       'PicMountains'.Contents
            //         Group: Sun
            CompositionSpriteShape^ SpriteShape_025()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = ColorBrush_AlmostGold_FFFBE000();
                result->Geometry = PathGeometry_025();
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneScreen'.Transforms
            //     'PhoneScreen'.Contents
            //       'BlackBG'.Contents
            //         'BlackBG'.Contents
            //           Group: Rectangle 1
            // Rectangle Path 1
            CompositionSpriteShape^ SpriteShape_026()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = AnimatedColorBrush_AlmostDarkSlateGray_FF2A2A2A_to_TransparentAlmostDarkSlateGray_002A2A2A_000();
                result->Geometry = Rectangle_76x140_000();
                return result;
            }

            // 'PhonePic01'.Contents
            //   'Flash'.Contents
            //     'PurpleBG'.Contents
            //       Group: Group 11
            // Path 1
            CompositionSpriteShape^ SpriteShape_027()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = ColorBrush_AlmostSteelBlue_FF5262AD();
                result->Geometry = PathGeometry_026();
                return result;
            }

            // 'Cat'.Contents
            //   Group: Group 10
            // Path 1
            CompositionSpriteShape^ SpriteShape_028()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = ColorBrush_AlmostPeru_FFD18A29();
                result->Geometry = PathGeometry_027();
                return result;
            }

            // 'Cat'.Contents
            //   Group: Group 9
            // Path 1
            CompositionSpriteShape^ SpriteShape_029()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostPeru_FFD18A29;
                result->Geometry = PathGeometry_028();
                return result;
            }

            // 'Cat'.Contents
            //   Group: Group 8
            // Path 1
            CompositionSpriteShape^ SpriteShape_030()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = ColorBrush_AlmostOrange_FFFBB713();
                result->Geometry = PathGeometry_029();
                return result;
            }

            // 'Cat'.Contents
            //   Group: EyeLeft
            // Path 1
            CompositionSpriteShape^ SpriteShape_031()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = ColorBrush_AlmostBlack_FF1F1F1F();
                result->Geometry = PathGeometry_030();
                return result;
            }

            // 'Cat'.Contents
            //   Group: EyeRight
            // Path 1
            CompositionSpriteShape^ SpriteShape_032()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostBlack_FF1F1F1F;
                result->Geometry = PathGeometry_031();
                return result;
            }

            // 'Cat'.Contents
            //   Group: Group 5
            CompositionSpriteShape^ SpriteShape_033()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = ColorBrush_AlmostDarkSlateGray_FF383838();
                result->Geometry = PathGeometry_032();
                return result;
            }

            // 'Cat'.Contents
            //   Group: Group 4
            CompositionSpriteShape^ SpriteShape_034()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = ColorBrush_AlmostGainsboro_FFE3E3E3();
                result->Geometry = PathGeometry_033();
                return result;
            }

            // 'Cat'.Contents
            //   Group: Group 3
            CompositionSpriteShape^ SpriteShape_035()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostGainsboro_FFE3E3E3;
                result->Geometry = PathGeometry_034();
                return result;
            }

            // 'Cat'.Contents
            //   Group: Group 2
            CompositionSpriteShape^ SpriteShape_036()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = ColorBrush_AlmostTomato_FFEC6950();
                result->Geometry = PathGeometry_035();
                return result;
            }

            // 'Cat'.Contents
            //   Group: Group 1
            // Path 1
            CompositionSpriteShape^ SpriteShape_037()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostPeru_FFD18A29;
                result->Geometry = PathGeometry_036();
                return result;
            }

            // 'PhonePic01'.Contents
            //   'Flash'.Contents
            //     'Flash'.Contents
            //       Group: Rectangle 1
            // Rectangle Path 1
            CompositionSpriteShape^ SpriteShape_038()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = AnimatedColorBrush_TransparentWhite_to_TransparentWhite_000();
                result->Geometry = Rectangle_68_000();
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneScreen'.Transforms
            //     'PhoneScreen'.Contents
            //       'BlackBG 2'.Transforms
            //         'BlackBG 2'.Transforms
            //           'BlackBG 2'.Contents
            //             Group: Rectangle 1
            // Rectangle Path 1
            CompositionSpriteShape^ SpriteShape_039()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = ColorBrush_AlmostDarkSlateGray_FF2A2A2A();
                result->Geometry = Rectangle_76x140_001();
                return result;
            }

            // 'PhonePic01_Ending'.Transforms
            //   'PhonePic01_Ending'.Contents
            //     'Flash'.Transforms
            //       'PurpleBG'.Transforms
            //         'PurpleBG'.Contents
            //           Group: Group 11
            // Path 1
            CompositionSpriteShape^ SpriteShape_040()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostSteelBlue_FF5262AD;
                result->Geometry = PathGeometry_037();
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 10
            // Path 1
            CompositionSpriteShape^ SpriteShape_041()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostPeru_FFD18A29;
                result->Geometry = PathGeometry_038();
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 9
            // Path 1
            CompositionSpriteShape^ SpriteShape_042()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostPeru_FFD18A29;
                result->Geometry = PathGeometry_039();
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 8
            // Path 1
            CompositionSpriteShape^ SpriteShape_043()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostOrange_FFFBB713;
                result->Geometry = PathGeometry_040();
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: EyeLeft
            // Path 1
            CompositionSpriteShape^ SpriteShape_044()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostBlack_FF1F1F1F;
                result->Geometry = PathGeometry_041();
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: EyeRight
            // Path 1
            CompositionSpriteShape^ SpriteShape_045()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostBlack_FF1F1F1F;
                result->Geometry = PathGeometry_042();
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 5
            CompositionSpriteShape^ SpriteShape_046()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostDarkSlateGray_FF383838;
                result->Geometry = PathGeometry_043();
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 4
            CompositionSpriteShape^ SpriteShape_047()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostGainsboro_FFE3E3E3;
                result->Geometry = PathGeometry_044();
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 3
            CompositionSpriteShape^ SpriteShape_048()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostGainsboro_FFE3E3E3;
                result->Geometry = PathGeometry_045();
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 2
            CompositionSpriteShape^ SpriteShape_049()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostTomato_FFEC6950;
                result->Geometry = PathGeometry_046();
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 1
            // Path 1
            CompositionSpriteShape^ SpriteShape_050()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostPeru_FFD18A29;
                result->Geometry = PathGeometry_047();
                return result;
            }

            // 'PhonePic01_Ending'.Transforms
            //   'PhonePic01_Ending'.Contents
            //     'Flash'.Transforms
            //       'Flash'.Transforms
            //         'Flash'.Contents
            //           Group: Rectangle 1
            // Rectangle Path 1
            CompositionSpriteShape^ SpriteShape_051()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = ColorBrush_TransparentWhite();
                result->Geometry = Rectangle_68_001();
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'ScreenOutlineCoverup 2'.Transforms
            //     'ScreenOutlineCoverup 2'.Contents
            //       Group: Rectangle 1
            // Rectangle Path 1
            CompositionSpriteShape^ SpriteShape_052()
            {
                auto result = _c->CreateSpriteShape();
                result->Geometry = Rectangle_67x123_000();
                result->StrokeBrush = _colorBrush_Black;
                result->StrokeMiterLimit = 4;
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneShell Outlines 3'.Transforms
            //     'CamButtonFill 2'.Transforms
            //       'CamButtonFill 2'.Contents
            //         Group: Ellipse 1
            // Ellipse Path 1
            CompositionSpriteShape^ SpriteShape_053()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_White;
                result->Geometry = Ellipse_6p5();
                return result;
            }

            // 'Cursor 2'.Transforms
            //   'Cursor 2'.Contents
            //     Group: Shape 1
            // Path 1
            CompositionSpriteShape^ SpriteShape_054()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_White;
                result->Geometry = PathGeometry_048();
                result->StrokeBrush = _colorBrush_Black;
                result->StrokeDashCap = CompositionStrokeCap::Round;
                result->StrokeEndCap = CompositionStrokeCap::Round;
                result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
                result->StrokeStartCap = CompositionStrokeCap::Round;
                result->StrokeMiterLimit = 4;
                result->StrokeThickness = 4.19999981F;
                return result;
            }

            // 'LaptopTop'.AncestorTransformFrom_LaptopNull
            //   'LaptopTop'.Contents
            //     Group: Group 3
            CompositionSpriteShape^ SpriteShape_055()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = ColorBrush_AlmostDarkGray_FF999999();
                result->Geometry = PathGeometry_049();
                return result;
            }

            // 'LaptopTop'.AncestorTransformFrom_LaptopNull
            //   'LaptopTop'.Contents
            //     Group: Group 1
            CompositionSpriteShape^ SpriteShape_056()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_Black;
                result->Geometry = PathGeometry_050();
                return result;
            }

            // 'LaptopScreen'.AncestorTransformFrom_LaptopTop
            //   'LaptopTop'.Transforms
            //     'LaptopScreen'.Contents
            //       Group: Group 3
            // Path 1
            CompositionSpriteShape^ SpriteShape_057()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = ColorBrush_AlmostDodgerBlue_FF3A96DD();
                result->Geometry = PathGeometry_051();
                return result;
            }

            // 'LaptopScreen'.AncestorTransformFrom_LaptopTop
            //   'LaptopTop'.Transforms
            //     'LaptopScreen'.Contents
            //       Group: Group 2
            // Path 1
            CompositionSpriteShape^ SpriteShape_058()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = ColorBrush_AlmostBlack_FF1A1A1A();
                result->Geometry = PathGeometry_052();
                return result;
            }

            // 'LaptopScreen'.AncestorTransformFrom_LaptopTop
            //   'LaptopTop'.Transforms
            //     'LaptopScreen'.Contents
            //       Group: Group 1
            // Path 1
            CompositionSpriteShape^ SpriteShape_059()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_White;
                result->Geometry = PathGeometry_053();
                return result;
            }

            // 'GoldenGate'.Contents
            //   Group: GreySidebar
            // Path 1
            CompositionSpriteShape^ SpriteShape_060()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = ColorBrush_AlmostLavender_FFEBEBEB();
                result->Geometry = PathGeometry_054();
                return result;
            }

            // 'GoldenGate'.Contents
            //   Group: WhiteMainBG
            // Path 1
            CompositionSpriteShape^ SpriteShape_061()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_White;
                result->Geometry = PathGeometry_055();
                return result;
            }

            // 'GoldenGate'.Contents
            //   Group: Group 39
            // Path 1
            CompositionSpriteShape^ SpriteShape_062()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostDarkGray_FF999999;
                result->Geometry = PathGeometry_056();
                return result;
            }

            // 'GoldenGate'.Contents
            //   Group: Group 38
            // Path 1
            CompositionSpriteShape^ SpriteShape_063()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostDarkGray_FF999999;
                result->Geometry = PathGeometry_057();
                return result;
            }

            // 'GoldenGate'.Contents
            //   Group: Group 37
            // Path 1
            CompositionSpriteShape^ SpriteShape_064()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostDarkGray_FF999999;
                result->Geometry = PathGeometry_058();
                return result;
            }

            // 'GoldenGate'.Contents
            //   Group: Group 36
            // Path 1
            CompositionSpriteShape^ SpriteShape_065()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostDarkGray_FF999999;
                result->Geometry = PathGeometry_059();
                return result;
            }

            // 'GoldenGate'.Contents
            //   Group: Group 35
            // Path 1
            CompositionSpriteShape^ SpriteShape_066()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostDarkGray_FF999999;
                result->Geometry = PathGeometry_060();
                return result;
            }

            // 'GoldenGate'.Contents
            //   Group: Group 34
            CompositionSpriteShape^ SpriteShape_067()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostDarkSlateGray_FF333333;
                result->Geometry = PathGeometry_061();
                return result;
            }

            // 'GoldenGate'.Contents
            //   Group: Group 33
            CompositionSpriteShape^ SpriteShape_068()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_White;
                result->Geometry = PathGeometry_062();
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PhoneCheckmark'.Transforms
            //     'PhoneCheckmark'.Contents
            //       Group: Group 32
            CompositionSpriteShape^ SpriteShape_069()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = ColorBrush_AlmostDodgerBlue_FF0078D7();
                result->Geometry = PathGeometry_063();
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PhoneCheckmark'.Transforms
            //     'PhoneCheckmark'.Contents
            //       Group: Group 31
            // Path 1
            CompositionSpriteShape^ SpriteShape_070()
            {
                auto result = _c->CreateSpriteShape();
                result->Geometry = PathGeometry_064();
                result->StrokeBrush = _colorBrush_White;
                result->StrokeMiterLimit = 10;
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicBear'.Contents
            //     Group: Group 13
            CompositionSpriteShape^ SpriteShape_071()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = AnimatedColorBrush_TransparentAlmostTurquoise_0030D2F7_to_AlmostTurquoise_FF30D2F7_000();
                result->Geometry = PathGeometry_065();
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicBear'.Contents
            //     Group: Group 12
            CompositionSpriteShape^ SpriteShape_072()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = AnimatedColorBrush_TransparentAlmostDarkCyan_0000B193_to_AlmostDarkCyan_FF00B193_000();
                result->Geometry = PathGeometry_066();
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicBear'.Contents
            //     Group: Group 11
            CompositionSpriteShape^ SpriteShape_073()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = AnimatedColorBrush_TransparentAlmostSienna_008E552D_to_AlmostSienna_FF8E552D_000();
                result->Geometry = PathGeometry_067();
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicBear'.Contents
            //     Group: Group 10
            CompositionSpriteShape^ SpriteShape_074()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = AnimatedColorBrush_TransparentAlmostSienna_008E552D_to_AlmostSienna_FF8E552D_001();
                result->Geometry = PathGeometry_068();
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicBear'.Contents
            //     Group: Group 9
            CompositionSpriteShape^ SpriteShape_075()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = AnimatedColorBrush_TransparentAlmostDarkOliveGreen_00603C2F_to_AlmostDarkOliveGreen_FF603C2F_000();
                result->Geometry = PathGeometry_069();
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicBear'.Contents
            //     Group: Group 8
            CompositionSpriteShape^ SpriteShape_076()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = AnimatedColorBrush_TransparentAlmostDarkOliveGreen_00603C2F_to_AlmostDarkOliveGreen_FF603C2F_001();
                result->Geometry = PathGeometry_070();
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicBear'.Contents
            //     Group: Group 7
            CompositionSpriteShape^ SpriteShape_077()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = AnimatedColorBrush_TransparentAlmostDarkKhaki_00BA9167_to_AlmostDarkKhaki_FFBA9167_000();
                result->Geometry = PathGeometry_071();
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicBear'.Contents
            //     Group: Group 6
            CompositionSpriteShape^ SpriteShape_078()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = AnimatedColorBrush_TransparentAlmostDarkKhaki_00BA9167_to_AlmostDarkKhaki_FFBA9167_001();
                result->Geometry = PathGeometry_072();
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicBear'.Contents
            //     Group: Group 5
            CompositionSpriteShape^ SpriteShape_079()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = AnimatedColorBrush_TransparentAlmostSienna_008E552D_to_AlmostSienna_FF8E552D_002();
                result->Geometry = PathGeometry_073();
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicBear'.Contents
            //     Group: Group 4
            CompositionSpriteShape^ SpriteShape_080()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = AnimatedColorBrush_TransparentAlmostDarkKhaki_00BA9167_to_AlmostDarkKhaki_FFBA9167_002();
                result->Geometry = PathGeometry_074();
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicBear'.Contents
            //     Group: Group 3
            CompositionSpriteShape^ SpriteShape_081()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = AnimatedColorBrush_TransparentAlmostDarkOliveGreen_00603C2F_to_AlmostDarkOliveGreen_FF603C2F_002();
                result->Geometry = PathGeometry_075();
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicBear'.Contents
            //     Group: Group 2
            CompositionSpriteShape^ SpriteShape_082()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = AnimatedColorBrush_TransparentAlmostDarkOliveGreen_00603C2F_to_AlmostDarkOliveGreen_FF603C2F_003();
                result->Geometry = PathGeometry_076();
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicBear'.Contents
            //     Group: Group 1
            CompositionSpriteShape^ SpriteShape_083()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = AnimatedColorBrush_TransparentAlmostDarkOliveGreen_00603C2F_to_AlmostDarkOliveGreen_FF603C2F_004();
                result->Geometry = PathGeometry_077();
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicFlower'.Contents
            //     Group: Group 30
            CompositionSpriteShape^ SpriteShape_084()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = AnimatedColorBrush_TransparentAlmostMediumTurquoise_0041DABB_to_AlmostMediumTurquoise_FF41DABB();
                result->Geometry = PathGeometry_078();
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicFlower'.Contents
            //     Group: Group 29
            CompositionSpriteShape^ SpriteShape_085()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = AnimatedColorBrush_TransparentAlmostOrangeRed_00F7620B_to_AlmostOrangeRed_FFF7620B_000();
                result->Geometry = PathGeometry_079();
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicFlower'.Contents
            //     Group: Group 28
            CompositionSpriteShape^ SpriteShape_086()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = AnimatedColorBrush_TransparentAlmostChocolate_00C95010_to_AlmostChocolate_FFC95010_000();
                result->Geometry = PathGeometry_080();
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicFlower'.Contents
            //     Group: Group 27
            CompositionSpriteShape^ SpriteShape_087()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = AnimatedColorBrush_TransparentAlmostChocolate_00C95010_to_AlmostChocolate_FFC95010_001();
                result->Geometry = PathGeometry_081();
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicFlower'.Contents
            //     Group: Group 26
            CompositionSpriteShape^ SpriteShape_088()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = AnimatedColorBrush_TransparentAlmostChocolate_00C95010_to_AlmostChocolate_FFC95010_002();
                result->Geometry = PathGeometry_082();
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicFlower'.Contents
            //     Group: Group 25
            CompositionSpriteShape^ SpriteShape_089()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = AnimatedColorBrush_TransparentAlmostChocolate_00C95010_to_AlmostChocolate_FFC95010_003();
                result->Geometry = PathGeometry_083();
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicFlower'.Contents
            //     Group: Group 24
            CompositionSpriteShape^ SpriteShape_090()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = AnimatedColorBrush_TransparentAlmostOrange_00FFB800_to_AlmostOrange_FFFFB800_000();
                result->Geometry = PathGeometry_084();
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicFlower'.Contents
            //     Group: Group 23
            CompositionSpriteShape^ SpriteShape_091()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = AnimatedColorBrush_TransparentAlmostOrange_00FFB800_to_AlmostOrange_FFFFB800_001();
                result->Geometry = PathGeometry_085();
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicFlower'.Contents
            //     Group: Group 22
            CompositionSpriteShape^ SpriteShape_092()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = AnimatedColorBrush_TransparentAlmostOrange_00FFB800_to_AlmostOrange_FFFFB800_002();
                result->Geometry = PathGeometry_086();
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicFlower'.Contents
            //     Group: Group 21
            CompositionSpriteShape^ SpriteShape_093()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = AnimatedColorBrush_TransparentAlmostOrange_00FFB800_to_AlmostOrange_FFFFB800_003();
                result->Geometry = PathGeometry_087();
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicFlower'.Contents
            //     Group: Group 20
            CompositionSpriteShape^ SpriteShape_094()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = AnimatedColorBrush_TransparentAlmostOrange_00FFB800_to_AlmostOrange_FFFFB800_004();
                result->Geometry = PathGeometry_088();
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicFlower'.Contents
            //     Group: Group 19
            CompositionSpriteShape^ SpriteShape_095()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = AnimatedColorBrush_TransparentAlmostOrange_00FFB800_to_AlmostOrange_FFFFB800_005();
                result->Geometry = PathGeometry_089();
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicFlower'.Contents
            //     Group: Group 18
            CompositionSpriteShape^ SpriteShape_096()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = AnimatedColorBrush_TransparentAlmostOrangeRed_00F7620B_to_AlmostOrangeRed_FFF7620B_001();
                result->Geometry = PathGeometry_090();
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicMountains'.Contents
            //     Group: Sky
            CompositionSpriteShape^ SpriteShape_097()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = AnimatedColorBrush_TransparentAlmostTurquoise_0030D2F7_to_AlmostTurquoise_FF30D2F7_001();
                result->Geometry = PathGeometry_091();
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicMountains'.Contents
            //     Group: MountianRight
            // Path 1
            CompositionSpriteShape^ SpriteShape_098()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = AnimatedColorBrush_TransparentAlmostTeal_00008271_to_AlmostTeal_FF008271();
                result->Geometry = PathGeometry_092();
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicMountains'.Contents
            //     Group: MountianRightSnow
            // Path 1
            CompositionSpriteShape^ SpriteShape_099()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = AnimatedColorBrush_TransparentAlmostWhiteSmoke_00F1F1F1_to_AlmostWhiteSmoke_FFF1F1F1();
                result->Geometry = PathGeometry_093();
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicMountains'.Contents
            //     Group: MountainLeft
            // Path 1
            CompositionSpriteShape^ SpriteShape_100()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = AnimatedColorBrush_TransparentAlmostDarkCyan_0000B193_to_AlmostDarkCyan_FF00B193_001();
                result->Geometry = PathGeometry_094();
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicMountains'.Contents
            //     Group: MountainLeftSnow
            // Path 1
            CompositionSpriteShape^ SpriteShape_101()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = AnimatedColorBrush_TransparentWhite_to_White();
                result->Geometry = PathGeometry_095();
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PicMountains'.Contents
            //     Group: Sun
            CompositionSpriteShape^ SpriteShape_102()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = AnimatedColorBrush_TransparentAlmostGold_00FBE000_to_AlmostGold_FFFBE000();
                result->Geometry = PathGeometry_096();
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PhonePic01 InApp'.Transforms
            //     'PhonePic01 InApp'.Contents
            //       'Flash'.Transforms
            //         'PurpleBG'.Transforms
            //           'PurpleBG'.Contents
            //             Group: Group 11
            // Path 1
            CompositionSpriteShape^ SpriteShape_103()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostSteelBlue_FF5262AD;
                result->Geometry = PathGeometry_097();
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 10
            // Path 1
            CompositionSpriteShape^ SpriteShape_104()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostPeru_FFD18A29;
                result->Geometry = PathGeometry_098();
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 9
            // Path 1
            CompositionSpriteShape^ SpriteShape_105()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostPeru_FFD18A29;
                result->Geometry = PathGeometry_099();
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 8
            // Path 1
            CompositionSpriteShape^ SpriteShape_106()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostOrange_FFFBB713;
                result->Geometry = PathGeometry_100();
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: EyeLeft
            // Path 1
            CompositionSpriteShape^ SpriteShape_107()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostBlack_FF1F1F1F;
                result->Geometry = PathGeometry_101();
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: EyeRight
            // Path 1
            CompositionSpriteShape^ SpriteShape_108()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostBlack_FF1F1F1F;
                result->Geometry = PathGeometry_102();
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 5
            CompositionSpriteShape^ SpriteShape_109()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostDarkSlateGray_FF383838;
                result->Geometry = PathGeometry_103();
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 4
            CompositionSpriteShape^ SpriteShape_110()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostGainsboro_FFE3E3E3;
                result->Geometry = PathGeometry_104();
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 3
            CompositionSpriteShape^ SpriteShape_111()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostGainsboro_FFE3E3E3;
                result->Geometry = PathGeometry_105();
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 2
            CompositionSpriteShape^ SpriteShape_112()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostTomato_FFEC6950;
                result->Geometry = PathGeometry_106();
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 1
            // Path 1
            CompositionSpriteShape^ SpriteShape_113()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostPeru_FFD18A29;
                result->Geometry = PathGeometry_107();
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PhonePic01 InApp'.Transforms
            //     'PhonePic01 InApp'.Contents
            //       'Flash'.Transforms
            //         'Flash'.Transforms
            //           'Flash'.Contents
            //             Group: Rectangle 1
            // Rectangle Path 1
            CompositionSpriteShape^ SpriteShape_114()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = AnimatedColorBrush_TransparentWhite_to_TransparentWhite_001();
                result->Geometry = Rectangle_68_002();
                return result;
            }

            // 'ScreenOutlineCoverup'.AncestorTransformFrom_LaptopNull
            //   'ScreenOutlineCoverup'.Contents
            //     Group: Rectangle 1
            // Rectangle Path 1
            CompositionSpriteShape^ SpriteShape_115()
            {
                auto result = _c->CreateSpriteShape();
                result->Geometry = Rectangle_296x168();
                result->StrokeBrush = _colorBrush_Black;
                result->StrokeMiterLimit = 4;
                return result;
            }

            // 'LaptopBottom'.AncestorTransformFrom_LaptopNull
            //   'LaptopBottom'.Contents
            //     Group: Group 5
            // Path 1
            CompositionSpriteShape^ SpriteShape_116()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = ColorBrush_AlmostLightGray_FFCCCCCC();
                result->Geometry = PathGeometry_108();
                return result;
            }

            // 'LaptopBottom'.AncestorTransformFrom_LaptopNull
            //   'LaptopBottom'.Contents
            //     Group: Group 4
            CompositionSpriteShape^ SpriteShape_117()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostDarkGray_FF999999;
                result->Geometry = PathGeometry_109();
                return result;
            }

            // 'LaptopBottom'.AncestorTransformFrom_LaptopNull
            //   'LaptopBottom'.Contents
            //     Group: Group 3
            CompositionSpriteShape^ SpriteShape_118()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostWhiteSmoke_FFF1F1F1;
                result->Geometry = PathGeometry_110();
                return result;
            }

            // 'PhonePic01'.AncestorTransformFrom_LaptopNull
            //   'PhonePic01'.Transforms
            //     'PhonePic01'.Contents
            //       'Flash'.Transforms
            //         'PurpleBG'.Transforms
            //           'PurpleBG'.Contents
            //             Group: Group 11
            // Path 1
            CompositionSpriteShape^ SpriteShape_119()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostSteelBlue_FF5262AD;
                result->Geometry = PathGeometry_111();
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 10
            // Path 1
            CompositionSpriteShape^ SpriteShape_120()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostPeru_FFD18A29;
                result->Geometry = PathGeometry_112();
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 9
            // Path 1
            CompositionSpriteShape^ SpriteShape_121()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostPeru_FFD18A29;
                result->Geometry = PathGeometry_113();
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 8
            // Path 1
            CompositionSpriteShape^ SpriteShape_122()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostOrange_FFFBB713;
                result->Geometry = PathGeometry_114();
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: EyeLeft
            // Path 1
            CompositionSpriteShape^ SpriteShape_123()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostBlack_FF1F1F1F;
                result->Geometry = PathGeometry_115();
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: EyeRight
            // Path 1
            CompositionSpriteShape^ SpriteShape_124()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostBlack_FF1F1F1F;
                result->Geometry = PathGeometry_116();
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 5
            CompositionSpriteShape^ SpriteShape_125()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostDarkSlateGray_FF383838;
                result->Geometry = PathGeometry_117();
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 4
            CompositionSpriteShape^ SpriteShape_126()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostGainsboro_FFE3E3E3;
                result->Geometry = PathGeometry_118();
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 3
            CompositionSpriteShape^ SpriteShape_127()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostGainsboro_FFE3E3E3;
                result->Geometry = PathGeometry_119();
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 2
            CompositionSpriteShape^ SpriteShape_128()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostTomato_FFEC6950;
                result->Geometry = PathGeometry_120();
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 1
            // Path 1
            CompositionSpriteShape^ SpriteShape_129()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostPeru_FFD18A29;
                result->Geometry = PathGeometry_121();
                return result;
            }

            // 'PhonePic01'.AncestorTransformFrom_LaptopNull
            //   'PhonePic01'.Transforms
            //     'PhonePic01'.Contents
            //       'Flash'.Transforms
            //         'Flash'.Transforms
            //           'Flash'.Contents
            //             Group: Rectangle 1
            // Rectangle Path 1
            CompositionSpriteShape^ SpriteShape_130()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = AnimatedColorBrush_TransparentWhite_to_TransparentWhite_002();
                result->Geometry = Rectangle_68_003();
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'FlashCircle'.Transforms
            //     'FlashCircle'.Contents
            //       Group: Ellipse 1
            // Ellipse Path 1
            CompositionSpriteShape^ SpriteShape_131()
            {
                auto result = _c->CreateSpriteShape();
                result->Geometry = Ellipse_2();
                result->StrokeBrush = AnimatedColorBrush_AlmostGold_FFFBE000_to_TransparentAlmostGold_00FBE000_000();
                result->StrokeMiterLimit = 4;
                result->StrokeThickness = 60;
                result->StartAnimation("StrokeThickness", ScalarAnimation_60_to_0());
                auto controller = result->TryGetAnimationController("StrokeThickness");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation_000);
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'FlashLine01'.Transforms
            //     'FlashLine01'.Contents
            //       Group: Rectangle 1
            // Path 1
            CompositionSpriteShape^ SpriteShape_132()
            {
                auto result = _c->CreateSpriteShape();
                result->Geometry = PathGeometry_122();
                result->StrokeBrush = AnimatedColorBrush_AlmostGold_FFFBE000_to_TransparentAlmostGold_00FBE000_001();
                result->StrokeDashCap = CompositionStrokeCap::Round;
                result->StrokeEndCap = CompositionStrokeCap::Round;
                result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
                result->StrokeStartCap = CompositionStrokeCap::Round;
                result->StrokeMiterLimit = 4;
                result->StrokeThickness = 6;
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'FlashLine02'.Transforms
            //     'FlashLine02'.Contents
            //       Group: Rectangle 1
            // Path 1
            CompositionSpriteShape^ SpriteShape_133()
            {
                auto result = _c->CreateSpriteShape();
                result->Geometry = PathGeometry_123();
                result->StrokeBrush = AnimatedColorBrush_AlmostGold_FFFBE000_to_TransparentAlmostGold_00FBE000_002();
                result->StrokeDashCap = CompositionStrokeCap::Round;
                result->StrokeEndCap = CompositionStrokeCap::Round;
                result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
                result->StrokeStartCap = CompositionStrokeCap::Round;
                result->StrokeMiterLimit = 4;
                result->StrokeThickness = 6;
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'FlashLine04'.Transforms
            //     'FlashLine04'.Contents
            //       Group: Rectangle 1
            // Path 1
            CompositionSpriteShape^ SpriteShape_134()
            {
                auto result = _c->CreateSpriteShape();
                result->Geometry = PathGeometry_124();
                result->StrokeBrush = AnimatedColorBrush_AlmostGold_FFFBE000_to_TransparentAlmostGold_00FBE000_003();
                result->StrokeDashCap = CompositionStrokeCap::Round;
                result->StrokeEndCap = CompositionStrokeCap::Round;
                result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
                result->StrokeStartCap = CompositionStrokeCap::Round;
                result->StrokeMiterLimit = 4;
                result->StrokeThickness = 6;
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'FlashLine03'.Transforms
            //     'FlashLine03'.Contents
            //       Group: Rectangle 1
            // Path 1
            CompositionSpriteShape^ SpriteShape_135()
            {
                auto result = _c->CreateSpriteShape();
                result->Geometry = PathGeometry_125();
                result->StrokeBrush = AnimatedColorBrush_AlmostGold_FFFBE000_to_TransparentAlmostGold_00FBE000_004();
                result->StrokeDashCap = CompositionStrokeCap::Round;
                result->StrokeEndCap = CompositionStrokeCap::Round;
                result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
                result->StrokeStartCap = CompositionStrokeCap::Round;
                result->StrokeMiterLimit = 4;
                result->StrokeThickness = 6;
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'FlashLine05'.Transforms
            //     'FlashLine05'.Contents
            //       Group: Rectangle 1
            // Path 1
            CompositionSpriteShape^ SpriteShape_136()
            {
                auto result = _c->CreateSpriteShape();
                result->Geometry = PathGeometry_126();
                result->StrokeBrush = AnimatedColorBrush_AlmostGold_FFFBE000_to_TransparentAlmostGold_00FBE000_005();
                result->StrokeDashCap = CompositionStrokeCap::Round;
                result->StrokeEndCap = CompositionStrokeCap::Round;
                result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
                result->StrokeStartCap = CompositionStrokeCap::Round;
                result->StrokeMiterLimit = 4;
                result->StrokeThickness = 6;
                return result;
            }

            // 'PicShadow'.Transforms
            //   'PicShadow'.Contents
            //     Group: Rectangle 1
            // Rectangle Path 1
            CompositionSpriteShape^ SpriteShape_137()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = ColorBrush_SemiTransparentBlack();
                result->Geometry = Rectangle_94p5();
                return result;
            }

            // 'PhonePic01'.Transforms
            //   'PhonePic01'.Contents
            //     'Flash'.Transforms
            //       'PurpleBG'.Transforms
            //         'PurpleBG'.Contents
            //           Group: Group 11
            // Path 1
            CompositionSpriteShape^ SpriteShape_138()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostSteelBlue_FF5262AD;
                result->Geometry = PathGeometry_127();
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 10
            // Path 1
            CompositionSpriteShape^ SpriteShape_139()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostPeru_FFD18A29;
                result->Geometry = PathGeometry_128();
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 9
            // Path 1
            CompositionSpriteShape^ SpriteShape_140()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostPeru_FFD18A29;
                result->Geometry = PathGeometry_129();
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 8
            // Path 1
            CompositionSpriteShape^ SpriteShape_141()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostOrange_FFFBB713;
                result->Geometry = PathGeometry_130();
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: EyeLeft
            // Path 1
            CompositionSpriteShape^ SpriteShape_142()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostBlack_FF1F1F1F;
                result->Geometry = PathGeometry_131();
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: EyeRight
            // Path 1
            CompositionSpriteShape^ SpriteShape_143()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostBlack_FF1F1F1F;
                result->Geometry = PathGeometry_132();
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 5
            CompositionSpriteShape^ SpriteShape_144()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostDarkSlateGray_FF383838;
                result->Geometry = PathGeometry_133();
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 4
            CompositionSpriteShape^ SpriteShape_145()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostGainsboro_FFE3E3E3;
                result->Geometry = PathGeometry_134();
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 3
            CompositionSpriteShape^ SpriteShape_146()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostGainsboro_FFE3E3E3;
                result->Geometry = PathGeometry_135();
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 2
            CompositionSpriteShape^ SpriteShape_147()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostTomato_FFEC6950;
                result->Geometry = PathGeometry_136();
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 1
            // Path 1
            CompositionSpriteShape^ SpriteShape_148()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostPeru_FFD18A29;
                result->Geometry = PathGeometry_137();
                return result;
            }

            // 'PhonePic01'.Transforms
            //   'PhonePic01'.Contents
            //     'Flash'.Transforms
            //       'Flash'.Transforms
            //         'Flash'.Contents
            //           Group: Rectangle 1
            // Rectangle Path 1
            CompositionSpriteShape^ SpriteShape_149()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = AnimatedColorBrush_TransparentWhite_to_TransparentWhite_003();
                result->Geometry = Rectangle_68_004();
                return result;
            }

            // 'Cursor 2'.Transforms
            //   'Cursor 3'.Transforms
            //     'Cursor 3'.Contents
            //       Group: Shape 1
            // Path 1
            CompositionSpriteShape^ SpriteShape_150()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_White;
                result->Geometry = PathGeometry_138();
                result->StrokeBrush = _colorBrush_Black;
                result->StrokeDashCap = CompositionStrokeCap::Round;
                result->StrokeEndCap = CompositionStrokeCap::Round;
                result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
                result->StrokeStartCap = CompositionStrokeCap::Round;
                result->StrokeMiterLimit = 4;
                result->StrokeThickness = 4.19999981F;
                return result;
            }

            // 'PhoneShell Outlines 3'.AncestorTransformFrom_PhoneShell Outlines 2
            //   'Cursor 4'.AncestorTransformFrom_Master Null
            //     'Cursor 4'.Transforms
            //       'Cursor 4'.Contents
            //         Group: Shape 1
            // Path 1
            CompositionSpriteShape^ SpriteShape_151()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_White;
                result->Geometry = PathGeometry_139();
                result->StrokeBrush = _colorBrush_Black;
                result->StrokeDashCap = CompositionStrokeCap::Round;
                result->StrokeEndCap = CompositionStrokeCap::Round;
                result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
                result->StrokeStartCap = CompositionStrokeCap::Round;
                result->StrokeMiterLimit = 4;
                result->StrokeThickness = 4.19999981F;
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneShell Outlines 3'.Transforms
            //     'PhoneShell Outlines 3'.Contents
            //       Group: Group 3
            CompositionSpriteShape^ SpriteShape_152()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostDarkSlateGray_FF333333;
                result->Geometry = PathGeometry_140();
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneShell Outlines 3'.Transforms
            //     'PhoneShell Outlines 3'.Contents
            //       Group: Group 2
            CompositionSpriteShape^ SpriteShape_153()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_Black;
                result->Geometry = PathGeometry_141();
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneShell Outlines 3'.Transforms
            //     'PhoneShell Outlines 3'.Contents
            //       Group: Group 1
            CompositionSpriteShape^ SpriteShape_154()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostDarkSlateGray_FF333333;
                result->Geometry = PathGeometry_142();
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneShell Outlines 3'.Transforms
            //     'PhoneScreen'.Transforms
            //       'PhoneScreen'.Contents
            //         'PhoneScreen Outlines 2'.Contents
            //           'PhoneScreen Outlines 2'.Contents
            //             Group: Group 1
            // Path 1
            CompositionSpriteShape^ SpriteShape_155()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_White;
                result->Geometry = PathGeometry_143();
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            //         Group: Group 16
            // Path 1
            CompositionSpriteShape^ SpriteShape_156()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostMediumTurquoise_FF41DABB;
                result->Geometry = PathGeometry_144();
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            //         Group: Group 15
            CompositionSpriteShape^ SpriteShape_157()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostOrangeRed_FFF7620B;
                result->Geometry = PathGeometry_145();
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            //         Group: Group 14
            CompositionSpriteShape^ SpriteShape_158()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostChocolate_FFC95010;
                result->Geometry = PathGeometry_146();
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            //         Group: Group 13
            CompositionSpriteShape^ SpriteShape_159()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostChocolate_FFC95010;
                result->Geometry = PathGeometry_147();
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            //         Group: Group 12
            CompositionSpriteShape^ SpriteShape_160()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostChocolate_FFC95010;
                result->Geometry = PathGeometry_148();
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            //         Group: Group 11
            CompositionSpriteShape^ SpriteShape_161()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostChocolate_FFC95010;
                result->Geometry = PathGeometry_149();
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            //         Group: Group 10
            CompositionSpriteShape^ SpriteShape_162()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostOrange_FFFFB800;
                result->Geometry = PathGeometry_150();
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            //         Group: Group 9
            CompositionSpriteShape^ SpriteShape_163()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostOrange_FFFFB800;
                result->Geometry = PathGeometry_151();
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            //         Group: Group 8
            CompositionSpriteShape^ SpriteShape_164()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostOrange_FFFFB800;
                result->Geometry = PathGeometry_152();
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            //         Group: Group 7
            CompositionSpriteShape^ SpriteShape_165()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostOrange_FFFFB800;
                result->Geometry = PathGeometry_153();
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            //         Group: Group 6
            CompositionSpriteShape^ SpriteShape_166()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostOrange_FFFFB800;
                result->Geometry = PathGeometry_154();
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            //         Group: Group 5
            CompositionSpriteShape^ SpriteShape_167()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostOrange_FFFFB800;
                result->Geometry = PathGeometry_155();
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            //         Group: Group 4
            CompositionSpriteShape^ SpriteShape_168()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostOrange_FFFFB800;
                result->Geometry = PathGeometry_156();
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            //         Group: Group 3
            CompositionSpriteShape^ SpriteShape_169()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostOrange_FFFFB800;
                result->Geometry = PathGeometry_157();
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            //         Group: Group 2
            CompositionSpriteShape^ SpriteShape_170()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostOrange_FFFFB800;
                result->Geometry = PathGeometry_158();
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            //         Group: Group 1
            CompositionSpriteShape^ SpriteShape_171()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostOrangeRed_FFF7620B;
                result->Geometry = PathGeometry_159();
                return result;
            }

            // 'PhonePic02'.AncestorTransformFrom_PicMover
            //   'PhonePic02'.Contents
            //     'PicMountains'.Contents
            //       'PicMountains'.Contents
            //         Group: Sky
            CompositionSpriteShape^ SpriteShape_172()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostTurquoise_FF30D2F7;
                result->Geometry = PathGeometry_160();
                return result;
            }

            // 'PhonePic02'.AncestorTransformFrom_PicMover
            //   'PhonePic02'.Contents
            //     'PicMountains'.Contents
            //       'PicMountains'.Contents
            //         Group: MountianRight
            // Path 1
            CompositionSpriteShape^ SpriteShape_173()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostTeal_FF008271;
                result->Geometry = PathGeometry_161();
                return result;
            }

            // 'PhonePic02'.AncestorTransformFrom_PicMover
            //   'PhonePic02'.Contents
            //     'PicMountains'.Contents
            //       'PicMountains'.Contents
            //         Group: MountianRightSnow
            // Path 1
            CompositionSpriteShape^ SpriteShape_174()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostWhiteSmoke_FFF1F1F1;
                result->Geometry = PathGeometry_162();
                return result;
            }

            // 'PhonePic02'.AncestorTransformFrom_PicMover
            //   'PhonePic02'.Contents
            //     'PicMountains'.Contents
            //       'PicMountains'.Contents
            //         Group: MountainLeft
            // Path 1
            CompositionSpriteShape^ SpriteShape_175()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostDarkCyan_FF00B193;
                result->Geometry = PathGeometry_163();
                return result;
            }

            // 'PhonePic02'.AncestorTransformFrom_PicMover
            //   'PhonePic02'.Contents
            //     'PicMountains'.Contents
            //       'PicMountains'.Contents
            //         Group: MountainLeftSnow
            // Path 1
            CompositionSpriteShape^ SpriteShape_176()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_White;
                result->Geometry = PathGeometry_164();
                return result;
            }

            // 'PhonePic02'.AncestorTransformFrom_PicMover
            //   'PhonePic02'.Contents
            //     'PicMountains'.Contents
            //       'PicMountains'.Contents
            //         Group: Sun
            CompositionSpriteShape^ SpriteShape_177()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostGold_FFFBE000;
                result->Geometry = PathGeometry_165();
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneShell Outlines 3'.Transforms
            //     'PhoneScreen'.Transforms
            //       'PhoneScreen'.Contents
            //         'BlackBG'.Contents
            //           'BlackBG'.Contents
            //             Group: Rectangle 1
            // Rectangle Path 1
            CompositionSpriteShape^ SpriteShape_178()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = AnimatedColorBrush_AlmostDarkSlateGray_FF2A2A2A_to_TransparentAlmostDarkSlateGray_002A2A2A_001();
                result->Geometry = Rectangle_76x140_002();
                return result;
            }

            // 'PhonePic01'.Contents
            //   'Flash'.Contents
            //     'PurpleBG'.Contents
            //       Group: Group 11
            // Path 1
            CompositionSpriteShape^ SpriteShape_179()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostSteelBlue_FF5262AD;
                result->Geometry = PathGeometry_166();
                return result;
            }

            // 'Cat'.Contents
            //   Group: Group 10
            // Path 1
            CompositionSpriteShape^ SpriteShape_180()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostPeru_FFD18A29;
                result->Geometry = PathGeometry_167();
                return result;
            }

            // 'Cat'.Contents
            //   Group: Group 9
            // Path 1
            CompositionSpriteShape^ SpriteShape_181()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostPeru_FFD18A29;
                result->Geometry = PathGeometry_168();
                return result;
            }

            // 'Cat'.Contents
            //   Group: Group 8
            // Path 1
            CompositionSpriteShape^ SpriteShape_182()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostOrange_FFFBB713;
                result->Geometry = PathGeometry_169();
                return result;
            }

            // 'Cat'.Contents
            //   Group: EyeLeft
            // Path 1
            CompositionSpriteShape^ SpriteShape_183()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostBlack_FF1F1F1F;
                result->Geometry = PathGeometry_170();
                return result;
            }

            // 'Cat'.Contents
            //   Group: EyeRight
            // Path 1
            CompositionSpriteShape^ SpriteShape_184()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostBlack_FF1F1F1F;
                result->Geometry = PathGeometry_171();
                return result;
            }

            // 'Cat'.Contents
            //   Group: Group 5
            CompositionSpriteShape^ SpriteShape_185()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostDarkSlateGray_FF383838;
                result->Geometry = PathGeometry_172();
                return result;
            }

            // 'Cat'.Contents
            //   Group: Group 4
            CompositionSpriteShape^ SpriteShape_186()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostGainsboro_FFE3E3E3;
                result->Geometry = PathGeometry_173();
                return result;
            }

            // 'Cat'.Contents
            //   Group: Group 3
            CompositionSpriteShape^ SpriteShape_187()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostGainsboro_FFE3E3E3;
                result->Geometry = PathGeometry_174();
                return result;
            }

            // 'Cat'.Contents
            //   Group: Group 2
            CompositionSpriteShape^ SpriteShape_188()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostTomato_FFEC6950;
                result->Geometry = PathGeometry_175();
                return result;
            }

            // 'Cat'.Contents
            //   Group: Group 1
            // Path 1
            CompositionSpriteShape^ SpriteShape_189()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostPeru_FFD18A29;
                result->Geometry = PathGeometry_176();
                return result;
            }

            // 'PhonePic01'.Contents
            //   'Flash'.Contents
            //     'Flash'.Contents
            //       Group: Rectangle 1
            // Rectangle Path 1
            CompositionSpriteShape^ SpriteShape_190()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = AnimatedColorBrush_TransparentWhite_to_TransparentWhite_004();
                result->Geometry = Rectangle_68_005();
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneShell Outlines 3'.Transforms
            //     'PhoneScreen'.Transforms
            //       'PhoneScreen'.Contents
            //         'BlackBG 2'.Transforms
            //           'BlackBG 2'.Transforms
            //             'BlackBG 2'.Contents
            //               Group: Rectangle 1
            // Rectangle Path 1
            CompositionSpriteShape^ SpriteShape_191()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostDarkSlateGray_FF2A2A2A;
                result->Geometry = Rectangle_76x140_003();
                return result;
            }

            // 'PhonePic01_Ending'.Transforms
            //   'PhonePic01_Ending'.Contents
            //     'Flash'.Transforms
            //       'PurpleBG'.Transforms
            //         'PurpleBG'.Contents
            //           Group: Group 11
            // Path 1
            CompositionSpriteShape^ SpriteShape_192()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostSteelBlue_FF5262AD;
                result->Geometry = PathGeometry_177();
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 10
            // Path 1
            CompositionSpriteShape^ SpriteShape_193()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostPeru_FFD18A29;
                result->Geometry = PathGeometry_178();
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 9
            // Path 1
            CompositionSpriteShape^ SpriteShape_194()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostPeru_FFD18A29;
                result->Geometry = PathGeometry_179();
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 8
            // Path 1
            CompositionSpriteShape^ SpriteShape_195()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostOrange_FFFBB713;
                result->Geometry = PathGeometry_180();
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: EyeLeft
            // Path 1
            CompositionSpriteShape^ SpriteShape_196()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostBlack_FF1F1F1F;
                result->Geometry = PathGeometry_181();
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: EyeRight
            // Path 1
            CompositionSpriteShape^ SpriteShape_197()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostBlack_FF1F1F1F;
                result->Geometry = PathGeometry_182();
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 5
            CompositionSpriteShape^ SpriteShape_198()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostDarkSlateGray_FF383838;
                result->Geometry = PathGeometry_183();
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 4
            CompositionSpriteShape^ SpriteShape_199()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostGainsboro_FFE3E3E3;
                result->Geometry = PathGeometry_184();
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 3
            CompositionSpriteShape^ SpriteShape_200()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostGainsboro_FFE3E3E3;
                result->Geometry = PathGeometry_185();
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 2
            CompositionSpriteShape^ SpriteShape_201()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostTomato_FFEC6950;
                result->Geometry = PathGeometry_186();
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 1
            // Path 1
            CompositionSpriteShape^ SpriteShape_202()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostPeru_FFD18A29;
                result->Geometry = PathGeometry_187();
                return result;
            }

            // 'PhonePic01_Ending'.Transforms
            //   'PhonePic01_Ending'.Contents
            //     'Flash'.Transforms
            //       'Flash'.Transforms
            //         'Flash'.Contents
            //           Group: Rectangle 1
            // Rectangle Path 1
            CompositionSpriteShape^ SpriteShape_203()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_TransparentWhite;
                result->Geometry = Rectangle_68_006();
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneShell Outlines 3'.Transforms
            //     'ScreenOutlineCoverup 3'.Transforms
            //       'ScreenOutlineCoverup 3'.Contents
            //         Group: Rectangle 1
            // Rectangle Path 1
            CompositionSpriteShape^ SpriteShape_204()
            {
                auto result = _c->CreateSpriteShape();
                result->Geometry = Rectangle_67x123_001();
                result->StrokeBrush = _colorBrush_Black;
                result->StrokeMiterLimit = 4;
                return result;
            }

            // 'PhoneShell Outlines 2'.Transforms
            //   'PhoneShell Outlines 3'.Transforms
            //     'CamButtonFill 3'.Transforms
            //       'CamButtonFill 3'.Contents
            //         Group: Ellipse 1
            // Ellipse Path 1
            CompositionSpriteShape^ SpriteShape_205()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_White;
                result->Geometry = _ellipse_6p5;
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'PhoneShell Outlines'.Contents
            //     Group: Group 3
            CompositionSpriteShape^ SpriteShape_206()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostDarkSlateGray_FF333333;
                result->Geometry = PathGeometry_188();
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'PhoneShell Outlines'.Contents
            //     Group: Group 2
            CompositionSpriteShape^ SpriteShape_207()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_Black;
                result->Geometry = PathGeometry_189();
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'PhoneShell Outlines'.Contents
            //     Group: Group 1
            CompositionSpriteShape^ SpriteShape_208()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostDarkSlateGray_FF333333;
                result->Geometry = PathGeometry_190();
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'PhoneScreen'.Transforms
            //     'PhoneScreen'.Contents
            //       'PhoneScreen Outlines 2'.Contents
            //         'PhoneScreen Outlines 2'.Contents
            //           Group: Group 1
            // Path 1
            CompositionSpriteShape^ SpriteShape_209()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_White;
                result->Geometry = PathGeometry_191();
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            //         Group: Group 16
            // Path 1
            CompositionSpriteShape^ SpriteShape_210()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostMediumTurquoise_FF41DABB;
                result->Geometry = PathGeometry_192();
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            //         Group: Group 15
            CompositionSpriteShape^ SpriteShape_211()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostOrangeRed_FFF7620B;
                result->Geometry = PathGeometry_193();
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            //         Group: Group 14
            CompositionSpriteShape^ SpriteShape_212()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostChocolate_FFC95010;
                result->Geometry = PathGeometry_194();
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            //         Group: Group 13
            CompositionSpriteShape^ SpriteShape_213()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostChocolate_FFC95010;
                result->Geometry = PathGeometry_195();
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            //         Group: Group 12
            CompositionSpriteShape^ SpriteShape_214()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostChocolate_FFC95010;
                result->Geometry = PathGeometry_196();
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            //         Group: Group 11
            CompositionSpriteShape^ SpriteShape_215()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostChocolate_FFC95010;
                result->Geometry = PathGeometry_197();
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            //         Group: Group 10
            CompositionSpriteShape^ SpriteShape_216()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostOrange_FFFFB800;
                result->Geometry = PathGeometry_198();
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            //         Group: Group 9
            CompositionSpriteShape^ SpriteShape_217()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostOrange_FFFFB800;
                result->Geometry = PathGeometry_199();
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            //         Group: Group 8
            CompositionSpriteShape^ SpriteShape_218()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostOrange_FFFFB800;
                result->Geometry = PathGeometry_200();
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            //         Group: Group 7
            CompositionSpriteShape^ SpriteShape_219()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostOrange_FFFFB800;
                result->Geometry = PathGeometry_201();
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            //         Group: Group 6
            CompositionSpriteShape^ SpriteShape_220()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostOrange_FFFFB800;
                result->Geometry = PathGeometry_202();
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            //         Group: Group 5
            CompositionSpriteShape^ SpriteShape_221()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostOrange_FFFFB800;
                result->Geometry = PathGeometry_203();
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            //         Group: Group 4
            CompositionSpriteShape^ SpriteShape_222()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostOrange_FFFFB800;
                result->Geometry = PathGeometry_204();
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            //         Group: Group 3
            CompositionSpriteShape^ SpriteShape_223()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostOrange_FFFFB800;
                result->Geometry = PathGeometry_205();
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            //         Group: Group 2
            CompositionSpriteShape^ SpriteShape_224()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostOrange_FFFFB800;
                result->Geometry = PathGeometry_206();
                return result;
            }

            // 'PhonePic03'.AncestorTransformFrom_PicMover
            //   'PhonePic03'.Contents
            //     'PhonePic03 Outlines 2'.Contents
            //       'PhonePic03 Outlines 2'.Contents
            //         Group: Group 1
            CompositionSpriteShape^ SpriteShape_225()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostOrangeRed_FFF7620B;
                result->Geometry = PathGeometry_207();
                return result;
            }

            // 'PhonePic02'.AncestorTransformFrom_PicMover
            //   'PhonePic02'.Contents
            //     'PicMountains'.Contents
            //       'PicMountains'.Contents
            //         Group: Sky
            CompositionSpriteShape^ SpriteShape_226()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostTurquoise_FF30D2F7;
                result->Geometry = PathGeometry_208();
                return result;
            }

            // 'PhonePic02'.AncestorTransformFrom_PicMover
            //   'PhonePic02'.Contents
            //     'PicMountains'.Contents
            //       'PicMountains'.Contents
            //         Group: MountianRight
            // Path 1
            CompositionSpriteShape^ SpriteShape_227()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostTeal_FF008271;
                result->Geometry = PathGeometry_209();
                return result;
            }

            // 'PhonePic02'.AncestorTransformFrom_PicMover
            //   'PhonePic02'.Contents
            //     'PicMountains'.Contents
            //       'PicMountains'.Contents
            //         Group: MountianRightSnow
            // Path 1
            CompositionSpriteShape^ SpriteShape_228()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostWhiteSmoke_FFF1F1F1;
                result->Geometry = PathGeometry_210();
                return result;
            }

            // 'PhonePic02'.AncestorTransformFrom_PicMover
            //   'PhonePic02'.Contents
            //     'PicMountains'.Contents
            //       'PicMountains'.Contents
            //         Group: MountainLeft
            // Path 1
            CompositionSpriteShape^ SpriteShape_229()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostDarkCyan_FF00B193;
                result->Geometry = PathGeometry_211();
                return result;
            }

            // 'PhonePic02'.AncestorTransformFrom_PicMover
            //   'PhonePic02'.Contents
            //     'PicMountains'.Contents
            //       'PicMountains'.Contents
            //         Group: MountainLeftSnow
            // Path 1
            CompositionSpriteShape^ SpriteShape_230()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_White;
                result->Geometry = PathGeometry_212();
                return result;
            }

            // 'PhonePic02'.AncestorTransformFrom_PicMover
            //   'PhonePic02'.Contents
            //     'PicMountains'.Contents
            //       'PicMountains'.Contents
            //         Group: Sun
            CompositionSpriteShape^ SpriteShape_231()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostGold_FFFBE000;
                result->Geometry = PathGeometry_213();
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'PhoneScreen'.Transforms
            //     'PhoneScreen'.Contents
            //       'BlackBG'.Contents
            //         'BlackBG'.Contents
            //           Group: Rectangle 1
            // Rectangle Path 1
            CompositionSpriteShape^ SpriteShape_232()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = AnimatedColorBrush_AlmostDarkSlateGray_FF2A2A2A_to_TransparentAlmostDarkSlateGray_002A2A2A_002();
                result->Geometry = Rectangle_76x140_004();
                return result;
            }

            // 'PhonePic01'.Contents
            //   'Flash'.Contents
            //     'PurpleBG'.Contents
            //       Group: Group 11
            // Path 1
            CompositionSpriteShape^ SpriteShape_233()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostSteelBlue_FF5262AD;
                result->Geometry = PathGeometry_214();
                return result;
            }

            // 'Cat'.Contents
            //   Group: Group 10
            // Path 1
            CompositionSpriteShape^ SpriteShape_234()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostPeru_FFD18A29;
                result->Geometry = PathGeometry_215();
                return result;
            }

            // 'Cat'.Contents
            //   Group: Group 9
            // Path 1
            CompositionSpriteShape^ SpriteShape_235()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostPeru_FFD18A29;
                result->Geometry = PathGeometry_216();
                return result;
            }

            // 'Cat'.Contents
            //   Group: Group 8
            // Path 1
            CompositionSpriteShape^ SpriteShape_236()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostOrange_FFFBB713;
                result->Geometry = PathGeometry_217();
                return result;
            }

            // 'Cat'.Contents
            //   Group: EyeLeft
            // Path 1
            CompositionSpriteShape^ SpriteShape_237()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostBlack_FF1F1F1F;
                result->Geometry = PathGeometry_218();
                return result;
            }

            // 'Cat'.Contents
            //   Group: EyeRight
            // Path 1
            CompositionSpriteShape^ SpriteShape_238()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostBlack_FF1F1F1F;
                result->Geometry = PathGeometry_219();
                return result;
            }

            // 'Cat'.Contents
            //   Group: Group 5
            CompositionSpriteShape^ SpriteShape_239()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostDarkSlateGray_FF383838;
                result->Geometry = PathGeometry_220();
                return result;
            }

            // 'Cat'.Contents
            //   Group: Group 4
            CompositionSpriteShape^ SpriteShape_240()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostGainsboro_FFE3E3E3;
                result->Geometry = PathGeometry_221();
                return result;
            }

            // 'Cat'.Contents
            //   Group: Group 3
            CompositionSpriteShape^ SpriteShape_241()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostGainsboro_FFE3E3E3;
                result->Geometry = PathGeometry_222();
                return result;
            }

            // 'Cat'.Contents
            //   Group: Group 2
            CompositionSpriteShape^ SpriteShape_242()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostTomato_FFEC6950;
                result->Geometry = PathGeometry_223();
                return result;
            }

            // 'Cat'.Contents
            //   Group: Group 1
            // Path 1
            CompositionSpriteShape^ SpriteShape_243()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostPeru_FFD18A29;
                result->Geometry = PathGeometry_224();
                return result;
            }

            // 'PhonePic01'.Contents
            //   'Flash'.Contents
            //     'Flash'.Contents
            //       Group: Rectangle 1
            // Rectangle Path 1
            CompositionSpriteShape^ SpriteShape_244()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = AnimatedColorBrush_TransparentWhite_to_TransparentWhite_005();
                result->Geometry = Rectangle_68_007();
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'PhoneScreen'.Transforms
            //     'PhoneScreen'.Contents
            //       'BlackBG 2'.Transforms
            //         'BlackBG 2'.Transforms
            //           'BlackBG 2'.Contents
            //             Group: Rectangle 1
            // Rectangle Path 1
            CompositionSpriteShape^ SpriteShape_245()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostDarkSlateGray_FF2A2A2A;
                result->Geometry = Rectangle_76x140_005();
                return result;
            }

            // 'PhonePic01_Ending'.Transforms
            //   'PhonePic01_Ending'.Contents
            //     'Flash'.Transforms
            //       'PurpleBG'.Transforms
            //         'PurpleBG'.Contents
            //           Group: Group 11
            // Path 1
            CompositionSpriteShape^ SpriteShape_246()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostSteelBlue_FF5262AD;
                result->Geometry = PathGeometry_225();
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 10
            // Path 1
            CompositionSpriteShape^ SpriteShape_247()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostPeru_FFD18A29;
                result->Geometry = PathGeometry_226();
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 9
            // Path 1
            CompositionSpriteShape^ SpriteShape_248()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostPeru_FFD18A29;
                result->Geometry = PathGeometry_227();
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 8
            // Path 1
            CompositionSpriteShape^ SpriteShape_249()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostOrange_FFFBB713;
                result->Geometry = PathGeometry_228();
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: EyeLeft
            // Path 1
            CompositionSpriteShape^ SpriteShape_250()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostBlack_FF1F1F1F;
                result->Geometry = PathGeometry_229();
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: EyeRight
            // Path 1
            CompositionSpriteShape^ SpriteShape_251()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostBlack_FF1F1F1F;
                result->Geometry = PathGeometry_230();
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 5
            CompositionSpriteShape^ SpriteShape_252()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostDarkSlateGray_FF383838;
                result->Geometry = PathGeometry_231();
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 4
            CompositionSpriteShape^ SpriteShape_253()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostGainsboro_FFE3E3E3;
                result->Geometry = PathGeometry_232();
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 3
            CompositionSpriteShape^ SpriteShape_254()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostGainsboro_FFE3E3E3;
                result->Geometry = PathGeometry_233();
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 2
            CompositionSpriteShape^ SpriteShape_255()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostTomato_FFEC6950;
                result->Geometry = PathGeometry_234();
                return result;
            }

            // 'Cat'.Transforms
            //   'Cat'.Contents
            //     Group: Group 1
            // Path 1
            CompositionSpriteShape^ SpriteShape_256()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_AlmostPeru_FFD18A29;
                result->Geometry = PathGeometry_235();
                return result;
            }

            // 'PhonePic01_Ending'.Transforms
            //   'PhonePic01_Ending'.Contents
            //     'Flash'.Transforms
            //       'Flash'.Transforms
            //         'Flash'.Contents
            //           Group: Rectangle 1
            // Rectangle Path 1
            CompositionSpriteShape^ SpriteShape_257()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = _colorBrush_TransparentWhite;
                result->Geometry = Rectangle_68_008();
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'ScreenOutlineCoverup'.Transforms
            //     'ScreenOutlineCoverup'.Contents
            //       Group: Rectangle 1
            // Rectangle Path 1
            CompositionSpriteShape^ SpriteShape_258()
            {
                auto result = _c->CreateSpriteShape();
                result->Geometry = Rectangle_67x123_002();
                result->StrokeBrush = _colorBrush_Black;
                result->StrokeMiterLimit = 4;
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'CamButtonFill'.Transforms
            //     'CamButtonFill'.Contents
            //       Group: Ellipse 1
            // Ellipse Path 1
            CompositionSpriteShape^ SpriteShape_259()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = AnimatedColorBrush_White_to_TransparentWhite();
                result->Geometry = _ellipse_6p5;
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'CamButtonStroke'.Transforms
            //     'CamButtonStroke'.Contents
            //       Group: Ellipse 1
            // Ellipse Path 1
            CompositionSpriteShape^ SpriteShape_260()
            {
                auto result = _c->CreateSpriteShape();
                result->Geometry = _ellipse_6p5;
                result->StrokeBrush = _colorBrush_White;
                result->StrokeMiterLimit = 4;
                return result;
            }

            StepEasingFunction^ StepEasingFunction_000()
            {
                auto result = _stepEasingFunction_000 = _c->CreateStepEasingFunction();
                result->IsInitialStepSingleFrame = true;
                return result;
            }

            StepEasingFunction^ StepEasingFunction_001()
            {
                auto result = _stepEasingFunction_001 = _c->CreateStepEasingFunction();
                result->IsFinalStepSingleFrame = true;
                return result;
            }

            Vector2KeyFrameAnimation^ Vector2Animation_000()
            {
                auto result = _vector2Animation_000 = _c->CreateVector2KeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { 1, 1 }, _linearEasingFunction);
                result->InsertKeyFrame(0.451140076F, { 1, 1 }, _linearEasingFunction);
                result->InsertKeyFrame(0.517915308F, { 0.839999974F, 0.839999974F }, _cubicBezierEasingFunction_003);
                result->InsertKeyFrame(0.868078172F, { 0.839999974F, 0.839999974F }, CubicBezierEasingFunction_004());
                result->InsertKeyFrame(0.985342026F, { 1.75999999F, 1.75999999F }, CubicBezierEasingFunction_005());
                return result;
            }

            // 'Cat'.Contents
            Vector2KeyFrameAnimation^ Vector2Animation_001()
            {
                auto result = _c->CreateVector2KeyFrameAnimation();
                result->SetReferenceParameter("_", _root);
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { 39.625F, 37.75F }, _linearEasingFunction);
                result->InsertExpressionKeyFrame(0.0325731896F, "(Pow(1 - _.t107, 3) * Vector2(39.625,37.75)) + (3 * Square(1 - _.t107) * _.t107 * Vector2(39.5,37.6458321)) + (3 * (1 - _.t107) * Square(_.t107) * Vector2(38.7708321,37.2708321)) + (Pow(_.t107, 3) * Vector2(38.875,37.125))", StepEasingFunction_000());
                result->InsertExpressionKeyFrame(0.0732898042F, "(Pow(1 - _.t107, 3) * Vector2(38.875,37.125)) + (3 * Square(1 - _.t107) * _.t107 * Vector2(38.9791679,36.9791679)) + (3 * (1 - _.t107) * Square(_.t107) * Vector2(40.2291679,36.7708321)) + (Pow(_.t107, 3) * Vector2(40.25,36.875))", _stepEasingFunction_000);
                result->InsertExpressionKeyFrame(0.109120421F, "(Pow(1 - _.t107, 3) * Vector2(40.25,36.875)) + (3 * Square(1 - _.t107) * _.t107 * Vector2(40.2708321,36.9791679)) + (3 * (1 - _.t107) * Square(_.t107) * Vector2(39.2083321,37.6041679)) + (Pow(_.t107, 3) * Vector2(39,37.75))", _stepEasingFunction_000);
                result->InsertKeyFrame(0.109120518F, { 39, 37.75F }, _stepEasingFunction_000);
                result->InsertKeyFrame(0.148208469F, { 39, 37.75F }, CubicBezierEasingFunction_009());
                result->InsertKeyFrame(0.195439741F, { 39, 43 }, _cubicBezierEasingFunction_006);
                return result;
            }

            Vector2KeyFrameAnimation^ Vector2Animation_002()
            {
                auto result = _vector2Animation_002 = _c->CreateVector2KeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { 0.751999974F, 0.751999974F }, _linearEasingFunction);
                result->InsertKeyFrame(0.148208469F, { 0.751999974F, 0.751999974F }, _linearEasingFunction);
                result->InsertKeyFrame(0.195439741F, { 1, 1 }, _cubicBezierEasingFunction_006);
                return result;
            }

            // 'PhonePic01'.Contents
            Vector2KeyFrameAnimation^ Vector2Animation_003()
            {
                auto result = _c->CreateVector2KeyFrameAnimation();
                result->SetReferenceParameter("_", _root);
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { 36.7999992F, 60.0999985F }, _linearEasingFunction);
                result->InsertKeyFrame(0.148208469F, { 36.7999992F, 60.0999985F }, _linearEasingFunction);
                result->InsertExpressionKeyFrame(0.195439637F, "(Pow(1 - _.t105, 3) * Vector2(36.7999992,60.0999985)) + (3 * Square(1 - _.t105) * _.t105 * Vector2(37,56.4166641)) + (3 * (1 - _.t105) * Square(_.t105) * Vector2(37.7999992,41.6833344)) + (Pow(_.t105, 3) * Vector2(38,38))", _stepEasingFunction_000);
                result->InsertKeyFrame(0.195439741F, { 38, 38 }, _stepEasingFunction_000);
                return result;
            }

            // 'Cat'.Transforms
            Vector2KeyFrameAnimation^ Vector2Animation_004()
            {
                auto result = _c->CreateVector2KeyFrameAnimation();
                result->SetReferenceParameter("_", _root);
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { 39.625F, 37.75F }, _linearEasingFunction);
                result->InsertKeyFrame(0.85830617F, { 39.625F, 37.75F }, _linearEasingFunction);
                result->InsertExpressionKeyFrame(0.890879393F, "(Pow(1 - _.t109, 3) * Vector2(39.625,37.75)) + (3 * Square(1 - _.t109) * _.t109 * Vector2(39.5,37.6458321)) + (3 * (1 - _.t109) * Square(_.t109) * Vector2(38.7708321,37.2708321)) + (Pow(_.t109, 3) * Vector2(38.875,37.125))", _stepEasingFunction_000);
                result->InsertExpressionKeyFrame(0.931595981F, "(Pow(1 - _.t109, 3) * Vector2(38.875,37.125)) + (3 * Square(1 - _.t109) * _.t109 * Vector2(38.9791679,36.9791679)) + (3 * (1 - _.t109) * Square(_.t109) * Vector2(40.2291679,36.7708321)) + (Pow(_.t109, 3) * Vector2(40.25,36.875))", _stepEasingFunction_000);
                result->InsertExpressionKeyFrame(0.967426598F, "(Pow(1 - _.t109, 3) * Vector2(40.25,36.875)) + (3 * Square(1 - _.t109) * _.t109 * Vector2(40.2708321,36.9791679)) + (3 * (1 - _.t109) * Square(_.t109) * Vector2(39.1041679,37.6041679)) + (Pow(_.t109, 3) * Vector2(39,37.75))", _stepEasingFunction_000);
                result->InsertExpressionKeyFrame(0.999999881F, "(Pow(1 - _.t109, 3) * Vector2(39,37.75)) + (3 * Square(1 - _.t109) * _.t109 * Vector2(38.8958321,37.8958321)) + (3 * (1 - _.t109) * Square(_.t109) * Vector2(39.6458321,37.8541679)) + (Pow(_.t109, 3) * Vector2(39.625,37.75))", _stepEasingFunction_000);
                result->InsertKeyFrame(1, { 39.625F, 37.75F }, _stepEasingFunction_000);
                return result;
            }

            // 'Cursor 2'.Transforms
            Vector2KeyFrameAnimation^ Vector2Animation_005()
            {
                auto result = _c->CreateVector2KeyFrameAnimation();
                result->SetReferenceParameter("_", _root);
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { 133.261993F, -87.25F }, _linearEasingFunction);
                result->InsertKeyFrame(0.508143306F, { 133.261993F, -87.25F }, _linearEasingFunction);
                result->InsertExpressionKeyFrame(0.63680774F, "(Pow(1 - _.t110, 3) * Vector2(133.261993,(-87.25))) + (3 * Square(1 - _.t110) * _.t110 * Vector2(450.92865,(-63.25))) + (3 * (1 - _.t110) * Square(_.t110) * Vector2(174.928665,202.416672)) + (Pow(_.t110, 3) * Vector2(4.26200008,(-23.25)))", _stepEasingFunction_000);
                result->InsertKeyFrame(0.636807859F, { 4.26200008F, -23.25F }, _stepEasingFunction_000);
                return result;
            }

            Vector2KeyFrameAnimation^ Vector2Animation_006()
            {
                auto result = _vector2Animation_006 = _c->CreateVector2KeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { 0.439999998F, 0.439999998F }, _linearEasingFunction);
                result->InsertKeyFrame(0.516286671F, { 0.439999998F, 0.439999998F }, _linearEasingFunction);
                result->InsertKeyFrame(0.552117288F, { 0.689999998F, 0.689999998F }, CubicBezierEasingFunction_010());
                result->InsertKeyFrame(0.640065134F, { 0.689999998F, 0.689999998F }, _cubicBezierEasingFunction_007);
                result->InsertKeyFrame(0.64169383F, { 0.542999983F, 0.542999983F }, _cubicBezierEasingFunction_007);
                result->InsertKeyFrame(0.745928347F, { 0.542999983F, 0.542999983F }, _cubicBezierEasingFunction_007);
                result->InsertKeyFrame(0.780130267F, { 0.600000024F, 0.600000024F }, _cubicBezierEasingFunction_006);
                return result;
            }

            // 'CursorPic Null'.Transforms
            Vector2KeyFrameAnimation^ Vector2Animation_007()
            {
                auto result = _c->CreateVector2KeyFrameAnimation();
                result->SetReferenceParameter("_", _root);
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { -0.108000003F, 0 }, _linearEasingFunction);
                result->InsertKeyFrame(0.653094471F, { -0.108000003F, 0 }, _linearEasingFunction);
                result->InsertExpressionKeyFrame(0.741042256F, "(Pow(1 - _.t111, 3) * Vector2((-0.108000003),0)) + (3 * Square(1 - _.t111) * _.t111 * Vector2(21.7499237,(-4.38596487))) + (3 * (1 - _.t111) * Square(_.t111) * Vector2(82.65065,(-8.55672455))) + (Pow(_.t111, 3) * Vector2(112.920998,(-6.90299988)))", _stepEasingFunction_000);
                result->InsertKeyFrame(0.741042376F, { 112.920998F, -6.90299988F }, _stepEasingFunction_000);
                return result;
            }

            // 'LaptopNull'.Transforms
            Vector2KeyFrameAnimation^ Vector2Animation_008()
            {
                auto result = _c->CreateVector2KeyFrameAnimation();
                result->SetReferenceParameter("_", _root);
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { 47.3470001F, 0 }, _linearEasingFunction);
                result->InsertKeyFrame(0.319218248F, { 47.3470001F, 0 }, _linearEasingFunction);
                result->InsertKeyFrame(0.327361554F, { 47.3470001F, 3.796F }, _cubicBezierEasingFunction_008);
                result->InsertExpressionKeyFrame(0.364820749F, "(Pow(1 - _.t112, 3) * Vector2(47.3470001,3.796)) + (3 * Square(1 - _.t112) * _.t112 * Vector2(47.3470001,3.796)) + (3 * (1 - _.t112) * Square(_.t112) * Vector2(47.3470001,0.632729352)) + (Pow(_.t112, 3) * Vector2(47.3470001,0))", _stepEasingFunction_000);
                result->InsertKeyFrame(0.364820838F, { 47.3470001F, 0 }, _stepEasingFunction_000);
                result->InsertKeyFrame(0.451140076F, { 47.3470001F, 0 }, CubicBezierEasingFunction_012());
                result->InsertExpressionKeyFrame(0.552117169F, "(Pow(1 - _.t112, 3) * Vector2(47.3470001,0)) + (3 * Square(1 - _.t112) * _.t112 * Vector2(38.3773422,5.17687654)) + (3 * (1 - _.t112) * Square(_.t112) * Vector2(5.30270338,2.80414152))", _stepEasingFunction_000);
                result->InsertKeyFrame(0.552117288F, { 0, 0 }, _stepEasingFunction_000);
                return result;
            }

            Vector2KeyFrameAnimation^ Vector2Animation_009()
            {
                auto result = _vector2Animation_009 = _c->CreateVector2KeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { 0.862810016F, 0.862810016F }, _linearEasingFunction);
                result->InsertKeyFrame(0.319218248F, { 0.862810016F, 0.862810016F }, _linearEasingFunction);
                result->InsertKeyFrame(0.327361554F, { 0.852460027F, 0.852460027F }, _cubicBezierEasingFunction_008);
                result->InsertKeyFrame(0.364820838F, { 0.862810016F, 0.862810016F }, CubicBezierEasingFunction_013());
                result->InsertKeyFrame(0.451140076F, { 0.862810016F, 0.862810016F }, _cubicBezierEasingFunction_004);
                result->InsertKeyFrame(0.552117288F, { 1, 1 }, CubicBezierEasingFunction_014());
                return result;
            }

            Vector2KeyFrameAnimation^ Vector2Animation_010()
            {
                auto result = _vector2Animation_010 = _c->CreateVector2KeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { 1.15900004F, 1.15900004F }, _linearEasingFunction);
                result->InsertKeyFrame(0.868078172F, { 1.15900004F, 1.15900004F }, _linearEasingFunction);
                result->InsertKeyFrame(0.985342026F, { 0.778999984F, 0.778999984F }, CubicBezierEasingFunction_016());
                return result;
            }

            // 'LaptopTop'.AncestorTransformFrom_LaptopNull
            Vector2KeyFrameAnimation^ Vector2Animation_011()
            {
                auto result = _c->CreateVector2KeyFrameAnimation();
                result->SetReferenceParameter("_", _root);
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { -134.5F, 154 }, _linearEasingFunction);
                result->InsertKeyFrame(0.208469048F, { -134.5F, 154 }, _linearEasingFunction);
                result->InsertExpressionKeyFrame(0.320846796F, "(Pow(1 - _.t136, 3) * Vector2((-134.5),154)) + (3 * Square(1 - _.t136) * _.t136 * Vector2((-10.6666641),162.166672)) + (3 * (1 - _.t136) * Square(_.t136) * Vector2(162.666656,147.833328)) + (Pow(_.t136, 3) * Vector2(272.5,125))", _stepEasingFunction_000);
                result->InsertKeyFrame(0.320846885F, { 272.5F, 125 }, _stepEasingFunction_000);
                result->InsertKeyFrame(0.913680792F, { 272.5F, 125 }, StepEasingFunction_001());
                result->InsertKeyFrame(0.985342026F, { 603.5F, 125 }, _cubicBezierEasingFunction_002);
                return result;
            }

            Vector2KeyFrameAnimation^ Vector2Animation_012()
            {
                auto result = _vector2Animation_012 = _c->CreateVector2KeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { 0.629999995F, 0.629999995F }, _linearEasingFunction);
                result->InsertKeyFrame(0.208469048F, { 0.629999995F, 0.629999995F }, _linearEasingFunction);
                result->InsertKeyFrame(0.320846915F, { 1, 1 }, _cubicBezierEasingFunction_008);
                return result;
            }

            // 'LaptopScreen'.AncestorTransformFrom_LaptopTop
            Vector2KeyFrameAnimation^ Vector2Animation_013()
            {
                auto result = _c->CreateVector2KeyFrameAnimation();
                result->SetReferenceParameter("_", _root);
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { -134.5F, 154 }, _linearEasingFunction);
                result->InsertKeyFrame(0.208469048F, { -134.5F, 154 }, _linearEasingFunction);
                result->InsertExpressionKeyFrame(0.320846796F, "(Pow(1 - _.t137, 3) * Vector2((-134.5),154)) + (3 * Square(1 - _.t137) * _.t137 * Vector2((-10.6666641),162.166672)) + (3 * (1 - _.t137) * Square(_.t137) * Vector2(162.666656,147.833328)) + (Pow(_.t137, 3) * Vector2(272.5,125))", _stepEasingFunction_000);
                result->InsertKeyFrame(0.320846885F, { 272.5F, 125 }, _stepEasingFunction_000);
                result->InsertKeyFrame(0.913680792F, { 272.5F, 125 }, _stepEasingFunction_001);
                result->InsertKeyFrame(0.985342026F, { 603.5F, 125 }, _cubicBezierEasingFunction_002);
                return result;
            }

            Vector2KeyFrameAnimation^ Vector2Animation_014()
            {
                auto result = _vector2Animation_014 = _c->CreateVector2KeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { 164.25F, 121.25F }, _linearEasingFunction);
                result->InsertKeyFrame(0.653094471F, { 164.25F, 121.25F }, _linearEasingFunction);
                result->InsertKeyFrame(0.741042316F, { 137.449997F, 121.25F }, _cubicBezierEasingFunction_014);
                return result;
            }

            // 'GoldenGate'.AncestorTransformFrom_LaptopTop
            Vector2KeyFrameAnimation^ Vector2Animation_015()
            {
                auto result = _c->CreateVector2KeyFrameAnimation();
                result->SetReferenceParameter("_", _root);
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { -134.5F, 154 }, _linearEasingFunction);
                result->InsertKeyFrame(0.208469048F, { -134.5F, 154 }, _linearEasingFunction);
                result->InsertExpressionKeyFrame(0.320846796F, "(Pow(1 - _.t139, 3) * Vector2((-134.5),154)) + (3 * Square(1 - _.t139) * _.t139 * Vector2((-10.6666641),162.166672)) + (3 * (1 - _.t139) * Square(_.t139) * Vector2(162.666656,147.833328)) + (Pow(_.t139, 3) * Vector2(272.5,125))", _stepEasingFunction_000);
                result->InsertKeyFrame(0.320846885F, { 272.5F, 125 }, _stepEasingFunction_000);
                result->InsertKeyFrame(0.913680792F, { 272.5F, 125 }, _stepEasingFunction_001);
                result->InsertKeyFrame(0.985342026F, { 603.5F, 125 }, _cubicBezierEasingFunction_002);
                return result;
            }

            // 'GoldenGate'.Transforms
            //   'PhoneCheckmark'.Transforms
            Vector2KeyFrameAnimation^ Vector2Animation_016()
            {
                auto result = _c->CreateVector2KeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { 0, 0 }, _linearEasingFunction);
                result->InsertKeyFrame(0.355048865F, { 0, 0 }, _linearEasingFunction);
                result->InsertKeyFrame(0.379478842F, { 1.23703003F, 1.23703003F }, _cubicBezierEasingFunction_008);
                result->InsertKeyFrame(0.439739406F, { 1, 1 }, CubicBezierEasingFunction_017());
                return result;
            }

            // 'PhoneCheckmark'.AncestorTransformFrom_GoldenGate
            Vector2KeyFrameAnimation^ Vector2Animation_017()
            {
                auto result = _c->CreateVector2KeyFrameAnimation();
                result->SetReferenceParameter("_", _root);
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { -134.5F, 154 }, _linearEasingFunction);
                result->InsertKeyFrame(0.208469048F, { -134.5F, 154 }, _linearEasingFunction);
                result->InsertExpressionKeyFrame(0.320846796F, "(Pow(1 - _.t141, 3) * Vector2((-134.5),154)) + (3 * Square(1 - _.t141) * _.t141 * Vector2((-10.6666641),162.166672)) + (3 * (1 - _.t141) * Square(_.t141) * Vector2(162.666656,147.833328)) + (Pow(_.t141, 3) * Vector2(272.5,125))", _stepEasingFunction_000);
                result->InsertKeyFrame(0.320846885F, { 272.5F, 125 }, _stepEasingFunction_000);
                result->InsertKeyFrame(0.913680792F, { 272.5F, 125 }, _stepEasingFunction_001);
                result->InsertKeyFrame(0.985342026F, { 603.5F, 125 }, _cubicBezierEasingFunction_002);
                return result;
            }

            // 'PicBear'.AncestorTransformFrom_GoldenGate
            Vector2KeyFrameAnimation^ Vector2Animation_018()
            {
                auto result = _c->CreateVector2KeyFrameAnimation();
                result->SetReferenceParameter("_", _root);
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { -134.5F, 154 }, _linearEasingFunction);
                result->InsertKeyFrame(0.208469048F, { -134.5F, 154 }, _linearEasingFunction);
                result->InsertExpressionKeyFrame(0.320846796F, "(Pow(1 - _.t143, 3) * Vector2((-134.5),154)) + (3 * Square(1 - _.t143) * _.t143 * Vector2((-10.6666641),162.166672)) + (3 * (1 - _.t143) * Square(_.t143) * Vector2(162.666656,147.833328)) + (Pow(_.t143, 3) * Vector2(272.5,125))", _stepEasingFunction_000);
                result->InsertKeyFrame(0.320846885F, { 272.5F, 125 }, _stepEasingFunction_000);
                result->InsertKeyFrame(0.913680792F, { 272.5F, 125 }, _stepEasingFunction_001);
                result->InsertKeyFrame(0.985342026F, { 603.5F, 125 }, _cubicBezierEasingFunction_002);
                return result;
            }

            // 'PicFlower'.AncestorTransformFrom_GoldenGate
            Vector2KeyFrameAnimation^ Vector2Animation_019()
            {
                auto result = _c->CreateVector2KeyFrameAnimation();
                result->SetReferenceParameter("_", _root);
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { -134.5F, 154 }, _linearEasingFunction);
                result->InsertKeyFrame(0.208469048F, { -134.5F, 154 }, _linearEasingFunction);
                result->InsertExpressionKeyFrame(0.320846796F, "(Pow(1 - _.t145, 3) * Vector2((-134.5),154)) + (3 * Square(1 - _.t145) * _.t145 * Vector2((-10.6666641),162.166672)) + (3 * (1 - _.t145) * Square(_.t145) * Vector2(162.666656,147.833328)) + (Pow(_.t145, 3) * Vector2(272.5,125))", _stepEasingFunction_000);
                result->InsertKeyFrame(0.320846885F, { 272.5F, 125 }, _stepEasingFunction_000);
                result->InsertKeyFrame(0.913680792F, { 272.5F, 125 }, _stepEasingFunction_001);
                result->InsertKeyFrame(0.985342026F, { 603.5F, 125 }, _cubicBezierEasingFunction_002);
                return result;
            }

            // 'PicMountains'.AncestorTransformFrom_GoldenGate
            Vector2KeyFrameAnimation^ Vector2Animation_020()
            {
                auto result = _c->CreateVector2KeyFrameAnimation();
                result->SetReferenceParameter("_", _root);
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { -134.5F, 154 }, _linearEasingFunction);
                result->InsertKeyFrame(0.208469048F, { -134.5F, 154 }, _linearEasingFunction);
                result->InsertExpressionKeyFrame(0.320846796F, "(Pow(1 - _.t147, 3) * Vector2((-134.5),154)) + (3 * Square(1 - _.t147) * _.t147 * Vector2((-10.6666641),162.166672)) + (3 * (1 - _.t147) * Square(_.t147) * Vector2(162.666656,147.833328)) + (Pow(_.t147, 3) * Vector2(272.5,125))", _stepEasingFunction_000);
                result->InsertKeyFrame(0.320846885F, { 272.5F, 125 }, _stepEasingFunction_000);
                result->InsertKeyFrame(0.913680792F, { 272.5F, 125 }, _stepEasingFunction_001);
                result->InsertKeyFrame(0.985342026F, { 603.5F, 125 }, _cubicBezierEasingFunction_002);
                return result;
            }

            // 'Cat'.Transforms
            Vector2KeyFrameAnimation^ Vector2Animation_021()
            {
                auto result = _c->CreateVector2KeyFrameAnimation();
                result->SetReferenceParameter("_", _root);
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { 39.625F, 37.75F }, _linearEasingFunction);
                result->InsertKeyFrame(0.00162866444F, { 39.625F, 37.75F }, _linearEasingFunction);
                result->InsertExpressionKeyFrame(0.034201853F, "(Pow(1 - _.t151, 3) * Vector2(39.625,37.75)) + (3 * Square(1 - _.t151) * _.t151 * Vector2(39.5,37.6458321)) + (3 * (1 - _.t151) * Square(_.t151) * Vector2(38.7708321,37.2708321)) + (Pow(_.t151, 3) * Vector2(38.875,37.125))", _stepEasingFunction_000);
                result->InsertExpressionKeyFrame(0.0749184638F, "(Pow(1 - _.t151, 3) * Vector2(38.875,37.125)) + (3 * Square(1 - _.t151) * _.t151 * Vector2(38.9791679,36.9791679)) + (3 * (1 - _.t151) * Square(_.t151) * Vector2(40.2291679,36.7708321)) + (Pow(_.t151, 3) * Vector2(40.25,36.875))", _stepEasingFunction_000);
                result->InsertExpressionKeyFrame(0.110749088F, "(Pow(1 - _.t151, 3) * Vector2(40.25,36.875)) + (3 * Square(1 - _.t151) * _.t151 * Vector2(40.2708321,36.9791679)) + (3 * (1 - _.t151) * Square(_.t151) * Vector2(39.2083321,37.6041679)) + (Pow(_.t151, 3) * Vector2(39,37.75))", _stepEasingFunction_000);
                result->InsertKeyFrame(0.110749185F, { 39, 37.75F }, _stepEasingFunction_000);
                result->InsertKeyFrame(0.149837136F, { 39, 37.75F }, _cubicBezierEasingFunction_009);
                result->InsertKeyFrame(0.197068408F, { 39, 43 }, _cubicBezierEasingFunction_006);
                return result;
            }

            Vector2KeyFrameAnimation^ Vector2Animation_022()
            {
                auto result = _vector2Animation_022 = _c->CreateVector2KeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { 0.751999974F, 0.751999974F }, _linearEasingFunction);
                result->InsertKeyFrame(0.149837136F, { 0.751999974F, 0.751999974F }, _linearEasingFunction);
                result->InsertKeyFrame(0.197068408F, { 1, 1 }, _cubicBezierEasingFunction_006);
                return result;
            }

            // 'PhonePic01 InApp'.AncestorTransformFrom_GoldenGate
            Vector2KeyFrameAnimation^ Vector2Animation_023()
            {
                auto result = _c->CreateVector2KeyFrameAnimation();
                result->SetReferenceParameter("_", _root);
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { -134.5F, 154 }, _linearEasingFunction);
                result->InsertKeyFrame(0.208469048F, { -134.5F, 154 }, _linearEasingFunction);
                result->InsertExpressionKeyFrame(0.320846796F, "(Pow(1 - _.t149, 3) * Vector2((-134.5),154)) + (3 * Square(1 - _.t149) * _.t149 * Vector2((-10.6666641),162.166672)) + (3 * (1 - _.t149) * Square(_.t149) * Vector2(162.666656,147.833328)) + (Pow(_.t149, 3) * Vector2(272.5,125))", _stepEasingFunction_000);
                result->InsertKeyFrame(0.320846885F, { 272.5F, 125 }, _stepEasingFunction_000);
                result->InsertKeyFrame(0.913680792F, { 272.5F, 125 }, _stepEasingFunction_001);
                result->InsertKeyFrame(0.985342026F, { 603.5F, 125 }, _cubicBezierEasingFunction_002);
                return result;
            }

            // 'ScreenOutlineCoverup'.AncestorTransformFrom_LaptopNull
            Vector2KeyFrameAnimation^ Vector2Animation_024()
            {
                auto result = _c->CreateVector2KeyFrameAnimation();
                result->SetReferenceParameter("_", _root);
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { -134.5F, 154 }, _linearEasingFunction);
                result->InsertKeyFrame(0.208469048F, { -134.5F, 154 }, _linearEasingFunction);
                result->InsertExpressionKeyFrame(0.320846796F, "(Pow(1 - _.t152, 3) * Vector2((-134.5),154)) + (3 * Square(1 - _.t152) * _.t152 * Vector2((-10.6666641),162.166672)) + (3 * (1 - _.t152) * Square(_.t152) * Vector2(162.666656,147.833328)) + (Pow(_.t152, 3) * Vector2(272.5,125))", _stepEasingFunction_000);
                result->InsertKeyFrame(0.320846885F, { 272.5F, 125 }, _stepEasingFunction_000);
                result->InsertKeyFrame(0.913680792F, { 272.5F, 125 }, _stepEasingFunction_001);
                result->InsertKeyFrame(0.985342026F, { 603.5F, 125 }, _cubicBezierEasingFunction_002);
                return result;
            }

            // 'LaptopBottom'.AncestorTransformFrom_LaptopNull
            Vector2KeyFrameAnimation^ Vector2Animation_025()
            {
                auto result = _c->CreateVector2KeyFrameAnimation();
                result->SetReferenceParameter("_", _root);
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { -134.5F, 154 }, _linearEasingFunction);
                result->InsertKeyFrame(0.208469048F, { -134.5F, 154 }, _linearEasingFunction);
                result->InsertExpressionKeyFrame(0.320846796F, "(Pow(1 - _.t153, 3) * Vector2((-134.5),154)) + (3 * Square(1 - _.t153) * _.t153 * Vector2((-10.6666641),162.166672)) + (3 * (1 - _.t153) * Square(_.t153) * Vector2(162.666656,147.833328)) + (Pow(_.t153, 3) * Vector2(272.5,125))", _stepEasingFunction_000);
                result->InsertKeyFrame(0.320846885F, { 272.5F, 125 }, _stepEasingFunction_000);
                result->InsertKeyFrame(0.913680792F, { 272.5F, 125 }, _stepEasingFunction_001);
                result->InsertKeyFrame(0.985342026F, { 603.5F, 125 }, _cubicBezierEasingFunction_002);
                return result;
            }

            // 'Cat'.Transforms
            Vector2KeyFrameAnimation^ Vector2Animation_026()
            {
                auto result = _c->CreateVector2KeyFrameAnimation();
                result->SetReferenceParameter("_", _root);
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { 39.625F, 37.75F }, _linearEasingFunction);
                result->InsertKeyFrame(0.00162866444F, { 39.625F, 37.75F }, _linearEasingFunction);
                result->InsertExpressionKeyFrame(0.034201853F, "(Pow(1 - _.t156, 3) * Vector2(39.625,37.75)) + (3 * Square(1 - _.t156) * _.t156 * Vector2(39.5,37.6458321)) + (3 * (1 - _.t156) * Square(_.t156) * Vector2(38.7708321,37.2708321)) + (Pow(_.t156, 3) * Vector2(38.875,37.125))", _stepEasingFunction_000);
                result->InsertExpressionKeyFrame(0.0749184638F, "(Pow(1 - _.t156, 3) * Vector2(38.875,37.125)) + (3 * Square(1 - _.t156) * _.t156 * Vector2(38.9791679,36.9791679)) + (3 * (1 - _.t156) * Square(_.t156) * Vector2(40.2291679,36.7708321)) + (Pow(_.t156, 3) * Vector2(40.25,36.875))", _stepEasingFunction_000);
                result->InsertExpressionKeyFrame(0.110749088F, "(Pow(1 - _.t156, 3) * Vector2(40.25,36.875)) + (3 * Square(1 - _.t156) * _.t156 * Vector2(40.2708321,36.9791679)) + (3 * (1 - _.t156) * Square(_.t156) * Vector2(39.2083321,37.6041679)) + (Pow(_.t156, 3) * Vector2(39,37.75))", _stepEasingFunction_000);
                result->InsertKeyFrame(0.110749185F, { 39, 37.75F }, _stepEasingFunction_000);
                result->InsertKeyFrame(0.149837136F, { 39, 37.75F }, _cubicBezierEasingFunction_009);
                result->InsertKeyFrame(0.197068408F, { 39, 43 }, _cubicBezierEasingFunction_006);
                return result;
            }

            // 'PhonePic01'.AncestorTransformFrom_LaptopNull
            Vector2KeyFrameAnimation^ Vector2Animation_027()
            {
                auto result = _c->CreateVector2KeyFrameAnimation();
                result->SetReferenceParameter("_", _root);
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { -134.5F, 154 }, _linearEasingFunction);
                result->InsertKeyFrame(0.208469048F, { -134.5F, 154 }, _linearEasingFunction);
                result->InsertExpressionKeyFrame(0.320846796F, "(Pow(1 - _.t154, 3) * Vector2((-134.5),154)) + (3 * Square(1 - _.t154) * _.t154 * Vector2((-10.6666641),162.166672)) + (3 * (1 - _.t154) * Square(_.t154) * Vector2(162.666656,147.833328)) + (Pow(_.t154, 3) * Vector2(272.5,125))", _stepEasingFunction_000);
                result->InsertKeyFrame(0.320846885F, { 272.5F, 125 }, _stepEasingFunction_000);
                result->InsertKeyFrame(0.913680792F, { 272.5F, 125 }, _stepEasingFunction_001);
                result->InsertKeyFrame(0.985342026F, { 603.5F, 125 }, _cubicBezierEasingFunction_002);
                return result;
            }

            // 'Laptop'.Transforms
            Vector2KeyFrameAnimation^ Vector2Animation_028()
            {
                auto result = _c->CreateVector2KeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { 79.5F, -6 }, _linearEasingFunction);
                result->InsertKeyFrame(0.208469048F, { 79.5F, -6 }, _linearEasingFunction);
                result->InsertKeyFrame(0.320846915F, { -29.5F, -6 }, _cubicBezierEasingFunction_008);
                return result;
            }

            // 'LaptopNull'.Transforms
            Vector2KeyFrameAnimation^ Vector2Animation_029()
            {
                auto result = _c->CreateVector2KeyFrameAnimation();
                result->SetReferenceParameter("_", _root);
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { 47.3470001F, 0 }, _linearEasingFunction);
                result->InsertKeyFrame(0.319218248F, { 47.3470001F, 0 }, _linearEasingFunction);
                result->InsertKeyFrame(0.327361554F, { 47.3470001F, 3.796F }, _cubicBezierEasingFunction_008);
                result->InsertExpressionKeyFrame(0.364820749F, "(Pow(1 - _.t114, 3) * Vector2(47.3470001,3.796)) + (3 * Square(1 - _.t114) * _.t114 * Vector2(47.3470001,3.796)) + (3 * (1 - _.t114) * Square(_.t114) * Vector2(47.3470001,0.632729352)) + (Pow(_.t114, 3) * Vector2(47.3470001,0))", _stepEasingFunction_000);
                result->InsertKeyFrame(0.364820838F, { 47.3470001F, 0 }, _stepEasingFunction_000);
                result->InsertKeyFrame(0.451140076F, { 47.3470001F, 0 }, _cubicBezierEasingFunction_012);
                result->InsertExpressionKeyFrame(0.552117169F, "(Pow(1 - _.t114, 3) * Vector2(47.3470001,0)) + (3 * Square(1 - _.t114) * _.t114 * Vector2(38.3773422,5.17687654)) + (3 * (1 - _.t114) * Square(_.t114) * Vector2(5.30270338,2.80414152))", _stepEasingFunction_000);
                result->InsertKeyFrame(0.552117288F, { 0, 0 }, _stepEasingFunction_000);
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'FlashCircle'.Transforms
            //     'FlashCircle'.Contents
            //       Group: Ellipse 1
            //         Ellipse Path 1
            //           Ellipse Path 1.EllipseGeometry
            Vector2KeyFrameAnimation^ Vector2Animation_030()
            {
                auto result = _c->CreateVector2KeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { 2, 2 }, _linearEasingFunction);
                result->InsertKeyFrame(0.102605864F, { 2, 2 }, _linearEasingFunction);
                result->InsertKeyFrame(0.133550495F, { 52.5F, 52.5F }, _cubicBezierEasingFunction_008);
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            Vector2KeyFrameAnimation^ Vector2Animation_031()
            {
                auto result = _c->CreateVector2KeyFrameAnimation();
                result->SetReferenceParameter("_", _root);
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { 0, -0.063000001F }, _linearEasingFunction);
                result->InsertKeyFrame(0.162866443F, { 0, -0.063000001F }, _linearEasingFunction);
                result->InsertExpressionKeyFrame(0.325732797F, "(Pow(1 - _.t157, 3) * Vector2(0,(-0.063000001))) + (3 * Square(1 - _.t157) * _.t157 * Vector2((-39.8333321),2.44741678)) + (3 * (1 - _.t157) * Square(_.t157) * Vector2((-199.166672),12.489583)) + (Pow(_.t157, 3) * Vector2((-239),15))", _stepEasingFunction_000);
                result->InsertKeyFrame(0.325732887F, { -239, 15 }, _stepEasingFunction_000);
                return result;
            }

            Vector2KeyFrameAnimation^ Vector2Animation_032()
            {
                auto result = _vector2Animation_032 = _c->CreateVector2KeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { 1.75999999F, 1.75999999F }, _linearEasingFunction);
                result->InsertKeyFrame(0.162866443F, { 1.75999999F, 1.75999999F }, _linearEasingFunction);
                result->InsertKeyFrame(0.325732887F, { 1, 1 }, CubicBezierEasingFunction_018());
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            Vector2KeyFrameAnimation^ Vector2Animation_033()
            {
                auto result = _c->CreateVector2KeyFrameAnimation();
                result->SetReferenceParameter("_", _root);
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { 0, -0.063000001F }, _linearEasingFunction);
                result->InsertKeyFrame(0.162866443F, { 0, -0.063000001F }, _linearEasingFunction);
                result->InsertExpressionKeyFrame(0.325732797F, "(Pow(1 - _.t158, 3) * Vector2(0,(-0.063000001))) + (3 * Square(1 - _.t158) * _.t158 * Vector2((-39.8333321),2.44741678)) + (3 * (1 - _.t158) * Square(_.t158) * Vector2((-199.166672),12.489583)) + (Pow(_.t158, 3) * Vector2((-239),15))", _stepEasingFunction_000);
                result->InsertKeyFrame(0.325732887F, { -239, 15 }, _stepEasingFunction_000);
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            Vector2KeyFrameAnimation^ Vector2Animation_034()
            {
                auto result = _c->CreateVector2KeyFrameAnimation();
                result->SetReferenceParameter("_", _root);
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { 0, -0.063000001F }, _linearEasingFunction);
                result->InsertKeyFrame(0.162866443F, { 0, -0.063000001F }, _linearEasingFunction);
                result->InsertExpressionKeyFrame(0.325732797F, "(Pow(1 - _.t159, 3) * Vector2(0,(-0.063000001))) + (3 * Square(1 - _.t159) * _.t159 * Vector2((-39.8333321),2.44741678)) + (3 * (1 - _.t159) * Square(_.t159) * Vector2((-199.166672),12.489583)) + (Pow(_.t159, 3) * Vector2((-239),15))", _stepEasingFunction_000);
                result->InsertKeyFrame(0.325732887F, { -239, 15 }, _stepEasingFunction_000);
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            Vector2KeyFrameAnimation^ Vector2Animation_035()
            {
                auto result = _c->CreateVector2KeyFrameAnimation();
                result->SetReferenceParameter("_", _root);
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { 0, -0.063000001F }, _linearEasingFunction);
                result->InsertKeyFrame(0.162866443F, { 0, -0.063000001F }, _linearEasingFunction);
                result->InsertExpressionKeyFrame(0.325732797F, "(Pow(1 - _.t160, 3) * Vector2(0,(-0.063000001))) + (3 * Square(1 - _.t160) * _.t160 * Vector2((-39.8333321),2.44741678)) + (3 * (1 - _.t160) * Square(_.t160) * Vector2((-199.166672),12.489583)) + (Pow(_.t160, 3) * Vector2((-239),15))", _stepEasingFunction_000);
                result->InsertKeyFrame(0.325732887F, { -239, 15 }, _stepEasingFunction_000);
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            Vector2KeyFrameAnimation^ Vector2Animation_036()
            {
                auto result = _c->CreateVector2KeyFrameAnimation();
                result->SetReferenceParameter("_", _root);
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { 0, -0.063000001F }, _linearEasingFunction);
                result->InsertKeyFrame(0.162866443F, { 0, -0.063000001F }, _linearEasingFunction);
                result->InsertExpressionKeyFrame(0.325732797F, "(Pow(1 - _.t161, 3) * Vector2(0,(-0.063000001))) + (3 * Square(1 - _.t161) * _.t161 * Vector2((-39.8333321),2.44741678)) + (3 * (1 - _.t161) * Square(_.t161) * Vector2((-199.166672),12.489583)) + (Pow(_.t161, 3) * Vector2((-239),15))", _stepEasingFunction_000);
                result->InsertKeyFrame(0.325732887F, { -239, 15 }, _stepEasingFunction_000);
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            Vector2KeyFrameAnimation^ Vector2Animation_037()
            {
                auto result = _c->CreateVector2KeyFrameAnimation();
                result->SetReferenceParameter("_", _root);
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { 0, -0.063000001F }, _linearEasingFunction);
                result->InsertKeyFrame(0.162866443F, { 0, -0.063000001F }, _linearEasingFunction);
                result->InsertExpressionKeyFrame(0.325732797F, "(Pow(1 - _.t162, 3) * Vector2(0,(-0.063000001))) + (3 * Square(1 - _.t162) * _.t162 * Vector2((-39.8333321),2.44741678)) + (3 * (1 - _.t162) * Square(_.t162) * Vector2((-199.166672),12.489583)) + (Pow(_.t162, 3) * Vector2((-239),15))", _stepEasingFunction_000);
                result->InsertKeyFrame(0.325732887F, { -239, 15 }, _stepEasingFunction_000);
                return result;
            }

            // 'PicShadow'.Transforms
            Vector2KeyFrameAnimation^ Vector2Animation_038()
            {
                auto result = _c->CreateVector2KeyFrameAnimation();
                result->SetReferenceParameter("_", _root);
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { 33.8499985F, 33.8849983F }, _linearEasingFunction);
                result->InsertKeyFrame(0.640065134F, { 33.8499985F, 33.8849983F }, _linearEasingFunction);
                result->InsertExpressionKeyFrame(0.654723048F, "(Pow(1 - _.t163, 3) * Vector2(33.8499985,33.8849983)) + (3 * Square(1 - _.t163) * _.t163 * Vector2(34.9337349,35.0046883)) + (3 * (1 - _.t163) * Square(_.t163) * Vector2(39.2682648,39.4833107)) + (Pow(_.t163, 3) * Vector2(40.3520012,40.6030006))", _stepEasingFunction_000);
                result->InsertKeyFrame(0.654723167F, { 40.3520012F, 40.6030006F }, _stepEasingFunction_000);
                result->InsertKeyFrame(0.745928347F, { 40.3520012F, 40.6030006F }, CubicBezierEasingFunction_020());
                result->InsertExpressionKeyFrame(0.780130208F, "(Pow(1 - _.t163, 3) * Vector2(40.3520012,40.6030006)) + (3 * Square(1 - _.t163) * _.t163 * Vector2(39.2682648,39.4833107)) + (3 * (1 - _.t163) * Square(_.t163) * Vector2(34.9337349,35.0046883)) + (Pow(_.t163, 3) * Vector2(33.8499985,33.8849983))", _stepEasingFunction_000);
                result->InsertKeyFrame(0.780130327F, { 33.8499985F, 33.8849983F }, _stepEasingFunction_000);
                return result;
            }

            // 'PhonePic01'.Transforms
            Vector2KeyFrameAnimation^ Vector2Animation_039()
            {
                auto result = _c->CreateVector2KeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { 1.76168001F, 1.76168001F }, _linearEasingFunction);
                result->InsertKeyFrame(0.185667753F, { 1.76168001F, 1.76168001F }, _linearEasingFunction);
                result->InsertKeyFrame(0.242671013F, { 1.88917005F, 1.88917005F }, CubicBezierEasingFunction_024());
                result->InsertKeyFrame(0.320846915F, { 1.15900004F, 1.15900004F }, CubicBezierEasingFunction_025());
                return result;
            }

            // 'PhonePic01 Null'.Transforms
            Vector2KeyFrameAnimation^ Vector2Animation_040()
            {
                auto result = _c->CreateVector2KeyFrameAnimation();
                result->SetReferenceParameter("_", _root);
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { 3.5F, -23 }, _linearEasingFunction);
                result->InsertKeyFrame(0.745928347F, { 3.5F, -23 }, _linearEasingFunction);
                result->InsertExpressionKeyFrame(0.780130208F, "(Pow(1 - _.t164, 3) * Vector2(3.5,(-23))) + (3 * Square(1 - _.t164) * _.t164 * Vector2(5.26388884,(-24.7361107))) + (3 * (1 - _.t164) * Square(_.t164) * Vector2(12.3191109,(-31.6808891))) + (Pow(_.t164, 3) * Vector2(14.0830002,(-33.4169998)))", _stepEasingFunction_000);
                result->InsertKeyFrame(0.780130327F, { 14.0830002F, -33.4169998F }, _stepEasingFunction_000);
                return result;
            }

            // 'PhonePic01 Null'.Transforms
            Vector2KeyFrameAnimation^ Vector2Animation_041()
            {
                auto result = _c->CreateVector2KeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { 1, 1 }, _linearEasingFunction);
                result->InsertKeyFrame(0.640065134F, { 1, 1 }, _linearEasingFunction);
                result->InsertKeyFrame(0.654723108F, { 1.23874998F, 1.23874998F }, _cubicBezierEasingFunction_008);
                result->InsertKeyFrame(0.745928347F, { 1.23874998F, 1.23874998F }, _cubicBezierEasingFunction_004);
                result->InsertKeyFrame(0.780130267F, { 0.689999998F, 0.689999998F }, _cubicBezierEasingFunction_006);
                return result;
            }

            // 'CursorPic Null'.Transforms
            Vector2KeyFrameAnimation^ Vector2Animation_042()
            {
                auto result = _c->CreateVector2KeyFrameAnimation();
                result->SetReferenceParameter("_", _root);
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { -0.108000003F, 0 }, _linearEasingFunction);
                result->InsertKeyFrame(0.653094471F, { -0.108000003F, 0 }, _linearEasingFunction);
                result->InsertExpressionKeyFrame(0.741042256F, "(Pow(1 - _.t165, 3) * Vector2((-0.108000003),0)) + (3 * Square(1 - _.t165) * _.t165 * Vector2(21.7499237,(-4.38596487))) + (3 * (1 - _.t165) * Square(_.t165) * Vector2(82.65065,(-8.55672455))) + (Pow(_.t165, 3) * Vector2(112.920998,(-6.90299988)))", _stepEasingFunction_000);
                result->InsertKeyFrame(0.741042376F, { 112.920998F, -6.90299988F }, _stepEasingFunction_000);
                return result;
            }

            // 'LaptopNull'.Transforms
            Vector2KeyFrameAnimation^ Vector2Animation_043()
            {
                auto result = _c->CreateVector2KeyFrameAnimation();
                result->SetReferenceParameter("_", _root);
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { 47.3470001F, 0 }, _linearEasingFunction);
                result->InsertKeyFrame(0.319218248F, { 47.3470001F, 0 }, _linearEasingFunction);
                result->InsertKeyFrame(0.327361554F, { 47.3470001F, 3.796F }, _cubicBezierEasingFunction_008);
                result->InsertExpressionKeyFrame(0.364820749F, "(Pow(1 - _.t166, 3) * Vector2(47.3470001,3.796)) + (3 * Square(1 - _.t166) * _.t166 * Vector2(47.3470001,3.796)) + (3 * (1 - _.t166) * Square(_.t166) * Vector2(47.3470001,0.632729352)) + (Pow(_.t166, 3) * Vector2(47.3470001,0))", _stepEasingFunction_000);
                result->InsertKeyFrame(0.364820838F, { 47.3470001F, 0 }, _stepEasingFunction_000);
                result->InsertKeyFrame(0.451140076F, { 47.3470001F, 0 }, _cubicBezierEasingFunction_012);
                result->InsertExpressionKeyFrame(0.552117169F, "(Pow(1 - _.t166, 3) * Vector2(47.3470001,0)) + (3 * Square(1 - _.t166) * _.t166 * Vector2(38.3773422,5.17687654)) + (3 * (1 - _.t166) * Square(_.t166) * Vector2(5.30270338,2.80414152))", _stepEasingFunction_000);
                result->InsertKeyFrame(0.552117288F, { 0, 0 }, _stepEasingFunction_000);
                return result;
            }

            // 'Cat'.Transforms
            Vector2KeyFrameAnimation^ Vector2Animation_044()
            {
                auto result = _c->CreateVector2KeyFrameAnimation();
                result->SetReferenceParameter("_", _root);
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { 39.625F, 37.75F }, _linearEasingFunction);
                result->InsertKeyFrame(0.00162866444F, { 39.625F, 37.75F }, _linearEasingFunction);
                result->InsertExpressionKeyFrame(0.034201853F, "(Pow(1 - _.t171, 3) * Vector2(39.625,37.75)) + (3 * Square(1 - _.t171) * _.t171 * Vector2(39.5,37.6458321)) + (3 * (1 - _.t171) * Square(_.t171) * Vector2(38.7708321,37.2708321)) + (Pow(_.t171, 3) * Vector2(38.875,37.125))", _stepEasingFunction_000);
                result->InsertExpressionKeyFrame(0.0749184638F, "(Pow(1 - _.t171, 3) * Vector2(38.875,37.125)) + (3 * Square(1 - _.t171) * _.t171 * Vector2(38.9791679,36.9791679)) + (3 * (1 - _.t171) * Square(_.t171) * Vector2(40.2291679,36.7708321)) + (Pow(_.t171, 3) * Vector2(40.25,36.875))", _stepEasingFunction_000);
                result->InsertExpressionKeyFrame(0.110749088F, "(Pow(1 - _.t171, 3) * Vector2(40.25,36.875)) + (3 * Square(1 - _.t171) * _.t171 * Vector2(40.2708321,36.9791679)) + (3 * (1 - _.t171) * Square(_.t171) * Vector2(39.2083321,37.6041679)) + (Pow(_.t171, 3) * Vector2(39,37.75))", _stepEasingFunction_000);
                result->InsertKeyFrame(0.110749185F, { 39, 37.75F }, _stepEasingFunction_000);
                result->InsertKeyFrame(0.149837136F, { 39, 37.75F }, _cubicBezierEasingFunction_009);
                result->InsertKeyFrame(0.197068408F, { 39, 43 }, _cubicBezierEasingFunction_006);
                return result;
            }

            // 'PhonePic01 Null'.Transforms
            Vector2KeyFrameAnimation^ Vector2Animation_045()
            {
                auto result = _c->CreateVector2KeyFrameAnimation();
                result->SetReferenceParameter("_", _root);
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { 3.5F, -23 }, _linearEasingFunction);
                result->InsertKeyFrame(0.745928347F, { 3.5F, -23 }, _linearEasingFunction);
                result->InsertExpressionKeyFrame(0.780130208F, "(Pow(1 - _.t167, 3) * Vector2(3.5,(-23))) + (3 * Square(1 - _.t167) * _.t167 * Vector2(5.26388884,(-24.7361107))) + (3 * (1 - _.t167) * Square(_.t167) * Vector2(12.3191109,(-31.6808891))) + (Pow(_.t167, 3) * Vector2(14.0830002,(-33.4169998)))", _stepEasingFunction_000);
                result->InsertKeyFrame(0.780130327F, { 14.0830002F, -33.4169998F }, _stepEasingFunction_000);
                return result;
            }

            // 'CursorPic Null'.Transforms
            Vector2KeyFrameAnimation^ Vector2Animation_046()
            {
                auto result = _c->CreateVector2KeyFrameAnimation();
                result->SetReferenceParameter("_", _root);
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { -0.108000003F, 0 }, _linearEasingFunction);
                result->InsertKeyFrame(0.653094471F, { -0.108000003F, 0 }, _linearEasingFunction);
                result->InsertExpressionKeyFrame(0.741042256F, "(Pow(1 - _.t168, 3) * Vector2((-0.108000003),0)) + (3 * Square(1 - _.t168) * _.t168 * Vector2(21.7499237,(-4.38596487))) + (3 * (1 - _.t168) * Square(_.t168) * Vector2(82.65065,(-8.55672455))) + (Pow(_.t168, 3) * Vector2(112.920998,(-6.90299988)))", _stepEasingFunction_000);
                result->InsertKeyFrame(0.741042376F, { 112.920998F, -6.90299988F }, _stepEasingFunction_000);
                return result;
            }

            // 'LaptopNull'.Transforms
            Vector2KeyFrameAnimation^ Vector2Animation_047()
            {
                auto result = _c->CreateVector2KeyFrameAnimation();
                result->SetReferenceParameter("_", _root);
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { 47.3470001F, 0 }, _linearEasingFunction);
                result->InsertKeyFrame(0.319218248F, { 47.3470001F, 0 }, _linearEasingFunction);
                result->InsertKeyFrame(0.327361554F, { 47.3470001F, 3.796F }, _cubicBezierEasingFunction_008);
                result->InsertExpressionKeyFrame(0.364820749F, "(Pow(1 - _.t169, 3) * Vector2(47.3470001,3.796)) + (3 * Square(1 - _.t169) * _.t169 * Vector2(47.3470001,3.796)) + (3 * (1 - _.t169) * Square(_.t169) * Vector2(47.3470001,0.632729352)) + (Pow(_.t169, 3) * Vector2(47.3470001,0))", _stepEasingFunction_000);
                result->InsertKeyFrame(0.364820838F, { 47.3470001F, 0 }, _stepEasingFunction_000);
                result->InsertKeyFrame(0.451140076F, { 47.3470001F, 0 }, _cubicBezierEasingFunction_012);
                result->InsertExpressionKeyFrame(0.552117169F, "(Pow(1 - _.t169, 3) * Vector2(47.3470001,0)) + (3 * Square(1 - _.t169) * _.t169 * Vector2(38.3773422,5.17687654)) + (3 * (1 - _.t169) * Square(_.t169) * Vector2(5.30270338,2.80414152))", _stepEasingFunction_000);
                result->InsertKeyFrame(0.552117288F, { 0, 0 }, _stepEasingFunction_000);
                return result;
            }

            // 'Cursor 2'.Transforms
            Vector2KeyFrameAnimation^ Vector2Animation_048()
            {
                auto result = _c->CreateVector2KeyFrameAnimation();
                result->SetReferenceParameter("_", _root);
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { 133.261993F, -87.25F }, _linearEasingFunction);
                result->InsertKeyFrame(0.508143306F, { 133.261993F, -87.25F }, _linearEasingFunction);
                result->InsertExpressionKeyFrame(0.63680774F, "(Pow(1 - _.t172, 3) * Vector2(133.261993,(-87.25))) + (3 * Square(1 - _.t172) * _.t172 * Vector2(450.92865,(-63.25))) + (3 * (1 - _.t172) * Square(_.t172) * Vector2(174.928665,202.416672)) + (Pow(_.t172, 3) * Vector2(4.26200008,(-23.25)))", _stepEasingFunction_000);
                result->InsertKeyFrame(0.636807859F, { 4.26200008F, -23.25F }, _stepEasingFunction_000);
                return result;
            }

            // 'CursorPic Null'.Transforms
            Vector2KeyFrameAnimation^ Vector2Animation_049()
            {
                auto result = _c->CreateVector2KeyFrameAnimation();
                result->SetReferenceParameter("_", _root);
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { -0.108000003F, 0 }, _linearEasingFunction);
                result->InsertKeyFrame(0.653094471F, { -0.108000003F, 0 }, _linearEasingFunction);
                result->InsertExpressionKeyFrame(0.741042256F, "(Pow(1 - _.t173, 3) * Vector2((-0.108000003),0)) + (3 * Square(1 - _.t173) * _.t173 * Vector2(21.7499237,(-4.38596487))) + (3 * (1 - _.t173) * Square(_.t173) * Vector2(82.65065,(-8.55672455))) + (Pow(_.t173, 3) * Vector2(112.920998,(-6.90299988)))", _stepEasingFunction_000);
                result->InsertKeyFrame(0.741042376F, { 112.920998F, -6.90299988F }, _stepEasingFunction_000);
                return result;
            }

            // 'LaptopNull'.Transforms
            Vector2KeyFrameAnimation^ Vector2Animation_050()
            {
                auto result = _c->CreateVector2KeyFrameAnimation();
                result->SetReferenceParameter("_", _root);
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { 47.3470001F, 0 }, _linearEasingFunction);
                result->InsertKeyFrame(0.319218248F, { 47.3470001F, 0 }, _linearEasingFunction);
                result->InsertKeyFrame(0.327361554F, { 47.3470001F, 3.796F }, _cubicBezierEasingFunction_008);
                result->InsertExpressionKeyFrame(0.364820749F, "(Pow(1 - _.t174, 3) * Vector2(47.3470001,3.796)) + (3 * Square(1 - _.t174) * _.t174 * Vector2(47.3470001,3.796)) + (3 * (1 - _.t174) * Square(_.t174) * Vector2(47.3470001,0.632729352)) + (Pow(_.t174, 3) * Vector2(47.3470001,0))", _stepEasingFunction_000);
                result->InsertKeyFrame(0.364820838F, { 47.3470001F, 0 }, _stepEasingFunction_000);
                result->InsertKeyFrame(0.451140076F, { 47.3470001F, 0 }, _cubicBezierEasingFunction_012);
                result->InsertExpressionKeyFrame(0.552117169F, "(Pow(1 - _.t174, 3) * Vector2(47.3470001,0)) + (3 * Square(1 - _.t174) * _.t174 * Vector2(38.3773422,5.17687654)) + (3 * (1 - _.t174) * Square(_.t174) * Vector2(5.30270338,2.80414152))", _stepEasingFunction_000);
                result->InsertKeyFrame(0.552117288F, { 0, 0 }, _stepEasingFunction_000);
                return result;
            }

            // 'Cat'.Contents
            Vector2KeyFrameAnimation^ Vector2Animation_051()
            {
                auto result = _c->CreateVector2KeyFrameAnimation();
                result->SetReferenceParameter("_", _root);
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { 39.625F, 37.75F }, _linearEasingFunction);
                result->InsertExpressionKeyFrame(0.0325731896F, "(Pow(1 - _.t182, 3) * Vector2(39.625,37.75)) + (3 * Square(1 - _.t182) * _.t182 * Vector2(39.5,37.6458321)) + (3 * (1 - _.t182) * Square(_.t182) * Vector2(38.7708321,37.2708321)) + (Pow(_.t182, 3) * Vector2(38.875,37.125))", _stepEasingFunction_000);
                result->InsertExpressionKeyFrame(0.0732898042F, "(Pow(1 - _.t182, 3) * Vector2(38.875,37.125)) + (3 * Square(1 - _.t182) * _.t182 * Vector2(38.9791679,36.9791679)) + (3 * (1 - _.t182) * Square(_.t182) * Vector2(40.2291679,36.7708321)) + (Pow(_.t182, 3) * Vector2(40.25,36.875))", _stepEasingFunction_000);
                result->InsertExpressionKeyFrame(0.109120421F, "(Pow(1 - _.t182, 3) * Vector2(40.25,36.875)) + (3 * Square(1 - _.t182) * _.t182 * Vector2(40.2708321,36.9791679)) + (3 * (1 - _.t182) * Square(_.t182) * Vector2(39.2083321,37.6041679)) + (Pow(_.t182, 3) * Vector2(39,37.75))", _stepEasingFunction_000);
                result->InsertKeyFrame(0.109120518F, { 39, 37.75F }, _stepEasingFunction_000);
                result->InsertKeyFrame(0.148208469F, { 39, 37.75F }, _cubicBezierEasingFunction_009);
                result->InsertKeyFrame(0.195439741F, { 39, 43 }, _cubicBezierEasingFunction_006);
                return result;
            }

            // 'PhonePic01'.Contents
            Vector2KeyFrameAnimation^ Vector2Animation_052()
            {
                auto result = _c->CreateVector2KeyFrameAnimation();
                result->SetReferenceParameter("_", _root);
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { 36.7999992F, 60.0999985F }, _linearEasingFunction);
                result->InsertKeyFrame(0.148208469F, { 36.7999992F, 60.0999985F }, _linearEasingFunction);
                result->InsertExpressionKeyFrame(0.195439637F, "(Pow(1 - _.t180, 3) * Vector2(36.7999992,60.0999985)) + (3 * Square(1 - _.t180) * _.t180 * Vector2(37,56.4166641)) + (3 * (1 - _.t180) * Square(_.t180) * Vector2(37.7999992,41.6833344)) + (Pow(_.t180, 3) * Vector2(38,38))", _stepEasingFunction_000);
                result->InsertKeyFrame(0.195439741F, { 38, 38 }, _stepEasingFunction_000);
                return result;
            }

            // 'Cat'.Transforms
            Vector2KeyFrameAnimation^ Vector2Animation_053()
            {
                auto result = _c->CreateVector2KeyFrameAnimation();
                result->SetReferenceParameter("_", _root);
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { 39.625F, 37.75F }, _linearEasingFunction);
                result->InsertKeyFrame(0.85830617F, { 39.625F, 37.75F }, _linearEasingFunction);
                result->InsertExpressionKeyFrame(0.890879393F, "(Pow(1 - _.t184, 3) * Vector2(39.625,37.75)) + (3 * Square(1 - _.t184) * _.t184 * Vector2(39.5,37.6458321)) + (3 * (1 - _.t184) * Square(_.t184) * Vector2(38.7708321,37.2708321)) + (Pow(_.t184, 3) * Vector2(38.875,37.125))", _stepEasingFunction_000);
                result->InsertExpressionKeyFrame(0.931595981F, "(Pow(1 - _.t184, 3) * Vector2(38.875,37.125)) + (3 * Square(1 - _.t184) * _.t184 * Vector2(38.9791679,36.9791679)) + (3 * (1 - _.t184) * Square(_.t184) * Vector2(40.2291679,36.7708321)) + (Pow(_.t184, 3) * Vector2(40.25,36.875))", _stepEasingFunction_000);
                result->InsertExpressionKeyFrame(0.967426598F, "(Pow(1 - _.t184, 3) * Vector2(40.25,36.875)) + (3 * Square(1 - _.t184) * _.t184 * Vector2(40.2708321,36.9791679)) + (3 * (1 - _.t184) * Square(_.t184) * Vector2(39.1041679,37.6041679)) + (Pow(_.t184, 3) * Vector2(39,37.75))", _stepEasingFunction_000);
                result->InsertExpressionKeyFrame(0.999999881F, "(Pow(1 - _.t184, 3) * Vector2(39,37.75)) + (3 * Square(1 - _.t184) * _.t184 * Vector2(38.8958321,37.8958321)) + (3 * (1 - _.t184) * Square(_.t184) * Vector2(39.6458321,37.8541679)) + (Pow(_.t184, 3) * Vector2(39.625,37.75))", _stepEasingFunction_000);
                result->InsertKeyFrame(1, { 39.625F, 37.75F }, _stepEasingFunction_000);
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            Vector2KeyFrameAnimation^ Vector2Animation_054()
            {
                auto result = _c->CreateVector2KeyFrameAnimation();
                result->SetReferenceParameter("_", _root);
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { 0, -0.063000001F }, _linearEasingFunction);
                result->InsertKeyFrame(0.162866443F, { 0, -0.063000001F }, _linearEasingFunction);
                result->InsertExpressionKeyFrame(0.325732797F, "(Pow(1 - _.t185, 3) * Vector2(0,(-0.063000001))) + (3 * Square(1 - _.t185) * _.t185 * Vector2((-39.8333321),2.44741678)) + (3 * (1 - _.t185) * Square(_.t185) * Vector2((-199.166672),12.489583)) + (Pow(_.t185, 3) * Vector2((-239),15))", _stepEasingFunction_000);
                result->InsertKeyFrame(0.325732887F, { -239, 15 }, _stepEasingFunction_000);
                return result;
            }

            // 'Cat'.Contents
            Vector2KeyFrameAnimation^ Vector2Animation_055()
            {
                auto result = _c->CreateVector2KeyFrameAnimation();
                result->SetReferenceParameter("_", _root);
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { 39.625F, 37.75F }, _linearEasingFunction);
                result->InsertExpressionKeyFrame(0.0325731896F, "(Pow(1 - _.t194, 3) * Vector2(39.625,37.75)) + (3 * Square(1 - _.t194) * _.t194 * Vector2(39.5,37.6458321)) + (3 * (1 - _.t194) * Square(_.t194) * Vector2(38.7708321,37.2708321)) + (Pow(_.t194, 3) * Vector2(38.875,37.125))", _stepEasingFunction_000);
                result->InsertExpressionKeyFrame(0.0732898042F, "(Pow(1 - _.t194, 3) * Vector2(38.875,37.125)) + (3 * Square(1 - _.t194) * _.t194 * Vector2(38.9791679,36.9791679)) + (3 * (1 - _.t194) * Square(_.t194) * Vector2(40.2291679,36.7708321)) + (Pow(_.t194, 3) * Vector2(40.25,36.875))", _stepEasingFunction_000);
                result->InsertExpressionKeyFrame(0.109120421F, "(Pow(1 - _.t194, 3) * Vector2(40.25,36.875)) + (3 * Square(1 - _.t194) * _.t194 * Vector2(40.2708321,36.9791679)) + (3 * (1 - _.t194) * Square(_.t194) * Vector2(39.2083321,37.6041679)) + (Pow(_.t194, 3) * Vector2(39,37.75))", _stepEasingFunction_000);
                result->InsertKeyFrame(0.109120518F, { 39, 37.75F }, _stepEasingFunction_000);
                result->InsertKeyFrame(0.148208469F, { 39, 37.75F }, _cubicBezierEasingFunction_009);
                result->InsertKeyFrame(0.195439741F, { 39, 43 }, _cubicBezierEasingFunction_006);
                return result;
            }

            // 'PhonePic01'.Contents
            Vector2KeyFrameAnimation^ Vector2Animation_056()
            {
                auto result = _c->CreateVector2KeyFrameAnimation();
                result->SetReferenceParameter("_", _root);
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { 36.7999992F, 60.0999985F }, _linearEasingFunction);
                result->InsertKeyFrame(0.148208469F, { 36.7999992F, 60.0999985F }, _linearEasingFunction);
                result->InsertExpressionKeyFrame(0.195439637F, "(Pow(1 - _.t192, 3) * Vector2(36.7999992,60.0999985)) + (3 * Square(1 - _.t192) * _.t192 * Vector2(37,56.4166641)) + (3 * (1 - _.t192) * Square(_.t192) * Vector2(37.7999992,41.6833344)) + (Pow(_.t192, 3) * Vector2(38,38))", _stepEasingFunction_000);
                result->InsertKeyFrame(0.195439741F, { 38, 38 }, _stepEasingFunction_000);
                return result;
            }

            // 'Cat'.Transforms
            Vector2KeyFrameAnimation^ Vector2Animation_057()
            {
                auto result = _c->CreateVector2KeyFrameAnimation();
                result->SetReferenceParameter("_", _root);
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { 39.625F, 37.75F }, _linearEasingFunction);
                result->InsertKeyFrame(0.85830617F, { 39.625F, 37.75F }, _linearEasingFunction);
                result->InsertExpressionKeyFrame(0.890879393F, "(Pow(1 - _.t196, 3) * Vector2(39.625,37.75)) + (3 * Square(1 - _.t196) * _.t196 * Vector2(39.5,37.6458321)) + (3 * (1 - _.t196) * Square(_.t196) * Vector2(38.7708321,37.2708321)) + (Pow(_.t196, 3) * Vector2(38.875,37.125))", _stepEasingFunction_000);
                result->InsertExpressionKeyFrame(0.931595981F, "(Pow(1 - _.t196, 3) * Vector2(38.875,37.125)) + (3 * Square(1 - _.t196) * _.t196 * Vector2(38.9791679,36.9791679)) + (3 * (1 - _.t196) * Square(_.t196) * Vector2(40.2291679,36.7708321)) + (Pow(_.t196, 3) * Vector2(40.25,36.875))", _stepEasingFunction_000);
                result->InsertExpressionKeyFrame(0.967426598F, "(Pow(1 - _.t196, 3) * Vector2(40.25,36.875)) + (3 * Square(1 - _.t196) * _.t196 * Vector2(40.2708321,36.9791679)) + (3 * (1 - _.t196) * Square(_.t196) * Vector2(39.1041679,37.6041679)) + (Pow(_.t196, 3) * Vector2(39,37.75))", _stepEasingFunction_000);
                result->InsertExpressionKeyFrame(0.999999881F, "(Pow(1 - _.t196, 3) * Vector2(39,37.75)) + (3 * Square(1 - _.t196) * _.t196 * Vector2(38.8958321,37.8958321)) + (3 * (1 - _.t196) * Square(_.t196) * Vector2(39.6458321,37.8541679)) + (Pow(_.t196, 3) * Vector2(39.625,37.75))", _stepEasingFunction_000);
                result->InsertKeyFrame(1, { 39.625F, 37.75F }, _stepEasingFunction_000);
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            Vector2KeyFrameAnimation^ Vector2Animation_058()
            {
                auto result = _c->CreateVector2KeyFrameAnimation();
                result->SetReferenceParameter("_", _root);
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { 0, -0.063000001F }, _linearEasingFunction);
                result->InsertKeyFrame(0.162866443F, { 0, -0.063000001F }, _linearEasingFunction);
                result->InsertExpressionKeyFrame(0.325732797F, "(Pow(1 - _.t186, 3) * Vector2(0,(-0.063000001))) + (3 * Square(1 - _.t186) * _.t186 * Vector2((-39.8333321),2.44741678)) + (3 * (1 - _.t186) * Square(_.t186) * Vector2((-199.166672),12.489583)) + (Pow(_.t186, 3) * Vector2((-239),15))", _stepEasingFunction_000);
                result->InsertKeyFrame(0.325732887F, { -239, 15 }, _stepEasingFunction_000);
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            Vector2KeyFrameAnimation^ Vector2Animation_059()
            {
                auto result = _c->CreateVector2KeyFrameAnimation();
                result->SetReferenceParameter("_", _root);
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { 0, -0.063000001F }, _linearEasingFunction);
                result->InsertKeyFrame(0.162866443F, { 0, -0.063000001F }, _linearEasingFunction);
                result->InsertExpressionKeyFrame(0.325732797F, "(Pow(1 - _.t197, 3) * Vector2(0,(-0.063000001))) + (3 * Square(1 - _.t197) * _.t197 * Vector2((-39.8333321),2.44741678)) + (3 * (1 - _.t197) * Square(_.t197) * Vector2((-199.166672),12.489583)) + (Pow(_.t197, 3) * Vector2((-239),15))", _stepEasingFunction_000);
                result->InsertKeyFrame(0.325732887F, { -239, 15 }, _stepEasingFunction_000);
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'CamButtonFill'.Transforms
            Vector2KeyFrameAnimation^ Vector2Animation_060()
            {
                auto result = _c->CreateVector2KeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { 0.971589983F, 0.971589983F }, _linearEasingFunction);
                result->InsertKeyFrame(0.0912052095F, { 0.971589983F, 0.971589983F }, _linearEasingFunction);
                result->InsertKeyFrame(0.0944625437F, { 0.846589983F, 0.846589983F }, _cubicBezierEasingFunction_007);
                result->InsertKeyFrame(0.100977197F, { 0.846589983F, 0.846589983F }, _cubicBezierEasingFunction_007);
                result->InsertKeyFrame(0.136807814F, { 0.971589983F, 0.971589983F }, _cubicBezierEasingFunction_006);
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            Vector2KeyFrameAnimation^ Vector2Animation_061()
            {
                auto result = _c->CreateVector2KeyFrameAnimation();
                result->SetReferenceParameter("_", _root);
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { 0, -0.063000001F }, _linearEasingFunction);
                result->InsertKeyFrame(0.162866443F, { 0, -0.063000001F }, _linearEasingFunction);
                result->InsertExpressionKeyFrame(0.325732797F, "(Pow(1 - _.t198, 3) * Vector2(0,(-0.063000001))) + (3 * Square(1 - _.t198) * _.t198 * Vector2((-39.8333321),2.44741678)) + (3 * (1 - _.t198) * Square(_.t198) * Vector2((-199.166672),12.489583)) + (Pow(_.t198, 3) * Vector2((-239),15))", _stepEasingFunction_000);
                result->InsertKeyFrame(0.325732887F, { -239, 15 }, _stepEasingFunction_000);
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            //   'CamButtonStroke'.Transforms
            Vector2KeyFrameAnimation^ Vector2Animation_062()
            {
                auto result = _c->CreateVector2KeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { 0.765910029F, 0.765910029F }, _linearEasingFunction);
                result->InsertKeyFrame(0.0912052095F, { 0.765910029F, 0.765910029F }, _linearEasingFunction);
                result->InsertKeyFrame(0.0944625437F, { 1.03864002F, 1.03864002F }, _cubicBezierEasingFunction_007);
                result->InsertKeyFrame(0.100977197F, { 1.03864002F, 1.03864002F }, _cubicBezierEasingFunction_007);
                result->InsertKeyFrame(0.136807814F, { 0.765910029F, 0.765910029F }, _cubicBezierEasingFunction_006);
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            Vector2KeyFrameAnimation^ Vector2Animation_063()
            {
                auto result = _c->CreateVector2KeyFrameAnimation();
                result->SetReferenceParameter("_", _root);
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { 0, -0.063000001F }, _linearEasingFunction);
                result->InsertKeyFrame(0.162866443F, { 0, -0.063000001F }, _linearEasingFunction);
                result->InsertExpressionKeyFrame(0.325732797F, "(Pow(1 - _.t199, 3) * Vector2(0,(-0.063000001))) + (3 * Square(1 - _.t199) * _.t199 * Vector2((-39.8333321),2.44741678)) + (3 * (1 - _.t199) * Square(_.t199) * Vector2((-199.166672),12.489583)) + (Pow(_.t199, 3) * Vector2((-239),15))", _stepEasingFunction_000);
                result->InsertKeyFrame(0.325732887F, { -239, 15 }, _stepEasingFunction_000);
                return result;
            }

            Vector3KeyFrameAnimation^ Vector3KeyFrameAnimation_000()
            {
                auto result = _vector3KeyFrameAnimation_000 = _c->CreateVector3KeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { 1.77999997F, 1.77999997F, 1 }, _linearEasingFunction);
                result->InsertKeyFrame(0.148208469F, { 1.77999997F, 1.77999997F, 1 }, _linearEasingFunction);
                result->InsertKeyFrame(0.195439741F, { 1, 1, 1 }, _cubicBezierEasingFunction_006);
                return result;
            }

            Vector3KeyFrameAnimation^ Vector3KeyFrameAnimation_001()
            {
                auto result = _vector3KeyFrameAnimation_001 = _c->CreateVector3KeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { 1, 1, 1 }, _linearEasingFunction);
                result->InsertKeyFrame(0.451140076F, { 1, 1, 1 }, _linearEasingFunction);
                result->InsertKeyFrame(0.517915308F, { 0.839999974F, 0.839999974F, 1 }, _cubicBezierEasingFunction_003);
                result->InsertKeyFrame(0.868078172F, { 0.839999974F, 0.839999974F, 1 }, _cubicBezierEasingFunction_004);
                result->InsertKeyFrame(0.985342026F, { 1.75999999F, 1.75999999F, 1 }, _cubicBezierEasingFunction_005);
                return result;
            }

            Vector3KeyFrameAnimation^ Vector3KeyFrameAnimation_002()
            {
                auto result = _vector3KeyFrameAnimation_002 = _c->CreateVector3KeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { 0.629999995F, 0.629999995F, 1 }, _linearEasingFunction);
                result->InsertKeyFrame(0.208469048F, { 0.629999995F, 0.629999995F, 1 }, _linearEasingFunction);
                result->InsertKeyFrame(0.320846915F, { 1, 1, 1 }, _cubicBezierEasingFunction_008);
                return result;
            }

            Vector3KeyFrameAnimation^ Vector3KeyFrameAnimation_003()
            {
                auto result = _vector3KeyFrameAnimation_003 = _c->CreateVector3KeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { 0.862809956F, 0.862809956F, 1 }, _linearEasingFunction);
                result->InsertKeyFrame(0.319218248F, { 0.862809956F, 0.862809956F, 1 }, _linearEasingFunction);
                result->InsertKeyFrame(0.327361554F, { 0.852460027F, 0.852460027F, 1 }, _cubicBezierEasingFunction_008);
                result->InsertKeyFrame(0.364820838F, { 0.862809956F, 0.862809956F, 1 }, _cubicBezierEasingFunction_013);
                result->InsertKeyFrame(0.451140076F, { 0.862809956F, 0.862809956F, 1 }, _cubicBezierEasingFunction_004);
                result->InsertKeyFrame(0.552117288F, { 1, 1, 1 }, _cubicBezierEasingFunction_014);
                return result;
            }

            Vector3KeyFrameAnimation^ Vector3KeyFrameAnimation_004()
            {
                auto result = _vector3KeyFrameAnimation_004 = _c->CreateVector3KeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { 1.15900004F, 1.15900004F, 1 }, _linearEasingFunction);
                result->InsertKeyFrame(0.868078172F, { 1.15900004F, 1.15900004F, 1 }, _linearEasingFunction);
                result->InsertKeyFrame(0.985342026F, { 0.778999984F, 0.778999984F, 1 }, _cubicBezierEasingFunction_016);
                return result;
            }

            // 'PhonePic01'.Transforms
            Vector3KeyFrameAnimation^ Vector3KeyFrameAnimation_005()
            {
                auto result = _c->CreateVector3KeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { 1.76168001F, 1.76168001F, 1 }, _linearEasingFunction);
                result->InsertKeyFrame(0.185667753F, { 1.76168001F, 1.76168001F, 1 }, _linearEasingFunction);
                result->InsertKeyFrame(0.242671013F, { 1.88917005F, 1.88917005F, 1 }, _cubicBezierEasingFunction_024);
                result->InsertKeyFrame(0.320846915F, { 1.15900004F, 1.15900004F, 1 }, _cubicBezierEasingFunction_025);
                return result;
            }

            // 'PhonePic01 Null'.Transforms
            Vector3KeyFrameAnimation^ Vector3KeyFrameAnimation_006()
            {
                auto result = _c->CreateVector3KeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { 1, 1, 1 }, _linearEasingFunction);
                result->InsertKeyFrame(0.640065134F, { 1, 1, 1 }, _linearEasingFunction);
                result->InsertKeyFrame(0.654723108F, { 1.23874998F, 1.23874998F, 1 }, _cubicBezierEasingFunction_008);
                result->InsertKeyFrame(0.745928347F, { 1.23874998F, 1.23874998F, 1 }, _cubicBezierEasingFunction_004);
                result->InsertKeyFrame(0.780130267F, { 0.689999998F, 0.689999998F, 1 }, _cubicBezierEasingFunction_006);
                return result;
            }

            // 'PhoneShell Outlines'.Transforms
            Vector3KeyFrameAnimation^ Vector3KeyFrameAnimation_007()
            {
                auto result = _c->CreateVector3KeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { 1.75999999F, 1.75999999F, 1 }, _linearEasingFunction);
                result->InsertKeyFrame(0.162866443F, { 1.75999999F, 1.75999999F, 1 }, _linearEasingFunction);
                result->InsertKeyFrame(0.325732887F, { 1, 1, 1 }, _cubicBezierEasingFunction_018);
                return result;
            }

            static IGeometrySource2D^ CanvasGeometryToIGeometrySource2D(CanvasGeometry geo)
            {
                ComPtr<ABI::Windows::Graphics::IGeometrySource2D> interop = geo.Detach();
                return reinterpret_cast<IGeometrySource2D^>(interop.Get());
            }

            static void FFHR(HRESULT hr)
            {
                if (hr != S_OK)
                {
                    RoFailFastWithErrorContext(hr);
                }
            }

            Instantiator(Compositor^ compositor)
                : _c(compositor)
                , _reusableExpressionAnimation(compositor->CreateExpressionAnimation())
            {
                FFHR(D2D1CreateFactory(D2D1_FACTORY_TYPE_SINGLE_THREADED, _d2dFactory.GetAddressOf()));
            }

        public:
            static Visual^ InstantiateComposition(Compositor^ compositor)
            {
                return Instantiator(compositor).Root();
            }

        };
    };
}
