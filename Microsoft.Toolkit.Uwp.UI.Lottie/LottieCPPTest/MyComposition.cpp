//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#include "pch.h"
#include "MyComposition.h"
#include "d2d1.h"
#include <d2d1_1.h>
#include <d2d1helper.h>
#include "WindowsNumerics.h"
#include <Windows.Graphics.Interop.h>
#include <wrl.h>

using namespace Windows::Foundation;
using namespace Windows::Foundation::Numerics;
using namespace Windows::UI;
using namespace Windows::UI::Composition;
using namespace Windows::Graphics;
using namespace Microsoft::WRL;

namespace Compositions
{
    ref class MyComposition sealed : public ICompositionSource
    {
    public:
        virtual bool TryCreateInstance(
            Compositor^ compositor,
            Visual^* rootVisual,
            float2* size,
            CompositionPropertySet^* progressPropertySet,
            TimeSpan* duration,
            Object^* diagnostics)
        {
            *rootVisual = Instantiator::InstantiateComposition(compositor);
            *size = { 1920, 1280 };
            *progressPropertySet = (*rootVisual)->Properties;
            duration->Duration = { 98670000L };
            diagnostics = nullptr;
            return true;
        }

    private:
        class GeoSource :
            public ABI::Windows::Graphics::IGeometrySource2D,
            public ABI::Windows::Graphics::IGeometrySource2DInterop
        {
        public:
            GeoSource(
                ID2D1Geometry* pGeometry)
                : m_cRef(0)
                , m_cpGeometry(pGeometry)
            {
            }

        protected:
            ~GeoSource() = default;

        public:
            // IUnknown
            IFACEMETHODIMP QueryInterface(
                REFIID iid,
                void ** ppvObject) override
            {
                if (iid == __uuidof(ABI::Windows::Graphics::IGeometrySource2DInterop))
                {
                    AddRef();
                    *ppvObject = (ABI::Windows::Graphics::IGeometrySource2DInterop*) this;
                    return S_OK;
                }

                return E_NOINTERFACE;
            }

            IFACEMETHODIMP_(ULONG) AddRef() override
            {
                return InterlockedIncrement(&m_cRef);
            }

            IFACEMETHODIMP_(ULONG) Release() override
            {
                ULONG cRef = InterlockedDecrement(&m_cRef);
                if (0 == cRef)
                {
                    delete this;
                }
                return cRef;
            }

            // IInspectable
            IFACEMETHODIMP GetIids(ULONG*, IID**) override
            {
                return E_NOTIMPL;
            }

            IFACEMETHODIMP GetRuntimeClassName(HSTRING*) override
            {
                return E_NOTIMPL;
            }

            IFACEMETHODIMP GetTrustLevel(TrustLevel*) override
            {
                return E_NOTIMPL;
            }

            // Windows::Graphics::IGeometrySource2DInterop
            IFACEMETHODIMP GetGeometry(ID2D1Geometry** value) override
            {
                *value = m_cpGeometry.Get();
                (*value)->AddRef();
                return S_OK;
            }

            IFACEMETHODIMP TryGetGeometryUsingFactory(ID2D1Factory*, ID2D1Geometry**) override
            {
                return E_NOTIMPL;
            }

        private:
            ULONG m_cRef;
            Microsoft::WRL::ComPtr<ID2D1Geometry> m_cpGeometry;
        };

        typedef ComPtr<GeoSource> CanvasGeometry;
        class Instantiator sealed
        {
            ComPtr<ID2D1Factory> _d2dFactory;
            const int64_t c_durationTicks = 98670000L;
            Compositor^ const _c;
            ExpressionAnimation^ const _reusableExpressionAnimation;
            ColorKeyFrameAnimation^ _colorAnimation_Black_to_Black;
            CompositionColorBrush^ _colorBrush_Black;
            CubicBezierEasingFunction^ _cubicBezierEasingFunction_012;
            CubicBezierEasingFunction^ _cubicBezierEasingFunction_015;
            LinearEasingFunction^ _linearEasingFunction;
            ContainerVisual^ _root;
            ScalarKeyFrameAnimation^ _scalarAnimation_0_to_1_000;
            ScalarKeyFrameAnimation^ _scalarAnimation_0_to_1_001;
            ScalarKeyFrameAnimation^ _scalarAnimation_0_to_1_003;
            ScalarKeyFrameAnimation^ _scalarAnimation_0_to_1_004;
            ExpressionAnimation^ _scalarExpressionAnimation;

            // 'txt_Hi'.Transforms
            //   'UI_WindowsLogo 3'.Transforms
            //     'UI_WindowsLogo 3'.Contents
            //       Group: Group 4
            //         Rectangle Path 1
            CompositionColorBrush^ AnimatedColorBrush_Black_to_Black_000()
            {
                auto result = _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0x00, 0x00, 0x00));
                result->StartAnimation("Color", ColorAnimation_Black_to_Black());
                auto controller = result->TryGetAnimationController("Color");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation);
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'UI_WindowsLogo 3'.Transforms
            //     'UI_WindowsLogo 3'.Contents
            //       Group: Group 5
            //         Rectangle Path 1
            CompositionColorBrush^ AnimatedColorBrush_Black_to_Black_001()
            {
                auto result = _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0x00, 0x00, 0x00));
                result->StartAnimation("Color", _colorAnimation_Black_to_Black);
                auto controller = result->TryGetAnimationController("Color");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation);
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'UI_WindowsLogo 3'.Transforms
            //     'UI_WindowsLogo 3'.Contents
            //       Group: Group 2
            //         Rectangle Path 1
            CompositionColorBrush^ AnimatedColorBrush_Black_to_Black_002()
            {
                auto result = _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0x00, 0x00, 0x00));
                result->StartAnimation("Color", _colorAnimation_Black_to_Black);
                auto controller = result->TryGetAnimationController("Color");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation);
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'UI_WindowsLogo 3'.Transforms
            //     'UI_WindowsLogo 3'.Contents
            //       Group: Group 1
            //         Path 1
            CompositionColorBrush^ AnimatedColorBrush_Black_to_Black_003()
            {
                auto result = _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0x00, 0x00, 0x00));
                result->StartAnimation("Color", _colorAnimation_Black_to_Black);
                auto controller = result->TryGetAnimationController("Color");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation);
                return result;
            }

            ColorKeyFrameAnimation^ ColorAnimation_Black_to_Black()
            {
                auto result = _colorAnimation_Black_to_Black = _c->CreateColorKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                // Black
                result->InsertKeyFrame(0, ColorHelper::FromArgb(0xFF, 0x00, 0x00, 0x00), _linearEasingFunction);
                // White
                result->InsertKeyFrame(0.0878378376F, ColorHelper::FromArgb(0xFF, 0xFF, 0xFF, 0xFF), CubicBezierEasingFunction_006());
                // White
                result->InsertKeyFrame(0.126689196F, ColorHelper::FromArgb(0xFF, 0xFF, 0xFF, 0xFF), _linearEasingFunction);
                // Black
                result->InsertKeyFrame(0.212837845F, ColorHelper::FromArgb(0xFF, 0x00, 0x00, 0x00), CubicBezierEasingFunction_007());
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'bkg_white'.Contents
            //     SolidLayerRectangle
            CompositionColorBrush^ ColorBrush_AlmostLavender_FFEBEBEB()
            {
                return _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0xEB, 0xEB, 0xEB));
            }

            CompositionColorBrush^ ColorBrush_Black()
            {
                return _colorBrush_Black = _c->CreateColorBrush(ColorHelper::FromArgb(0xFF, 0x00, 0x00, 0x00));
            }

            // 'txt_Hi'.Transforms
            // 'bkg_white'.Contents
            CompositionContainerShape^ ContainerShape_000()
            {
                auto result = _c->CreateContainerShape();
                result->CenterPoint = { 960, 540 };
                result->Offset = { 0, 100 };
                result->Scale = { 1.65999997F, 1.65999997F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_000());
                return result;
            }

            // 'txt_Hi'.Transforms
            // 'stroke_main'.Contents
            CompositionContainerShape^ ContainerShape_001()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 960, 640 };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_002());
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'stroke_main'.Contents
            // Group: Shape 1
            CompositionContainerShape^ ContainerShape_002()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_001());
                return result;
            }

            // 'txt_Hi'.Transforms
            // 'UI_WindowsLogo 3'.Transforms
            CompositionContainerShape^ ContainerShape_003()
            {
                auto result = _c->CreateContainerShape();
                result->CenterPoint = { 0.25F, 0.25F };
                result->Offset = { 1440.30005F, 635.711975F };
                result->Scale = { 1.70000005F, 1.70000005F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_004());
                result->StartAnimation("Scale", Vector2Animation());
                auto controller = result->TryGetAnimationController("Scale");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation);
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'UI_WindowsLogo 3'.Transforms
            // 'UI_WindowsLogo 3'.Contents
            CompositionContainerShape^ ContainerShape_004()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_005());
                shapes->Append(ContainerShape_006());
                shapes->Append(ContainerShape_007());
                shapes->Append(ContainerShape_008());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "(_.Progress < 0.214527) ? Matrix3x2(1,0,0,1,0,0) : Matrix3x2(0,0,0,0,0,0)";
                _reusableExpressionAnimation->SetReferenceParameter("_", _root);
                result->StartAnimation("TransformMatrix", _reusableExpressionAnimation);
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'UI_WindowsLogo 3'.Transforms
            //     'UI_WindowsLogo 3'.Contents
            // Group: Group 4
            CompositionContainerShape^ ContainerShape_005()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { -17, -16.5F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_002());
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'UI_WindowsLogo 3'.Transforms
            //     'UI_WindowsLogo 3'.Contents
            // Group: Group 5
            CompositionContainerShape^ ContainerShape_006()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 17.5079994F, -16.5F };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_003());
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'UI_WindowsLogo 3'.Transforms
            //     'UI_WindowsLogo 3'.Contents
            // Group: Group 2
            CompositionContainerShape^ ContainerShape_007()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 17.5F, 17 };
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_004());
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'UI_WindowsLogo 3'.Transforms
            //     'UI_WindowsLogo 3'.Contents
            // Group: Group 1
            CompositionContainerShape^ ContainerShape_008()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_005());
                return result;
            }

            // 'txt_Hi'.Transforms
            // 'icon_chinese_2'.Transforms
            CompositionContainerShape^ ContainerShape_009()
            {
                auto result = _c->CreateContainerShape();
                result->CenterPoint = { -451.433014F, -25.1730003F };
                result->Offset = { 960, 640 };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_010());
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'icon_chinese_2'.Transforms
            // 'icon_chinese_2'.Contents
            CompositionContainerShape^ ContainerShape_010()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_011());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "(_.Progress < 0.6047297) ? Matrix3x2(0,0,0,0,0,0) : Matrix3x2(1,0,0,1,0,0)";
                _reusableExpressionAnimation->SetReferenceParameter("_", _root);
                result->StartAnimation("TransformMatrix", _reusableExpressionAnimation);
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'icon_chinese_2'.Transforms
            //     'icon_chinese_2'.Contents
            // Group: icon_chinese_2
            CompositionContainerShape^ ContainerShape_011()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_006());
                shapes->Append(SpriteShape_007());
                shapes->Append(SpriteShape_008());
                return result;
            }

            // 'txt_Hi'.Transforms
            // 'icon_chinese_1'.Transforms
            CompositionContainerShape^ ContainerShape_012()
            {
                auto result = _c->CreateContainerShape();
                result->CenterPoint = { -451.433014F, -25.1730003F };
                result->Offset = { 960, 640 };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_013());
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'icon_chinese_1'.Transforms
            // 'icon_chinese_1'.Contents
            CompositionContainerShape^ ContainerShape_013()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_014());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "(_.Progress < 0.6047297) ? Matrix3x2(0,0,0,0,0,0) : Matrix3x2(1,0,0,1,0,0)";
                _reusableExpressionAnimation->SetReferenceParameter("_", _root);
                result->StartAnimation("TransformMatrix", _reusableExpressionAnimation);
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'icon_chinese_1'.Transforms
            //     'icon_chinese_1'.Contents
            // Group: icon_chinese_1
            CompositionContainerShape^ ContainerShape_014()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_009());
                shapes->Append(SpriteShape_010());
                return result;
            }

            // 'txt_Hi'.Transforms
            // 'icon_globe_outer'.Transforms
            CompositionContainerShape^ ContainerShape_015()
            {
                auto result = _c->CreateContainerShape();
                result->CenterPoint = { -451.433014F, -25.1730003F };
                result->Offset = { 960, 640 };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_016());
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'icon_globe_outer'.Transforms
            // 'icon_globe_outer'.Contents
            CompositionContainerShape^ ContainerShape_016()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_017());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "(_.Progress < 0.6047297) ? Matrix3x2(0,0,0,0,0,0) : Matrix3x2(1,0,0,1,0,0)";
                _reusableExpressionAnimation->SetReferenceParameter("_", _root);
                result->StartAnimation("TransformMatrix", _reusableExpressionAnimation);
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'icon_globe_outer'.Transforms
            //     'icon_globe_outer'.Contents
            // Group: icon_globe_outer
            CompositionContainerShape^ ContainerShape_017()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_011());
                return result;
            }

            // 'txt_Hi'.Transforms
            // 'icon_globe_inner'.Transforms
            CompositionContainerShape^ ContainerShape_018()
            {
                auto result = _c->CreateContainerShape();
                result->CenterPoint = { -451.433014F, -25.1730003F };
                result->Offset = { 960, 640 };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_019());
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'icon_globe_inner'.Transforms
            // 'icon_globe_inner'.Contents
            CompositionContainerShape^ ContainerShape_019()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_020());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "(_.Progress < 0.6047297) ? Matrix3x2(0,0,0,0,0,0) : Matrix3x2(1,0,0,1,0,0)";
                _reusableExpressionAnimation->SetReferenceParameter("_", _root);
                result->StartAnimation("TransformMatrix", _reusableExpressionAnimation);
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'icon_globe_inner'.Transforms
            //     'icon_globe_inner'.Contents
            // Group: icon_globe_inner
            CompositionContainerShape^ ContainerShape_020()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_012());
                shapes->Append(SpriteShape_013());
                shapes->Append(SpriteShape_014());
                shapes->Append(SpriteShape_015());
                return result;
            }

            // 'txt_Hi'.Transforms
            // 'A'.Transforms
            CompositionContainerShape^ ContainerShape_021()
            {
                auto result = _c->CreateContainerShape();
                result->CenterPoint = { -451.433014F, -25.1730003F };
                result->Offset = { 960, 640 };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_022());
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'A'.Transforms
            // 'A'.Contents
            CompositionContainerShape^ ContainerShape_022()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_023());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "(_.Progress < 0.6047297) ? Matrix3x2(0,0,0,0,0,0) : Matrix3x2(1,0,0,1,0,0)";
                _reusableExpressionAnimation->SetReferenceParameter("_", _root);
                result->StartAnimation("TransformMatrix", _reusableExpressionAnimation);
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'A'.Transforms
            //     'A'.Contents
            // Group: icon_A
            CompositionContainerShape^ ContainerShape_023()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_016());
                shapes->Append(SpriteShape_017());
                return result;
            }

            // 'txt_Hi'.Transforms
            // 'txt_Hi_dot'.Transforms
            CompositionContainerShape^ ContainerShape_024()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 463, 579 };
                result->Scale = { 1.91999996F, 1.91999996F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_025());
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'txt_Hi_dot'.Transforms
            // 'txt_Hi_dot'.Contents
            CompositionContainerShape^ ContainerShape_025()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_026());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "(_.Progress < 0.4814189) ? Matrix3x2(0,0,0,0,0,0) : ((_.Progress < 0.6587838) ? Matrix3x2(1,0,0,1,0,0) : Matrix3x2(0,0,0,0,0,0))";
                _reusableExpressionAnimation->SetReferenceParameter("_", _root);
                result->StartAnimation("TransformMatrix", _reusableExpressionAnimation);
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'txt_Hi_dot'.Transforms
            //     'txt_Hi_dot'.Contents
            // Group: Group 1
            CompositionContainerShape^ ContainerShape_026()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_018());
                return result;
            }

            // 'txt_Hi'.Transforms
            // 'txt_Hi'.Transforms
            CompositionContainerShape^ ContainerShape_027()
            {
                auto result = _c->CreateContainerShape();
                result->Offset = { 463, 579 };
                result->Scale = { 1.91999996F, 1.91999996F };
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_028());
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'txt_Hi'.Transforms
            // 'txt_Hi'.Contents
            CompositionContainerShape^ ContainerShape_028()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_029());
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "(_.Progress < 0.2736486) ? Matrix3x2(0,0,0,0,0,0) : Matrix3x2(1,0,0,1,0,0)";
                _reusableExpressionAnimation->SetReferenceParameter("_", _root);
                result->StartAnimation("TransformMatrix", _reusableExpressionAnimation);
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'txt_Hi'.Transforms
            //     'txt_Hi'.Contents
            // Group: Group 2
            CompositionContainerShape^ ContainerShape_029()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_030());
                shapes->Append(ContainerShape_033());
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'txt_Hi'.Transforms
            //     'txt_Hi'.Contents
            //       Group: Group 2
            // Group: Group 2
            CompositionContainerShape^ ContainerShape_030()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_031());
                shapes->Append(ContainerShape_032());
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'txt_Hi'.Transforms
            //     'txt_Hi'.Contents
            //       Group: Group 2
            //         Group: Group 2
            // Group: Group 1
            CompositionContainerShape^ ContainerShape_031()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_019());
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'txt_Hi'.Transforms
            //     'txt_Hi'.Contents
            //       Group: Group 2
            //         Group: Group 2
            // Group: Group 2
            CompositionContainerShape^ ContainerShape_032()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_020());
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'txt_Hi'.Transforms
            //     'txt_Hi'.Contents
            //       Group: Group 2
            // Group: Group 1
            CompositionContainerShape^ ContainerShape_033()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(ContainerShape_034());
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'txt_Hi'.Transforms
            //     'txt_Hi'.Contents
            //       Group: Group 2
            //         Group: Group 1
            // Group: Group 1
            CompositionContainerShape^ ContainerShape_034()
            {
                auto result = _c->CreateContainerShape();
                auto shapes = result->Shapes;
                shapes->Append(SpriteShape_021());
                return result;
            }

            CubicBezierEasingFunction^ CubicBezierEasingFunction_000()
            {
                return _c->CreateCubicBezierEasingFunction({ 0.192000002F, 0 }, { 0.769999981F, 1 });
            }

            CubicBezierEasingFunction^ CubicBezierEasingFunction_001()
            {
                return _c->CreateCubicBezierEasingFunction({ 0.412F, 0 }, { 0.691999972F, 0.666999996F });
            }

            CubicBezierEasingFunction^ CubicBezierEasingFunction_002()
            {
                return _c->CreateCubicBezierEasingFunction({ 0.734000027F, 0 }, { 0.662F, 1 });
            }

            CubicBezierEasingFunction^ CubicBezierEasingFunction_003()
            {
                return _c->CreateCubicBezierEasingFunction({ 0, 0 }, { 0, 1 });
            }

            CubicBezierEasingFunction^ CubicBezierEasingFunction_004()
            {
                return _c->CreateCubicBezierEasingFunction({ 0.333000004F, 0 }, { 0.666999996F, 1 });
            }

            CubicBezierEasingFunction^ CubicBezierEasingFunction_005()
            {
                return _c->CreateCubicBezierEasingFunction({ 1, 0 }, { 1, 1 });
            }

            CubicBezierEasingFunction^ CubicBezierEasingFunction_006()
            {
                return _c->CreateCubicBezierEasingFunction({ 0.207000002F, 0 }, { 0.305999994F, 1 });
            }

            CubicBezierEasingFunction^ CubicBezierEasingFunction_007()
            {
                return _c->CreateCubicBezierEasingFunction({ 0.836000025F, 0 }, { 0.828999996F, 1 });
            }

            CubicBezierEasingFunction^ CubicBezierEasingFunction_008()
            {
                return _c->CreateCubicBezierEasingFunction({ 0, 0 }, { 0.36500001F, 1 });
            }

            CubicBezierEasingFunction^ CubicBezierEasingFunction_009()
            {
                return _c->CreateCubicBezierEasingFunction({ 0.388999999F, 0 }, { 0.300000012F, 1 });
            }

            CubicBezierEasingFunction^ CubicBezierEasingFunction_010()
            {
                return _c->CreateCubicBezierEasingFunction({ 0.0219999999F, 0 }, { 0.104000002F, 1 });
            }

            CubicBezierEasingFunction^ CubicBezierEasingFunction_011()
            {
                return _c->CreateCubicBezierEasingFunction({ 0.451000005F, 0 }, { 0, 1 });
            }

            CubicBezierEasingFunction^ CubicBezierEasingFunction_012()
            {
                return _cubicBezierEasingFunction_012 = _c->CreateCubicBezierEasingFunction({ 0.194999993F, 0 }, { 0, 1 });
            }

            CubicBezierEasingFunction^ CubicBezierEasingFunction_013()
            {
                return _c->CreateCubicBezierEasingFunction({ 0.333000004F, 0 }, { 0.444999993F, 1 });
            }

            CubicBezierEasingFunction^ CubicBezierEasingFunction_014()
            {
                return _c->CreateCubicBezierEasingFunction({ 0.166999996F, 0.166999996F }, { 0.666999996F, 1 });
            }

            CubicBezierEasingFunction^ CubicBezierEasingFunction_015()
            {
                return _cubicBezierEasingFunction_015 = _c->CreateCubicBezierEasingFunction({ 0.166999996F, 0.166999996F }, { 0.833000004F, 0.833000004F });
            }

            CubicBezierEasingFunction^ CubicBezierEasingFunction_016()
            {
                return _c->CreateCubicBezierEasingFunction({ 0.656000018F, 0.0260000005F }, { 0.819000006F, 0.976999998F });
            }

            CubicBezierEasingFunction^ CubicBezierEasingFunction_017()
            {
                return _c->CreateCubicBezierEasingFunction({ 0.56400001F, 0.0930000022F }, { 0.572000027F, 0.92900002F });
            }

            CubicBezierEasingFunction^ CubicBezierEasingFunction_018()
            {
                return _c->CreateCubicBezierEasingFunction({ 0.527999997F, 0.125F }, { 0.345999986F, 0.949999988F });
            }

            CubicBezierEasingFunction^ CubicBezierEasingFunction_019()
            {
                return _c->CreateCubicBezierEasingFunction({ 0.0260000005F, 0.00600000005F }, { 0.54400003F, 1 });
            }

            CubicBezierEasingFunction^ CubicBezierEasingFunction_020()
            {
                return _c->CreateCubicBezierEasingFunction({ 1, 0 }, { 0.833000004F, 0.833000004F });
            }

            CubicBezierEasingFunction^ CubicBezierEasingFunction_021()
            {
                return _c->CreateCubicBezierEasingFunction({ 0.381999999F, 0 }, { 0.493000001F, 0.880999982F });
            }

            CubicBezierEasingFunction^ CubicBezierEasingFunction_022()
            {
                return _c->CreateCubicBezierEasingFunction({ 0.479999989F, 0.109999999F }, { 0.351999998F, 1 });
            }

            CanvasGeometry Geometry_000()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_ALTERNATE);
                sink->BeginFigure({ -634.375F, -102.25F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -657.002991F, 116.794998F },{ -571.969971F, 240.615005F },{ -374.625F, 333.718994F } });
                sink->AddBezier({ { -90, 468 },{ 180, 298 },{ 477.501007F, -3.75F } });
                sink->EndFigure(D2D1_FIGURE_END_OPEN);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_001()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_WINDING);
                sink->BeginFigure({ -32, 2 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -32, 2 },{ -2, 2 },{ -2, 2 } });
                sink->AddBezier({ { -2, 2 },{ -2, 32 },{ -2, 32 } });
                sink->AddBezier({ { -2, 32 },{ -32, 32 },{ -32, 32 } });
                sink->AddBezier({ { -32, 32 },{ -32, 2 },{ -32, 2 } });
                sink->EndFigure(D2D1_FIGURE_END_CLOSED);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_002()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_ALTERNATE);
                sink->BeginFigure({ -490.75F, 69 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -490.75F, 69 },{ -328.25F, 72.25F },{ -328.25F, 72.25F } });
                sink->EndFigure(D2D1_FIGURE_END_OPEN);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_003()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_ALTERNATE);
                sink->BeginFigure({ -414.25F, 53.5F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -414.25F, 53.5F },{ -410.5F, 120 },{ -411.5F, 124.75F } });
                sink->AddBezier({ { -412.5F, 129.5F },{ -435, 136 },{ -448.75F, 123 } });
                sink->EndFigure(D2D1_FIGURE_END_OPEN);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_004()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_ALTERNATE);
                sink->BeginFigure({ -453.75F, 24.5F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -453.75F, 24.5F },{ -365.75F, 26.25F },{ -365.75F, 26.25F } });
                sink->AddBezier({ { -365.75F, 26.25F },{ -412, 66.25F },{ -412, 66.25F } });
                sink->EndFigure(D2D1_FIGURE_END_OPEN);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_005()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_ALTERNATE);
                sink->BeginFigure({ -411.75F, -49.25F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -411.75F, -49.25F },{ -411.75F, -18.75F },{ -411.75F, -18.75F } });
                sink->EndFigure(D2D1_FIGURE_END_OPEN);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_006()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_ALTERNATE);
                sink->BeginFigure({ -485.5F, 24 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -485.5F, 24 },{ -489.5F, -7.5F },{ -484, -10 } });
                sink->AddBezier({ { -478.5F, -12.5F },{ -421, -14.5F },{ -409.75F, -14.25F } });
                sink->AddBezier({ { -398.5F, -14 },{ -337.5F, -10 },{ -335.5F, -7.5F } });
                sink->AddBezier({ { -333.5F, -5 },{ -335, 29 },{ -335, 29 } });
                sink->EndFigure(D2D1_FIGURE_END_OPEN);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_007()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_ALTERNATE);
                sink->BeginFigure({ -350.875F, 2.56299996F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -318.057007F, -37.5900002F },{ -278, -104.5F },{ -267.5F, -218 } });
                sink->AddBezier({ { -254.778F, -355.522003F },{ -340.098999F, -462.563995F },{ -497, -457 } });
                sink->AddBezier({ { -638, -452 },{ -748, -346.5F },{ -772.5F, -205 } });
                sink->AddBezier({ { -795.965027F, -69.4800034F },{ -708.85498F, 66.7710037F },{ -596, 72.5F } });
                sink->AddBezier({ { -497.5F, 77.5F },{ -475.11499F, 23.4360008F },{ -458, -29 } });
                sink->AddBezier({ { -434.5F, -101 },{ -476, -158 },{ -539.5F, -155.5F } });
                sink->AddBezier({ { -603, -153 },{ -656, -77 },{ -603, 0 } });
                sink->EndFigure(D2D1_FIGURE_END_OPEN);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_008()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_ALTERNATE);
                sink->BeginFigure({ -614.25F, -28 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -614.25F, -28 },{ -508.25F, -28.25F },{ -508.25F, -28.25F } });
                sink->EndFigure(D2D1_FIGURE_END_OPEN);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_009()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_ALTERNATE);
                sink->BeginFigure({ -618.25F, -89.75F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -618.25F, -89.75F },{ -454.75F, -90 },{ -454.75F, -90 } });
                sink->EndFigure(D2D1_FIGURE_END_OPEN);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_010()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_ALTERNATE);
                sink->BeginFigure({ -527.75F, -149.5F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -527.75F, -149.5F },{ -493.5F, -112 },{ -508, -28.75F } });
                sink->EndFigure(D2D1_FIGURE_END_OPEN);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_011()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_ALTERNATE);
                sink->BeginFigure({ -538.75F, -152.75F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -538.75F, -152.75F },{ -582, -128.25F },{ -565, -13 } });
                sink->EndFigure(D2D1_FIGURE_END_OPEN);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_012()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_ALTERNATE);
                sink->BeginFigure({ -583, 105 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -583, 105 },{ -529, 107 },{ -529, 107 } });
                sink->EndFigure(D2D1_FIGURE_END_OPEN);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_013()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_ALTERNATE);
                sink->BeginFigure({ -603.5F, 152 }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -603.5F, 152 },{ -560, 22 },{ -560, 22 } });
                sink->AddBezier({ { -560, 22 },{ -511, 152 },{ -511, 152 } });
                sink->EndFigure(D2D1_FIGURE_END_OPEN);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_014()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_ALTERNATE);
                sink->BeginFigure({ 39.2550011F, -2.91599989F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { 39.2550011F, -2.91599989F },{ 39.5810013F, -2.921F },{ 39.6860008F, -3.08400011F } });
                sink->EndFigure(D2D1_FIGURE_END_OPEN);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_015()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_ALTERNATE);
                sink->BeginFigure({ 9.34300041F, -41.9500008F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -17.5890007F, 1.07200003F },{ -22.4720001F, 21.1650009F },{ -26.6580009F, 61.1399994F } });
                sink->AddBezier({ { -33.1500015F, 39.3170013F },{ -45.9500008F, 28.5939999F },{ -54.7249985F, 15.4390001F } });
                sink->AddBezier({ { -58.2360001F, 10.1750002F },{ -62.5880013F, 5.04099989F },{ -68.5500031F, 2.92199993F } });
                sink->AddBezier({ { -70.2139969F, 2.33100009F },{ -72.0579987F, 1.99600005F },{ -73.7369995F, 2.54200006F } });
                sink->AddBezier({ { -76.8880005F, 3.56599998F },{ -78.3649979F, 8.89299965F },{ -77.5889969F, 12.1140003F } });
                sink->AddBezier({ { -76.8130035F, 15.335F },{ -72.9570007F, 17.8850002F },{ -70.3119965F, 19.8799992F } });
                sink->AddBezier({ { -58.3720016F, 28.8850002F },{ -35.2179985F, 29.9260006F },{ -21.25F, 24.5839996F } });
                sink->AddBezier({ { -7.28200006F, 19.2420006F },{ 4.93400002F, 8.2869997F },{ 15.1210003F, -2.66199994F } });
                sink->EndFigure(D2D1_FIGURE_END_OPEN);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_016()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_ALTERNATE);
                sink->BeginFigure({ -71.9700012F, 61.1399994F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { -58.4169998F, 35.3419991F },{ -42.769001F, 2.23699999F },{ -29.2159996F, -23.5610008F } });
                sink->AddBezier({ { -25.1200008F, -31.3579998F },{ -20.9020004F, -40.1650009F },{ -23.3530006F, -48.625F } });
                sink->AddBezier({ { -24.5170002F, -52.6450005F },{ -29.1669998F, -62.2400017F },{ -42.7410011F, -61.0830002F } });
                sink->AddBezier({ { -52.3569984F, -60.2639999F },{ -56.6290016F, -55.1430016F },{ -60.7089996F, -50.4589996F } });
                sink->AddBezier({ { -66.6660004F, -43.6199989F },{ -71.3539963F, -30.4689999F },{ -71.5350037F, -20.9009991F } });
                sink->EndFigure(D2D1_FIGURE_END_OPEN);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            CanvasGeometry Geometry_017()
            {
                CanvasGeometry result;
                ComPtr<ID2D1PathGeometry> path;
                FFHR(_d2dFactory->CreatePathGeometry(&path));
                ComPtr<ID2D1GeometrySink> sink;
                FFHR(path->Open(&sink));
                sink->SetFillMode(D2D1_FILL_MODE_ALTERNATE);
                sink->BeginFigure({ -7.16599989F, 61.1399994F }, D2D1_FIGURE_BEGIN_FILLED);
                sink->AddBezier({ { 5.0539999F, 51.7750015F },{ 23.1200008F, 25.7180004F },{ 31.2150002F, 14.7580004F } });
                sink->AddBezier({ { 28.6389999F, 20.5939999F },{ 24.8950005F, 39.3219986F },{ 24.9599991F, 45.7010002F } });
                sink->AddBezier({ { 25.0249996F, 52.0800018F },{ 28.5599995F, 59.3600006F },{ 34.6860008F, 61.1399994F } });
                sink->AddBezier({ { 40.4780006F, 62.8230019F },{ 46.5079994F, 59.2169991F },{ 51.4830017F, 55.8059998F } });
                sink->AddBezier({ { 61.4889984F, 48.9449997F },{ 70.4049988F, 40.4970016F },{ 77.7929993F, 30.8729992F } });
                sink->EndFigure(D2D1_FIGURE_END_OPEN);
                FFHR(sink->Close());
                result = new GeoSource(path.Get());
                return result;
            }

            LinearEasingFunction^ LinearEasingFunction()
            {
                return _linearEasingFunction = _c->CreateLinearEasingFunction();
            }

            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_000()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_000())));
                auto propertySet = result->Properties;
                propertySet->InsertScalar("TStart", 0.99000001F);
                propertySet->InsertScalar("TEnd", 1);
                result->StartAnimation("TStart", ScalarAnimation_0p99_to_0());
                auto controller = result->TryGetAnimationController("TStart");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation);
                result->StartAnimation("TEnd", ScalarAnimation_1_to_0_000());
                controller = result->TryGetAnimationController("TEnd");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation);
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "Min(my.TStart, my.TEnd)";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("TrimStart", _reusableExpressionAnimation);
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "Max(my.TStart, my.TEnd)";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("TrimEnd", _reusableExpressionAnimation);
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'UI_WindowsLogo 3'.Transforms
            //     'UI_WindowsLogo 3'.Contents
            //       Group: Group 1
            //         Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_001()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_001())));
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'icon_chinese_2'.Transforms
            //     'icon_chinese_2'.Contents
            //       Group: icon_chinese_2
            //         Path 4
            // Path 4.PathGeometry
            CompositionPathGeometry^ PathGeometry_002()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_002())));
                result->TrimEnd = 0;
                result->StartAnimation("TrimEnd", ScalarAnimation_0_to_1_000());
                auto controller = result->TryGetAnimationController("TrimEnd");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation);
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'icon_chinese_2'.Transforms
            //     'icon_chinese_2'.Contents
            //       Group: icon_chinese_2
            //         Path 5
            // Path 5.PathGeometry
            CompositionPathGeometry^ PathGeometry_003()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_003())));
                result->TrimEnd = 0;
                result->StartAnimation("TrimEnd", _scalarAnimation_0_to_1_000);
                auto controller = result->TryGetAnimationController("TrimEnd");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation);
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'icon_chinese_2'.Transforms
            //     'icon_chinese_2'.Contents
            //       Group: icon_chinese_2
            //         Path 3
            // Path 3.PathGeometry
            CompositionPathGeometry^ PathGeometry_004()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_004())));
                result->TrimEnd = 0;
                result->StartAnimation("TrimEnd", _scalarAnimation_0_to_1_000);
                auto controller = result->TryGetAnimationController("TrimEnd");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation);
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'icon_chinese_1'.Transforms
            //     'icon_chinese_1'.Contents
            //       Group: icon_chinese_1
            //         Path 2
            // Path 2.PathGeometry
            CompositionPathGeometry^ PathGeometry_005()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_005())));
                result->TrimEnd = 0;
                result->StartAnimation("TrimEnd", ScalarAnimation_0_to_1_001());
                auto controller = result->TryGetAnimationController("TrimEnd");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation);
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'icon_chinese_1'.Transforms
            //     'icon_chinese_1'.Contents
            //       Group: icon_chinese_1
            //         Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_006()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_006())));
                result->TrimEnd = 0;
                result->StartAnimation("TrimEnd", _scalarAnimation_0_to_1_001);
                auto controller = result->TryGetAnimationController("TrimEnd");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation);
                return result;
            }

            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_007()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_007())));
                auto propertySet = result->Properties;
                propertySet->InsertScalar("TStart", 0);
                propertySet->InsertScalar("TEnd", 0);
                result->StartAnimation("TStart", ScalarAnimation_0_to_0p837());
                auto controller = result->TryGetAnimationController("TStart");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation);
                result->StartAnimation("TEnd", ScalarAnimation_0_to_1_002());
                controller = result->TryGetAnimationController("TEnd");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation);
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "Min(my.TStart, my.TEnd)";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("TrimStart", _reusableExpressionAnimation);
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "Max(my.TStart, my.TEnd)";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("TrimEnd", _reusableExpressionAnimation);
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'icon_globe_inner'.Transforms
            //     'icon_globe_inner'.Contents
            //       Group: icon_globe_inner
            //         Path 4
            // Path 4.PathGeometry
            CompositionPathGeometry^ PathGeometry_008()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_008())));
                result->TrimEnd = 0;
                result->StartAnimation("TrimEnd", ScalarAnimation_0_to_1_003());
                auto controller = result->TryGetAnimationController("TrimEnd");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation);
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'icon_globe_inner'.Transforms
            //     'icon_globe_inner'.Contents
            //       Group: icon_globe_inner
            //         Path 3
            // Path 3.PathGeometry
            CompositionPathGeometry^ PathGeometry_009()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_009())));
                result->TrimEnd = 0;
                result->StartAnimation("TrimEnd", _scalarAnimation_0_to_1_003);
                auto controller = result->TryGetAnimationController("TrimEnd");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation);
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'icon_globe_inner'.Transforms
            //     'icon_globe_inner'.Contents
            //       Group: icon_globe_inner
            //         Path 2
            // Path 2.PathGeometry
            CompositionPathGeometry^ PathGeometry_010()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_010())));
                result->TrimEnd = 0;
                result->StartAnimation("TrimEnd", _scalarAnimation_0_to_1_003);
                auto controller = result->TryGetAnimationController("TrimEnd");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation);
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'icon_globe_inner'.Transforms
            //     'icon_globe_inner'.Contents
            //       Group: icon_globe_inner
            //         Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_011()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_011())));
                result->TrimEnd = 0;
                result->StartAnimation("TrimEnd", _scalarAnimation_0_to_1_003);
                auto controller = result->TryGetAnimationController("TrimEnd");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation);
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'A'.Transforms
            //     'A'.Contents
            //       Group: icon_A
            //         Path 2
            // Path 2.PathGeometry
            CompositionPathGeometry^ PathGeometry_012()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_012())));
                result->TrimEnd = 0;
                result->StartAnimation("TrimEnd", ScalarAnimation_0_to_1_004());
                auto controller = result->TryGetAnimationController("TrimEnd");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation);
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'A'.Transforms
            //     'A'.Contents
            //       Group: icon_A
            //         Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_013()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_013())));
                result->TrimEnd = 0;
                result->StartAnimation("TrimEnd", _scalarAnimation_0_to_1_004);
                auto controller = result->TryGetAnimationController("TrimEnd");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation);
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'txt_Hi_dot'.Transforms
            //     'txt_Hi_dot'.Contents
            //       Group: Group 1
            //         Path 1
            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_014()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_014())));
                return result;
            }

            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_015()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_015())));
                auto propertySet = result->Properties;
                propertySet->InsertScalar("TStart", 0);
                propertySet->InsertScalar("TEnd", 0);
                result->StartAnimation("TStart", ScalarAnimation_0_to_1_005());
                auto controller = result->TryGetAnimationController("TStart");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation);
                result->StartAnimation("TEnd", ScalarAnimation_0_to_1_006());
                controller = result->TryGetAnimationController("TEnd");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation);
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "Min(my.TStart, my.TEnd)";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("TrimStart", _reusableExpressionAnimation);
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "Max(my.TStart, my.TEnd)";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("TrimEnd", _reusableExpressionAnimation);
                return result;
            }

            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_016()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_016())));
                auto propertySet = result->Properties;
                propertySet->InsertScalar("TStart", 1);
                propertySet->InsertScalar("TEnd", 1);
                result->StartAnimation("TStart", ScalarAnimation_1_to_0_001());
                auto controller = result->TryGetAnimationController("TStart");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation);
                result->StartAnimation("TEnd", ScalarAnimation_1_to_0_002());
                controller = result->TryGetAnimationController("TEnd");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation);
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "Min(my.TStart, my.TEnd)";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("TrimStart", _reusableExpressionAnimation);
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "Max(my.TStart, my.TEnd)";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("TrimEnd", _reusableExpressionAnimation);
                return result;
            }

            // Path 1.PathGeometry
            CompositionPathGeometry^ PathGeometry_017()
            {
                auto result = _c->CreatePathGeometry(ref new CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry_017())));
                auto propertySet = result->Properties;
                propertySet->InsertScalar("TStart", 0);
                propertySet->InsertScalar("TEnd", 0);
                result->StartAnimation("TStart", ScalarAnimation_0_to_1_007());
                auto controller = result->TryGetAnimationController("TStart");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation);
                result->StartAnimation("TEnd", ScalarAnimation_0_to_1_008());
                controller = result->TryGetAnimationController("TEnd");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation);
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "Min(my.TStart, my.TEnd)";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("TrimStart", _reusableExpressionAnimation);
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "Max(my.TStart, my.TEnd)";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("TrimEnd", _reusableExpressionAnimation);
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'bkg_white'.Contents
            //     SolidLayerRectangle
            // .RectangleGeometry
            CompositionRectangleGeometry^ Rectangle_1920x1080()
            {
                auto result = _c->CreateRectangleGeometry();
                result->Size = { 1920, 1080 };
                return result;
            }

            // Rectangle Path 1.RectangleGeometry
            CompositionRectangleGeometry^ Rectangle_30_000()
            {
                auto result = _c->CreateRectangleGeometry();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Position", { 0, 0 });
                result->Size = { 30, 30 };
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "Vector2((my.Position.X - (my.Size.X / 2)),(my.Position.Y - (my.Size.Y / 2)))";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                return result;
            }

            // Rectangle Path 1.RectangleGeometry
            CompositionRectangleGeometry^ Rectangle_30_001()
            {
                auto result = _c->CreateRectangleGeometry();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Position", { 0, 0 });
                result->Size = { 30, 30 };
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "Vector2((my.Position.X - (my.Size.X / 2)),(my.Position.Y - (my.Size.Y / 2)))";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                return result;
            }

            // Rectangle Path 1.RectangleGeometry
            CompositionRectangleGeometry^ Rectangle_30_002()
            {
                auto result = _c->CreateRectangleGeometry();
                auto propertySet = result->Properties;
                propertySet->InsertVector2("Position", { 0, 0 });
                result->Size = { 30, 30 };
                _reusableExpressionAnimation->ClearAllParameters();
                _reusableExpressionAnimation->Expression = "Vector2((my.Position.X - (my.Size.X / 2)),(my.Position.Y - (my.Size.Y / 2)))";
                _reusableExpressionAnimation->SetReferenceParameter("my", result);
                result->StartAnimation("Offset", _reusableExpressionAnimation);
                return result;
            }

            // The root of the composition.
            ContainerVisual^ Root()
            {
                auto result = _root = _c->CreateContainerVisual();
                auto propertySet = result->Properties;
                propertySet->InsertScalar("Progress", 0);
                auto children = result->Children;
                children->InsertAtTop(ShapeVisual());
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'txt_Hi_dot'.Transforms
            //     'txt_Hi_dot'.Contents
            //       Group: Group 1
            //         Path 1
            ScalarKeyFrameAnimation^ ScalarAnimation_0_to_0()
            {
                auto result = _c->CreateScalarKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, 0, _linearEasingFunction);
                result->InsertKeyFrame(0.481418908F, 0, _linearEasingFunction);
                result->InsertKeyFrame(0.493243247F, 9, CubicBezierEasingFunction_013());
                result->InsertKeyFrame(0.650337815F, 9, _linearEasingFunction);
                result->InsertKeyFrame(0.657094598F, 0, CubicBezierEasingFunction_014());
                return result;
            }

            ScalarKeyFrameAnimation^ ScalarAnimation_0_to_0p837()
            {
                auto result = _c->CreateScalarKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, 0, _linearEasingFunction);
                result->InsertKeyFrame(0.668918908F, 0, _linearEasingFunction);
                result->InsertKeyFrame(0.792229712F, 0.837000012F, CubicBezierEasingFunction_010());
                return result;
            }

            ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_000()
            {
                auto result = _scalarAnimation_0_to_1_000 = _c->CreateScalarKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, 0, _linearEasingFunction);
                result->InsertKeyFrame(0.77364862F, 0, _linearEasingFunction);
                result->InsertKeyFrame(0.858108103F, 1, CubicBezierEasingFunction_008());
                return result;
            }

            ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_001()
            {
                auto result = _scalarAnimation_0_to_1_001 = _c->CreateScalarKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, 0, _linearEasingFunction);
                result->InsertKeyFrame(0.73817569F, 0, _linearEasingFunction);
                result->InsertKeyFrame(0.8125F, 1, CubicBezierEasingFunction_009());
                return result;
            }

            ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_002()
            {
                auto result = _c->CreateScalarKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, 0, _linearEasingFunction);
                result->InsertKeyFrame(0.604729712F, 0, _linearEasingFunction);
                result->InsertKeyFrame(0.77364862F, 1, CubicBezierEasingFunction_011());
                return result;
            }

            ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_003()
            {
                auto result = _scalarAnimation_0_to_1_003 = _c->CreateScalarKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, 0, _linearEasingFunction);
                result->InsertKeyFrame(0.690878391F, 0, _linearEasingFunction);
                result->InsertKeyFrame(0.826013505F, 1, CubicBezierEasingFunction_012());
                return result;
            }

            ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_004()
            {
                auto result = _scalarAnimation_0_to_1_004 = _c->CreateScalarKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, 0, _linearEasingFunction);
                result->InsertKeyFrame(0.712837815F, 0, _linearEasingFunction);
                result->InsertKeyFrame(0.847972989F, 1, _cubicBezierEasingFunction_012);
                return result;
            }

            ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_005()
            {
                auto result = _c->CreateScalarKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, 0, _linearEasingFunction);
                result->InsertKeyFrame(0.631756783F, 0, _linearEasingFunction);
                result->InsertKeyFrame(0.658783793F, 1, CubicBezierEasingFunction_015());
                return result;
            }

            ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_006()
            {
                auto result = _c->CreateScalarKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, 0, _linearEasingFunction);
                result->InsertKeyFrame(0.326640189F, 0, _linearEasingFunction);
                result->InsertKeyFrame(0.344983101F, 0.33792001F, CubicBezierEasingFunction_016());
                result->InsertKeyFrame(0.363324314F, 0.592029989F, CubicBezierEasingFunction_017());
                result->InsertKeyFrame(0.405405402F, 1, CubicBezierEasingFunction_018());
                return result;
            }

            ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_007()
            {
                auto result = _c->CreateScalarKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, 0, _linearEasingFunction);
                result->InsertKeyFrame(0.640202701F, 0, _linearEasingFunction);
                result->InsertKeyFrame(0.667229712F, 1, _cubicBezierEasingFunction_015);
                return result;
            }

            ScalarKeyFrameAnimation^ ScalarAnimation_0_to_1_008()
            {
                auto result = _c->CreateScalarKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, 0, _linearEasingFunction);
                result->InsertKeyFrame(0.405405402F, 0, _linearEasingFunction);
                result->InsertKeyFrame(0.430743247F, 0.351179987F, CubicBezierEasingFunction_021());
                result->InsertKeyFrame(0.476351351F, 1, CubicBezierEasingFunction_022());
                return result;
            }

            ScalarKeyFrameAnimation^ ScalarAnimation_0p99_to_0()
            {
                auto result = _c->CreateScalarKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, 0.99000001F, _linearEasingFunction);
                result->InsertKeyFrame(0.217905402F, 0.99000001F, _linearEasingFunction);
                result->InsertKeyFrame(0.271959454F, 0, CubicBezierEasingFunction_001());
                return result;
            }

            ScalarKeyFrameAnimation^ ScalarAnimation_1_to_0_000()
            {
                auto result = _c->CreateScalarKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, 1, _linearEasingFunction);
                result->InsertKeyFrame(0.229729727F, 1, _linearEasingFunction);
                result->InsertKeyFrame(0.298986495F, 0, CubicBezierEasingFunction_002());
                return result;
            }

            ScalarKeyFrameAnimation^ ScalarAnimation_1_to_0_001()
            {
                auto result = _c->CreateScalarKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, 1, _linearEasingFunction);
                result->InsertKeyFrame(0.273648649F, 1, _linearEasingFunction);
                result->InsertKeyFrame(0.326640368F, 0, CubicBezierEasingFunction_019());
                return result;
            }

            ScalarKeyFrameAnimation^ ScalarAnimation_1_to_0_002()
            {
                auto result = _c->CreateScalarKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, 1, _linearEasingFunction);
                result->InsertKeyFrame(0.608108103F, 1, _linearEasingFunction);
                result->InsertKeyFrame(0.631756783F, 0, CubicBezierEasingFunction_020());
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'stroke_main'.Contents
            //     Group: Shape 1
            //       Path 1
            ScalarKeyFrameAnimation^ ScalarAnimation_3155_to_13()
            {
                auto result = _c->CreateScalarKeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, 3155, LinearEasingFunction());
                result->InsertKeyFrame(0.0540540554F, 3155, _linearEasingFunction);
                result->InsertKeyFrame(0.243243247F, 13, CubicBezierEasingFunction_000());
                return result;
            }

            ExpressionAnimation^ ScalarExpressionAnimation()
            {
                auto result = _scalarExpressionAnimation = _c->CreateExpressionAnimation();
                result->SetReferenceParameter("_", _root);
                result->Expression = "_.Progress";
                return result;
            }

            ShapeVisual^ ShapeVisual()
            {
                auto result = _c->CreateShapeVisual();
                result->Size = { 1920, 1280 };
                auto shapes = result->Shapes;
                // 'bkg_white'.Contents
                shapes->Append(ContainerShape_000());
                // 'stroke_main'.Contents
                shapes->Append(ContainerShape_001());
                // 'UI_WindowsLogo 3'.Transforms
                shapes->Append(ContainerShape_003());
                // 'icon_chinese_2'.Transforms
                shapes->Append(ContainerShape_009());
                // 'icon_chinese_1'.Transforms
                shapes->Append(ContainerShape_012());
                // 'icon_globe_outer'.Transforms
                shapes->Append(ContainerShape_015());
                // 'icon_globe_inner'.Transforms
                shapes->Append(ContainerShape_018());
                // 'A'.Transforms
                shapes->Append(ContainerShape_021());
                // 'txt_Hi_dot'.Transforms
                shapes->Append(ContainerShape_024());
                // 'txt_Hi'.Transforms
                shapes->Append(ContainerShape_027());
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'bkg_white'.Contents
            // SolidLayerRectangle
            CompositionSpriteShape^ SpriteShape_000()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = ColorBrush_AlmostLavender_FFEBEBEB();
                result->Geometry = Rectangle_1920x1080();
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'stroke_main'.Contents
            //     Group: Shape 1
            // Path 1
            CompositionSpriteShape^ SpriteShape_001()
            {
                auto result = _c->CreateSpriteShape();
                result->Geometry = PathGeometry_000();
                result->StrokeBrush = ColorBrush_Black();
                result->StrokeDashCap = CompositionStrokeCap::Round;
                result->StrokeEndCap = CompositionStrokeCap::Round;
                result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
                result->StrokeStartCap = CompositionStrokeCap::Round;
                result->StrokeMiterLimit = 4;
                result->StrokeThickness = 3155;
                result->StartAnimation("StrokeThickness", ScalarAnimation_3155_to_13());
                auto controller = result->TryGetAnimationController("StrokeThickness");
                controller->Pause();
                controller->StartAnimation("Progress", ScalarExpressionAnimation());
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'UI_WindowsLogo 3'.Transforms
            //     'UI_WindowsLogo 3'.Contents
            //       Group: Group 4
            // Rectangle Path 1
            CompositionSpriteShape^ SpriteShape_002()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = AnimatedColorBrush_Black_to_Black_000();
                result->Geometry = Rectangle_30_000();
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'UI_WindowsLogo 3'.Transforms
            //     'UI_WindowsLogo 3'.Contents
            //       Group: Group 5
            // Rectangle Path 1
            CompositionSpriteShape^ SpriteShape_003()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = AnimatedColorBrush_Black_to_Black_001();
                result->Geometry = Rectangle_30_001();
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'UI_WindowsLogo 3'.Transforms
            //     'UI_WindowsLogo 3'.Contents
            //       Group: Group 2
            // Rectangle Path 1
            CompositionSpriteShape^ SpriteShape_004()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = AnimatedColorBrush_Black_to_Black_002();
                result->Geometry = Rectangle_30_002();
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'UI_WindowsLogo 3'.Transforms
            //     'UI_WindowsLogo 3'.Contents
            //       Group: Group 1
            // Path 1
            CompositionSpriteShape^ SpriteShape_005()
            {
                auto result = _c->CreateSpriteShape();
                result->FillBrush = AnimatedColorBrush_Black_to_Black_003();
                result->Geometry = PathGeometry_001();
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'icon_chinese_2'.Transforms
            //     'icon_chinese_2'.Contents
            //       Group: icon_chinese_2
            // Path 4
            CompositionSpriteShape^ SpriteShape_006()
            {
                auto result = _c->CreateSpriteShape();
                result->Geometry = PathGeometry_002();
                result->StrokeBrush = _colorBrush_Black;
                result->StrokeDashCap = CompositionStrokeCap::Round;
                result->StrokeEndCap = CompositionStrokeCap::Round;
                result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
                result->StrokeStartCap = CompositionStrokeCap::Round;
                result->StrokeMiterLimit = 4;
                result->StrokeThickness = 13;
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'icon_chinese_2'.Transforms
            //     'icon_chinese_2'.Contents
            //       Group: icon_chinese_2
            // Path 5
            CompositionSpriteShape^ SpriteShape_007()
            {
                auto result = _c->CreateSpriteShape();
                result->Geometry = PathGeometry_003();
                result->StrokeBrush = _colorBrush_Black;
                result->StrokeDashCap = CompositionStrokeCap::Round;
                result->StrokeEndCap = CompositionStrokeCap::Round;
                result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
                result->StrokeStartCap = CompositionStrokeCap::Round;
                result->StrokeMiterLimit = 4;
                result->StrokeThickness = 13;
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'icon_chinese_2'.Transforms
            //     'icon_chinese_2'.Contents
            //       Group: icon_chinese_2
            // Path 3
            CompositionSpriteShape^ SpriteShape_008()
            {
                auto result = _c->CreateSpriteShape();
                result->Geometry = PathGeometry_004();
                result->StrokeBrush = _colorBrush_Black;
                result->StrokeDashCap = CompositionStrokeCap::Round;
                result->StrokeEndCap = CompositionStrokeCap::Round;
                result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
                result->StrokeStartCap = CompositionStrokeCap::Round;
                result->StrokeMiterLimit = 4;
                result->StrokeThickness = 13;
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'icon_chinese_1'.Transforms
            //     'icon_chinese_1'.Contents
            //       Group: icon_chinese_1
            // Path 2
            CompositionSpriteShape^ SpriteShape_009()
            {
                auto result = _c->CreateSpriteShape();
                result->Geometry = PathGeometry_005();
                result->StrokeBrush = _colorBrush_Black;
                result->StrokeDashCap = CompositionStrokeCap::Round;
                result->StrokeEndCap = CompositionStrokeCap::Round;
                result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
                result->StrokeStartCap = CompositionStrokeCap::Round;
                result->StrokeMiterLimit = 4;
                result->StrokeThickness = 13;
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'icon_chinese_1'.Transforms
            //     'icon_chinese_1'.Contents
            //       Group: icon_chinese_1
            // Path 1
            CompositionSpriteShape^ SpriteShape_010()
            {
                auto result = _c->CreateSpriteShape();
                result->Geometry = PathGeometry_006();
                result->StrokeBrush = _colorBrush_Black;
                result->StrokeDashCap = CompositionStrokeCap::Round;
                result->StrokeEndCap = CompositionStrokeCap::Round;
                result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
                result->StrokeStartCap = CompositionStrokeCap::Round;
                result->StrokeMiterLimit = 4;
                result->StrokeThickness = 13;
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'icon_globe_outer'.Transforms
            //     'icon_globe_outer'.Contents
            //       Group: icon_globe_outer
            // Path 1
            CompositionSpriteShape^ SpriteShape_011()
            {
                auto result = _c->CreateSpriteShape();
                result->Geometry = PathGeometry_007();
                result->StrokeBrush = _colorBrush_Black;
                result->StrokeDashCap = CompositionStrokeCap::Round;
                result->StrokeEndCap = CompositionStrokeCap::Round;
                result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
                result->StrokeStartCap = CompositionStrokeCap::Round;
                result->StrokeMiterLimit = 4;
                result->StrokeThickness = 13;
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'icon_globe_inner'.Transforms
            //     'icon_globe_inner'.Contents
            //       Group: icon_globe_inner
            // Path 4
            CompositionSpriteShape^ SpriteShape_012()
            {
                auto result = _c->CreateSpriteShape();
                result->Geometry = PathGeometry_008();
                result->StrokeBrush = _colorBrush_Black;
                result->StrokeDashCap = CompositionStrokeCap::Round;
                result->StrokeEndCap = CompositionStrokeCap::Round;
                result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
                result->StrokeStartCap = CompositionStrokeCap::Round;
                result->StrokeMiterLimit = 4;
                result->StrokeThickness = 13;
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'icon_globe_inner'.Transforms
            //     'icon_globe_inner'.Contents
            //       Group: icon_globe_inner
            // Path 3
            CompositionSpriteShape^ SpriteShape_013()
            {
                auto result = _c->CreateSpriteShape();
                result->Geometry = PathGeometry_009();
                result->StrokeBrush = _colorBrush_Black;
                result->StrokeDashCap = CompositionStrokeCap::Round;
                result->StrokeEndCap = CompositionStrokeCap::Round;
                result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
                result->StrokeStartCap = CompositionStrokeCap::Round;
                result->StrokeMiterLimit = 4;
                result->StrokeThickness = 13;
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'icon_globe_inner'.Transforms
            //     'icon_globe_inner'.Contents
            //       Group: icon_globe_inner
            // Path 2
            CompositionSpriteShape^ SpriteShape_014()
            {
                auto result = _c->CreateSpriteShape();
                result->Geometry = PathGeometry_010();
                result->StrokeBrush = _colorBrush_Black;
                result->StrokeDashCap = CompositionStrokeCap::Round;
                result->StrokeEndCap = CompositionStrokeCap::Round;
                result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
                result->StrokeStartCap = CompositionStrokeCap::Round;
                result->StrokeMiterLimit = 4;
                result->StrokeThickness = 13;
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'icon_globe_inner'.Transforms
            //     'icon_globe_inner'.Contents
            //       Group: icon_globe_inner
            // Path 1
            CompositionSpriteShape^ SpriteShape_015()
            {
                auto result = _c->CreateSpriteShape();
                result->Geometry = PathGeometry_011();
                result->StrokeBrush = _colorBrush_Black;
                result->StrokeDashCap = CompositionStrokeCap::Round;
                result->StrokeEndCap = CompositionStrokeCap::Round;
                result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
                result->StrokeStartCap = CompositionStrokeCap::Round;
                result->StrokeMiterLimit = 4;
                result->StrokeThickness = 13;
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'A'.Transforms
            //     'A'.Contents
            //       Group: icon_A
            // Path 2
            CompositionSpriteShape^ SpriteShape_016()
            {
                auto result = _c->CreateSpriteShape();
                result->Geometry = PathGeometry_012();
                result->StrokeBrush = _colorBrush_Black;
                result->StrokeDashCap = CompositionStrokeCap::Round;
                result->StrokeEndCap = CompositionStrokeCap::Round;
                result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
                result->StrokeStartCap = CompositionStrokeCap::Round;
                result->StrokeMiterLimit = 4;
                result->StrokeThickness = 13;
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'A'.Transforms
            //     'A'.Contents
            //       Group: icon_A
            // Path 1
            CompositionSpriteShape^ SpriteShape_017()
            {
                auto result = _c->CreateSpriteShape();
                result->Geometry = PathGeometry_013();
                result->StrokeBrush = _colorBrush_Black;
                result->StrokeDashCap = CompositionStrokeCap::Round;
                result->StrokeEndCap = CompositionStrokeCap::Round;
                result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
                result->StrokeStartCap = CompositionStrokeCap::Round;
                result->StrokeMiterLimit = 4;
                result->StrokeThickness = 13;
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'txt_Hi_dot'.Transforms
            //     'txt_Hi_dot'.Contents
            //       Group: Group 1
            // Path 1
            CompositionSpriteShape^ SpriteShape_018()
            {
                auto result = _c->CreateSpriteShape();
                result->Geometry = PathGeometry_014();
                result->StrokeBrush = _colorBrush_Black;
                result->StrokeDashCap = CompositionStrokeCap::Round;
                result->StrokeEndCap = CompositionStrokeCap::Round;
                result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
                result->StrokeStartCap = CompositionStrokeCap::Round;
                result->StrokeMiterLimit = 4;
                result->StrokeThickness = 0;
                result->StartAnimation("StrokeThickness", ScalarAnimation_0_to_0());
                auto controller = result->TryGetAnimationController("StrokeThickness");
                controller->Pause();
                controller->StartAnimation("Progress", _scalarExpressionAnimation);
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'txt_Hi'.Transforms
            //     'txt_Hi'.Contents
            //       Group: Group 2
            //         Group: Group 2
            //           Group: Group 1
            // Path 1
            CompositionSpriteShape^ SpriteShape_019()
            {
                auto result = _c->CreateSpriteShape();
                result->Geometry = PathGeometry_015();
                result->StrokeBrush = _colorBrush_Black;
                result->StrokeDashCap = CompositionStrokeCap::Round;
                result->StrokeEndCap = CompositionStrokeCap::Round;
                result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
                result->StrokeStartCap = CompositionStrokeCap::Round;
                result->StrokeMiterLimit = 4;
                result->StrokeThickness = 6.80000019F;
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'txt_Hi'.Transforms
            //     'txt_Hi'.Contents
            //       Group: Group 2
            //         Group: Group 2
            //           Group: Group 2
            // Path 1
            CompositionSpriteShape^ SpriteShape_020()
            {
                auto result = _c->CreateSpriteShape();
                result->Geometry = PathGeometry_016();
                result->StrokeBrush = _colorBrush_Black;
                result->StrokeDashCap = CompositionStrokeCap::Round;
                result->StrokeEndCap = CompositionStrokeCap::Round;
                result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
                result->StrokeStartCap = CompositionStrokeCap::Round;
                result->StrokeMiterLimit = 4;
                result->StrokeThickness = 6.80000019F;
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'txt_Hi'.Transforms
            //     'txt_Hi'.Contents
            //       Group: Group 2
            //         Group: Group 1
            //           Group: Group 1
            // Path 1
            CompositionSpriteShape^ SpriteShape_021()
            {
                auto result = _c->CreateSpriteShape();
                result->Geometry = PathGeometry_017();
                result->StrokeBrush = _colorBrush_Black;
                result->StrokeDashCap = CompositionStrokeCap::Round;
                result->StrokeEndCap = CompositionStrokeCap::Round;
                result->StrokeLineJoin = CompositionStrokeLineJoin::Round;
                result->StrokeStartCap = CompositionStrokeCap::Round;
                result->StrokeMiterLimit = 4;
                result->StrokeThickness = 6.80000019F;
                return result;
            }

            // 'txt_Hi'.Transforms
            //   'UI_WindowsLogo 3'.Transforms
            Vector2KeyFrameAnimation^ Vector2Animation()
            {
                auto result = _c->CreateVector2KeyFrameAnimation();
                result->Duration = { c_durationTicks };
                result->InsertKeyFrame(0, { 1.70000005F, 1.70000005F }, _linearEasingFunction);
                result->InsertKeyFrame(0.0878378376F, { 2.02999997F, 2.02999997F }, CubicBezierEasingFunction_003());
                result->InsertKeyFrame(0.160472974F, { 2.02999997F, 2.02999997F }, CubicBezierEasingFunction_004());
                result->InsertKeyFrame(0.212837845F, { 1.70000005F, 1.70000005F }, CubicBezierEasingFunction_005());
                return result;
            }

            static IGeometrySource2D^ CanvasGeometryToIGeometrySource2D(CanvasGeometry geo)
            {
                ComPtr<ABI::Windows::Graphics::IGeometrySource2D> interop = geo.Detach();
                return reinterpret_cast<IGeometrySource2D^>(interop.Get());
            }

            static void FFHR(HRESULT hr)
            {
                if (hr != S_OK)
                {
                    RoFailFastWithErrorContext(hr);
                }
            }

            Instantiator(Compositor^ compositor)
                : _c(compositor)
                , _reusableExpressionAnimation(compositor->CreateExpressionAnimation())
            {
                FFHR(D2D1CreateFactory(D2D1_FACTORY_TYPE_SINGLE_THREADED, _d2dFactory.GetAddressOf()));
            }

        public:
            static Visual^ InstantiateComposition(Compositor^ compositor)
            {
                return Instantiator(compositor).Root();
            }

        };
    };
}
